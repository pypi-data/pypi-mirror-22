# Generated from /home/dmushkevych/opensource/sdpl.git/grammar/sdpl.g4 by ANTLR 4.7
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\66")
        buf.write("\u015b\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3")
        buf.write("\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\21\3\21\3\22")
        buf.write("\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37")
        buf.write("\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&\3\'")
        buf.write("\3\'\3\'\3(\3(\3(\3)\3)\3)\3*\3*\3+\3+\3+\3,\3,\3-\3-")
        buf.write("\3-\3-\3-\3.\3.\3.\3.\3/\3/\3/\3\60\3\60\3\60\3\60\3\61")
        buf.write("\3\61\3\61\3\61\7\61\u012b\n\61\f\61\16\61\u012e\13\61")
        buf.write("\3\62\6\62\u0131\n\62\r\62\16\62\u0132\3\62\3\62\6\62")
        buf.write("\u0137\n\62\r\62\16\62\u0138\3\63\6\63\u013c\n\63\r\63")
        buf.write("\16\63\u013d\3\64\6\64\u0141\n\64\r\64\16\64\u0142\3\64")
        buf.write("\3\64\3\65\3\65\3\65\5\65\u014a\n\65\3\65\7\65\u014d\n")
        buf.write("\65\f\65\16\65\u0150\13\65\3\65\3\65\3\65\3\65\3\66\3")
        buf.write("\66\3\67\3\67\38\38\3\u014e\29\3\3\5\4\7\5\t\6\13\7\r")
        buf.write("\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!")
        buf.write("\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67")
        buf.write("\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61")
        buf.write("a\62c\63e\64g\65i\66k\2m\2o\2\3\2\5\5\2\13\f\17\17\"\"")
        buf.write("\3\2\62;\4\2C\\c|\2\u0160\2\3\3\2\2\2\2\5\3\2\2\2\2\7")
        buf.write("\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2")
        buf.write("\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2")
        buf.write("\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2")
        buf.write("\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2")
        buf.write("\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63")
        buf.write("\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2")
        buf.write("\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2")
        buf.write("\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3")
        buf.write("\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y")
        buf.write("\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2")
        buf.write("c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\3q\3\2\2\2")
        buf.write("\5z\3\2\2\2\7}\3\2\2\2\t\177\3\2\2\2\13\u0081\3\2\2\2")
        buf.write("\r\u0086\3\2\2\2\17\u008d\3\2\2\2\21\u0095\3\2\2\2\23")
        buf.write("\u009b\3\2\2\2\25\u00a0\3\2\2\2\27\u00a5\3\2\2\2\31\u00b0")
        buf.write("\3\2\2\2\33\u00b2\3\2\2\2\35\u00b4\3\2\2\2\37\u00bb\3")
        buf.write("\2\2\2!\u00bd\3\2\2\2#\u00bf\3\2\2\2%\u00c1\3\2\2\2\'")
        buf.write("\u00c8\3\2\2\2)\u00ce\3\2\2\2+\u00d3\3\2\2\2-\u00d8\3")
        buf.write("\2\2\2/\u00db\3\2\2\2\61\u00e2\3\2\2\2\63\u00e8\3\2\2")
        buf.write("\2\65\u00ee\3\2\2\2\67\u00f0\3\2\2\29\u00f2\3\2\2\2;\u00f4")
        buf.write("\3\2\2\2=\u00f6\3\2\2\2?\u00f8\3\2\2\2A\u00fa\3\2\2\2")
        buf.write("C\u00fc\3\2\2\2E\u00fe\3\2\2\2G\u0100\3\2\2\2I\u0102\3")
        buf.write("\2\2\2K\u0104\3\2\2\2M\u0106\3\2\2\2O\u0109\3\2\2\2Q\u010c")
        buf.write("\3\2\2\2S\u010f\3\2\2\2U\u0111\3\2\2\2W\u0114\3\2\2\2")
        buf.write("Y\u0116\3\2\2\2[\u011b\3\2\2\2]\u011f\3\2\2\2_\u0122\3")
        buf.write("\2\2\2a\u0126\3\2\2\2c\u0130\3\2\2\2e\u013b\3\2\2\2g\u0140")
        buf.write("\3\2\2\2i\u0149\3\2\2\2k\u0155\3\2\2\2m\u0157\3\2\2\2")
        buf.write("o\u0159\3\2\2\2qr\7T\2\2rs\7G\2\2st\7I\2\2tu\7K\2\2uv")
        buf.write("\7U\2\2vw\7V\2\2wx\7G\2\2xy\7T\2\2y\4\3\2\2\2z{\7C\2\2")
        buf.write("{|\7U\2\2|\6\3\2\2\2}~\7=\2\2~\b\3\2\2\2\177\u0080\7?")
        buf.write("\2\2\u0080\n\3\2\2\2\u0081\u0082\7N\2\2\u0082\u0083\7")
        buf.write("Q\2\2\u0083\u0084\7C\2\2\u0084\u0085\7F\2\2\u0085\f\3")
        buf.write("\2\2\2\u0086\u0087\7U\2\2\u0087\u0088\7E\2\2\u0088\u0089")
        buf.write("\7J\2\2\u0089\u008a\7G\2\2\u008a\u008b\7O\2\2\u008b\u008c")
        buf.write("\7C\2\2\u008c\16\3\2\2\2\u008d\u008e\7X\2\2\u008e\u008f")
        buf.write("\7G\2\2\u008f\u0090\7T\2\2\u0090\u0091\7U\2\2\u0091\u0092")
        buf.write("\7K\2\2\u0092\u0093\7Q\2\2\u0093\u0094\7P\2\2\u0094\20")
        buf.write("\3\2\2\2\u0095\u0096\7V\2\2\u0096\u0097\7C\2\2\u0097\u0098")
        buf.write("\7D\2\2\u0098\u0099\7N\2\2\u0099\u009a\7G\2\2\u009a\22")
        buf.write("\3\2\2\2\u009b\u009c\7H\2\2\u009c\u009d\7T\2\2\u009d\u009e")
        buf.write("\7Q\2\2\u009e\u009f\7O\2\2\u009f\24\3\2\2\2\u00a0\u00a1")
        buf.write("\7Y\2\2\u00a1\u00a2\7K\2\2\u00a2\u00a3\7V\2\2\u00a3\u00a4")
        buf.write("\7J\2\2\u00a4\26\3\2\2\2\u00a5\u00a6\7R\2\2\u00a6\u00a7")
        buf.write("\7T\2\2\u00a7\u00a8\7Q\2\2\u00a8\u00a9\7L\2\2\u00a9\u00aa")
        buf.write("\7G\2\2\u00aa\u00ab\7E\2\2\u00ab\u00ac\7V\2\2\u00ac\u00ad")
        buf.write("\7K\2\2\u00ad\u00ae\7Q\2\2\u00ae\u00af\7P\2\2\u00af\30")
        buf.write("\3\2\2\2\u00b0\u00b1\7*\2\2\u00b1\32\3\2\2\2\u00b2\u00b3")
        buf.write("\7+\2\2\u00b3\34\3\2\2\2\u00b4\u00b5\7P\2\2\u00b5\u00b6")
        buf.write("\7Q\2\2\u00b6\u00b7\7G\2\2\u00b7\u00b8\7O\2\2\u00b8\u00b9")
        buf.write("\7K\2\2\u00b9\u00ba\7V\2\2\u00ba\36\3\2\2\2\u00bb\u00bc")
        buf.write("\7.\2\2\u00bc \3\2\2\2\u00bd\u00be\7\60\2\2\u00be\"\3")
        buf.write("\2\2\2\u00bf\u00c0\7<\2\2\u00c0$\3\2\2\2\u00c1\u00c2\7")
        buf.write("G\2\2\u00c2\u00c3\7Z\2\2\u00c3\u00c4\7R\2\2\u00c4\u00c5")
        buf.write("\7C\2\2\u00c5\u00c6\7P\2\2\u00c6\u00c7\7F\2\2\u00c7&\3")
        buf.write("\2\2\2\u00c8\u00c9\7U\2\2\u00c9\u00ca\7V\2\2\u00ca\u00cb")
        buf.write("\7Q\2\2\u00cb\u00cc\7T\2\2\u00cc\u00cd\7G\2\2\u00cd(\3")
        buf.write("\2\2\2\u00ce\u00cf\7K\2\2\u00cf\u00d0\7P\2\2\u00d0\u00d1")
        buf.write("\7V\2\2\u00d1\u00d2\7Q\2\2\u00d2*\3\2\2\2\u00d3\u00d4")
        buf.write("\7L\2\2\u00d4\u00d5\7Q\2\2\u00d5\u00d6\7K\2\2\u00d6\u00d7")
        buf.write("\7P\2\2\u00d7,\3\2\2\2\u00d8\u00d9\7D\2\2\u00d9\u00da")
        buf.write("\7[\2\2\u00da.\3\2\2\2\u00db\u00dc\7H\2\2\u00dc\u00dd")
        buf.write("\7K\2\2\u00dd\u00de\7N\2\2\u00de\u00df\7V\2\2\u00df\u00e0")
        buf.write("\7G\2\2\u00e0\u00e1\7T\2\2\u00e1\60\3\2\2\2\u00e2\u00e3")
        buf.write("\7Q\2\2\u00e3\u00e4\7T\2\2\u00e4\u00e5\7F\2\2\u00e5\u00e6")
        buf.write("\7G\2\2\u00e6\u00e7\7T\2\2\u00e7\62\3\2\2\2\u00e8\u00e9")
        buf.write("\7I\2\2\u00e9\u00ea\7T\2\2\u00ea\u00eb\7Q\2\2\u00eb\u00ec")
        buf.write("\7W\2\2\u00ec\u00ed\7R\2\2\u00ed\64\3\2\2\2\u00ee\u00ef")
        buf.write("\7)\2\2\u00ef\66\3\2\2\2\u00f0\u00f1\7&\2\2\u00f18\3\2")
        buf.write("\2\2\u00f2\u00f3\7}\2\2\u00f3:\3\2\2\2\u00f4\u00f5\7\177")
        buf.write("\2\2\u00f5<\3\2\2\2\u00f6\u00f7\7B\2\2\u00f7>\3\2\2\2")
        buf.write("\u00f8\u00f9\7\'\2\2\u00f9@\3\2\2\2\u00fa\u00fb\7A\2\2")
        buf.write("\u00fbB\3\2\2\2\u00fc\u00fd\7,\2\2\u00fdD\3\2\2\2\u00fe")
        buf.write("\u00ff\7\61\2\2\u00ffF\3\2\2\2\u0100\u0101\7-\2\2\u0101")
        buf.write("H\3\2\2\2\u0102\u0103\7/\2\2\u0103J\3\2\2\2\u0104\u0105")
        buf.write("\7`\2\2\u0105L\3\2\2\2\u0106\u0107\7#\2\2\u0107\u0108")
        buf.write("\7?\2\2\u0108N\3\2\2\2\u0109\u010a\7?\2\2\u010a\u010b")
        buf.write("\7?\2\2\u010bP\3\2\2\2\u010c\u010d\7>\2\2\u010d\u010e")
        buf.write("\7?\2\2\u010eR\3\2\2\2\u010f\u0110\7>\2\2\u0110T\3\2\2")
        buf.write("\2\u0111\u0112\7@\2\2\u0112\u0113\7?\2\2\u0113V\3\2\2")
        buf.write("\2\u0114\u0115\7@\2\2\u0115X\3\2\2\2\u0116\u0117\7N\2")
        buf.write("\2\u0117\u0118\7K\2\2\u0118\u0119\7M\2\2\u0119\u011a\7")
        buf.write("G\2\2\u011aZ\3\2\2\2\u011b\u011c\7C\2\2\u011c\u011d\7")
        buf.write("P\2\2\u011d\u011e\7F\2\2\u011e\\\3\2\2\2\u011f\u0120\7")
        buf.write("Q\2\2\u0120\u0121\7T\2\2\u0121^\3\2\2\2\u0122\u0123\7")
        buf.write("b\2\2\u0123\u0124\7b\2\2\u0124\u0125\7b\2\2\u0125`\3\2")
        buf.write("\2\2\u0126\u012c\5o8\2\u0127\u012b\5o8\2\u0128\u012b\5")
        buf.write("m\67\2\u0129\u012b\5k\66\2\u012a\u0127\3\2\2\2\u012a\u0128")
        buf.write("\3\2\2\2\u012a\u0129\3\2\2\2\u012b\u012e\3\2\2\2\u012c")
        buf.write("\u012a\3\2\2\2\u012c\u012d\3\2\2\2\u012db\3\2\2\2\u012e")
        buf.write("\u012c\3\2\2\2\u012f\u0131\5m\67\2\u0130\u012f\3\2\2\2")
        buf.write("\u0131\u0132\3\2\2\2\u0132\u0130\3\2\2\2\u0132\u0133\3")
        buf.write("\2\2\2\u0133\u0134\3\2\2\2\u0134\u0136\7\60\2\2\u0135")
        buf.write("\u0137\5m\67\2\u0136\u0135\3\2\2\2\u0137\u0138\3\2\2\2")
        buf.write("\u0138\u0136\3\2\2\2\u0138\u0139\3\2\2\2\u0139d\3\2\2")
        buf.write("\2\u013a\u013c\5m\67\2\u013b\u013a\3\2\2\2\u013c\u013d")
        buf.write("\3\2\2\2\u013d\u013b\3\2\2\2\u013d\u013e\3\2\2\2\u013e")
        buf.write("f\3\2\2\2\u013f\u0141\t\2\2\2\u0140\u013f\3\2\2\2\u0141")
        buf.write("\u0142\3\2\2\2\u0142\u0140\3\2\2\2\u0142\u0143\3\2\2\2")
        buf.write("\u0143\u0144\3\2\2\2\u0144\u0145\b\64\2\2\u0145h\3\2\2")
        buf.write("\2\u0146\u0147\7/\2\2\u0147\u014a\7/\2\2\u0148\u014a\7")
        buf.write("%\2\2\u0149\u0146\3\2\2\2\u0149\u0148\3\2\2\2\u014a\u014e")
        buf.write("\3\2\2\2\u014b\u014d\13\2\2\2\u014c\u014b\3\2\2\2\u014d")
        buf.write("\u0150\3\2\2\2\u014e\u014f\3\2\2\2\u014e\u014c\3\2\2\2")
        buf.write("\u014f\u0151\3\2\2\2\u0150\u014e\3\2\2\2\u0151\u0152\7")
        buf.write("\f\2\2\u0152\u0153\3\2\2\2\u0153\u0154\b\65\3\2\u0154")
        buf.write("j\3\2\2\2\u0155\u0156\7a\2\2\u0156l\3\2\2\2\u0157\u0158")
        buf.write("\t\3\2\2\u0158n\3\2\2\2\u0159\u015a\t\4\2\2\u015ap\3\2")
        buf.write("\2\2\13\2\u012a\u012c\u0132\u0138\u013d\u0142\u0149\u014e")
        buf.write("\4\2\3\2\2\4\2")
        return buf.getvalue()


class sdplLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    AO_MULTIPLY = 33
    AO_DIVIDE = 34
    AO_PLUS = 35
    AO_MINUS = 36
    AO_POWER = 37
    CO_NE = 38
    CO_EQ = 39
    CO_LE = 40
    CO_LT = 41
    CO_GE = 42
    CO_GT = 43
    CO_LIKE = 44
    AND = 45
    OR = 46
    QUOTE_DELIM = 47
    ID = 48
    DECIMAL = 49
    INTEGER = 50
    WS = 51
    SL_COMMENT = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'REGISTER'", "'AS'", "';'", "'='", "'LOAD'", "'SCHEMA'", "'VERSION'", 
            "'TABLE'", "'FROM'", "'WITH'", "'PROJECTION'", "'('", "')'", 
            "'NOEMIT'", "','", "'.'", "':'", "'EXPAND'", "'STORE'", "'INTO'", 
            "'JOIN'", "'BY'", "'FILTER'", "'ORDER'", "'GROUP'", "'''", "'$'", 
            "'{'", "'}'", "'@'", "'%'", "'?'", "'*'", "'/'", "'+'", "'-'", 
            "'^'", "'!='", "'=='", "'<='", "'<'", "'>='", "'>'", "'LIKE'", 
            "'AND'", "'OR'", "'```'" ]

    symbolicNames = [ "<INVALID>",
            "AO_MULTIPLY", "AO_DIVIDE", "AO_PLUS", "AO_MINUS", "AO_POWER", 
            "CO_NE", "CO_EQ", "CO_LE", "CO_LT", "CO_GE", "CO_GT", "CO_LIKE", 
            "AND", "OR", "QUOTE_DELIM", "ID", "DECIMAL", "INTEGER", "WS", 
            "SL_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "AO_MULTIPLY", "AO_DIVIDE", "AO_PLUS", "AO_MINUS", "AO_POWER", 
                  "CO_NE", "CO_EQ", "CO_LE", "CO_LT", "CO_GE", "CO_GT", 
                  "CO_LIKE", "AND", "OR", "QUOTE_DELIM", "ID", "DECIMAL", 
                  "INTEGER", "WS", "SL_COMMENT", "UNDERSCORE", "NUMBER", 
                  "LETTER" ]

    grammarFileName = "sdpl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    CHANNEL_WHITESPACE = 1
    CHANNEL_COMMENTS = 2


