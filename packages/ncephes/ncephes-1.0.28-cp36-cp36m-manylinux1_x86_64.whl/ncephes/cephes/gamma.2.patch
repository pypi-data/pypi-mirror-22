--- gamma.c	2016-08-22 16:09:05.000000000 +0100
+++ gamma.new.c	2016-08-22 16:27:41.000000000 +0100
@@ -266,8 +266,6 @@
 #define SQTPI *(double *)SQT
 #endif
 
-int sgngam = 0;
-extern int sgngam;
 extern double MAXLOG, MAXNUM, PI;
 #ifdef ANSIPROT
 extern double pow ( double, double );
@@ -327,7 +325,7 @@
 double p, q, z;
 int i;
 
-sgngam = 1;
+int sgngam = 1;
 #ifdef NANS
 if( isnan(x) )
 	return(x);
@@ -572,15 +570,20 @@
 
 
 /* Logarithm of gamma function */
+double lgam(double x)
+{
+    int sign;
+    return lgam_sgn(x, &sign);
+}
 
 
 double 
-lgam (double x)
+lgam_sgn (double x, int *sign)
 {
 double p, q, u, w, z;
 int i;
+*sign = 1;
 
-sgngam = 1;
 #ifdef NANS
 if( isnan(x) )
 	return(x);
@@ -594,7 +597,7 @@
 if( x < -34.0 )
 	{
 	q = -x;
-	w = lgam(q); /* note this modifies sgngam! */
+	w = lgam(q, sign); /* note this modifies sgngam! */
 	p = floor(q);
 	if( p == q )
 		{
@@ -608,9 +611,9 @@
 		}
 	i = p;
 	if( (i & 1) == 0 )
-		sgngam = -1;
+		*sign = -1;
 	else
-		sgngam = 1;
+		*sign = 1;
 	z = q - p;
 	if( z > 0.5 )
 		{
@@ -646,11 +649,11 @@
 		}
 	if( z < 0.0 )
 		{
-		sgngam = -1;
+		*sign = -1;
 		z = -z;
 		}
 	else
-		sgngam = 1;
+		*sign = 1;
 	if( u == 2.0 )
 		return( log(z) );
 	p -= 2.0;
@@ -662,11 +665,11 @@
 if( x > MAXLGM )
 	{
 #ifdef INFINITIES
-	return( sgngam * INFINITY );
+	return( *sign * INFINITY );
 #else
 loverf:
 	mtherr( "lgam", OVERFLOW );
-	return( sgngam * MAXNUM );
+	return( *sign * MAXNUM );
 #endif
 	}
 
