--- ellf.c	2016-08-15 16:48:55.000000000 +0100
+++ ellf.new.c	2016-08-15 16:49:05.000000000 +0100
@@ -5,6 +5,7 @@
 
 
 #include <stdio.h>
+#include <stdlib.h>
 
 /* size of arrays: */
 #define ARRSIZ 50
@@ -29,11 +30,6 @@
 static double cgam = 0.0;
 static double scale = 0.0;
 double fs = 1.0e4;
-static double dbr = 0.5;
-static double dbd = -40.0;
-static double f1 = 1.5e3;
-static double f2 = 2.0e3;
-static double f3 = 2.4e3;
 double dbfac = 0.0;
 static double a = 0.0;
 static double b = 0.0;
@@ -58,10 +54,6 @@
 static double phi1 = 0.0;
 static double m1 = 0.0;
 static double m1p = 0.0;
-static double cang = 0.0;
-static double sang = 0.0;
-static double bw = 0.0;
-static double ang = 0.0;
 double fnyq = 0.0;
 static double ai = 0.0;
 static double pn = 0.0;
@@ -89,11 +81,6 @@
 static int type = 1;
 static int kind = 1;
 
-static char wkind[] =
-{"Filter kind:\n1 Butterworth\n2 Chebyshev\n3 Elliptic\n"};
-
-static char salut[] =
-{"Filter shape:\n1 low pass\n2 band pass\n3 high pass\n4 band stop\n"};
 
 #ifdef ANSIPROT
 extern double exp ( double );
@@ -119,7 +106,6 @@
 extern double ellpe ( double x );
 extern int ellpj ( double, double, double *, double *, double *, double * );
 extern double ellpk ( double x );
-int getnum ( char *line, double *val );
 double cay ( double q );
 int lampln ( void );
 int spln ( void );
@@ -138,276 +124,6 @@
 #define fabs(x) ( (x) < 0 ? -(x) : (x) )
 #endif
 
-int 
-main (void)
-{
-char str[80];
-
-dbfac = 10.0/log(10.0);
-
-top:
-
-printf( "%s ? ", wkind );	/* ask for filter kind */
-gets( str );
-sscanf( str, "%d", &kind );
-printf( "%d\n", kind );
-if( (kind <= 0) || (kind > 3) )
-	exit(0);
-
-printf( "%s ? ", salut );	/* ask for filter type */
-gets( str );
-sscanf( str, "%d", &type );
-printf( "%d\n", type );
-if( (type <= 0) || (type > 4) )
-	exit(0);
-
-getnum( "Order of filter", &rn ); /* see below for getnum() */
-n = rn;
-if( n <= 0 )
-	{
-specerr:
-	printf( "? Specification error\n" );
-	goto top;
-	}
-rn = n;	/* ensure it is an integer */
-if( kind > 1 ) /* not Butterworth */
-	{
-	getnum( "Passband ripple, db", &dbr );
-	if( dbr <= 0.0 )
-		goto specerr;
-	if( kind == 2 )
-		{
-/* For Chebyshev filter, ripples go from 1.0 to 1/sqrt(1+eps^2) */
-		phi = exp( 0.5*dbr/dbfac );
-
-		if( (n & 1) == 0 )
-			scale = phi;
-		else
-			scale = 1.0;
-		}
-	else
-		{ /* elliptic */
-	eps = exp( dbr/dbfac );
-	scale = 1.0;
-	if( (n & 1) == 0 )
-		scale = sqrt( eps );
-	eps = sqrt( eps - 1.0 );
-		}
-	}
-
-getnum( "Sampling frequency", &fs );
-if( fs <= 0.0 )
-	goto specerr;
-
-fnyq = 0.5 * fs;
-
-getnum( "Passband edge", &f2 );
-if( (f2 <= 0.0) || (f2 >= fnyq) )
-	goto specerr;
-
-if( (type & 1) == 0 )
-	{
-	getnum( "Other passband edge", &f1 );
-	if( (f1 <= 0.0) || (f1 >= fnyq) )
-		goto specerr;
-	}
-else
-	{
-	f1 = 0.0;
-	}
-
-if( f2 < f1 )
-	{
-	a = f2;
-	f2 = f1;
-	f1 = a;
-	}
-if( type == 3 )	/* high pass */
-	{
-	bw = f2;
-	a = fnyq;
-	}
-else
-	{
-	bw = f2 - f1;
-	a = f2;
-	}
-/* Frequency correspondence for bilinear transformation
- *
- *  Wanalog = tan( 2 pi Fdigital T / 2 )
- *
- * where T = 1/fs
- */
-ang = bw * PI / fs;
-cang = cos( ang );
-c = sin(ang) / cang; /* Wanalog */
-if( kind != 3 )
-	{
-	wc = c;
-/*printf( "cos( 1/2 (Whigh-Wlow) T ) = %.5e, wc = %.5e\n", cang, wc );*/
-	}
-
-
-if( kind == 3 )
-	{ /* elliptic */
-	cgam = cos( (a+f1) * PI / fs ) / cang;
-	getnum( "Stop band edge or -(db down)", &dbd );
-	if( dbd > 0.0 )
-		f3 = dbd;
-	else
-		{ /* calculate band edge from db down */
-		a = exp( -dbd/dbfac );
-		m1 = eps/sqrt( a - 1.0 );
-		m1 *= m1;
-		m1p = 1.0 - m1;
-		Kk1 = ellpk( m1p );
-		Kpk1 = ellpk( m1 );
-		q = exp( -PI * Kpk1 / (rn * Kk1) );
-		k = cay(q);
-		if( type >= 3 )
-			wr = k;
-		else
-			wr = 1.0/k;
-		if( type & 1 )
-			{
-			f3 = atan( c * wr ) * fs / PI;
-			}
-		else
-			{
-			a = c * wr;
-			a *= a;
-			b = a * (1.0 - cgam * cgam) + a * a;
-			b = (cgam + sqrt(b))/(1.0 + a);
-			f3 = (PI/2.0 - asin(b)) * fs / (2.0*PI);
-			}
-		}
-switch( type )
-	{
-	case 1:
-		if( f3 <= f2 )
-			goto specerr;
-		break;
-
-	case 2:
-		if( (f3 > f2) || (f3 < f1) )
-			break;
-		goto specerr;
-
-	case 3:
-		if( f3 >= f2 )
-			goto specerr;
-		break;
-
-	case 4:
-		if( (f3 <= f1) || (f3 >= f2) )
-			goto specerr;
-		break;
-	}
-ang = f3 * PI / fs;
-cang = cos(ang);
-sang = sin(ang);
-	
-if( type & 1 )
-	{
-	wr = sang/(cang*c);
-	}
-else
-	{
-	q = cang * cang  -  sang * sang;
-	sang = 2.0 * cang * sang;
-	cang = q;
-	wr = (cgam - cang)/(sang * c);
-	}
-
-if( type >= 3 )
-	wr = 1.0/wr;
-if( wr < 0.0 )
-	wr = -wr;
-y[0] = 1.0;
-y[1] = wr;
-cbp = wr;
-
-if( type >= 3 )
-	y[1] = 1.0/y[1];
-
-if( type & 1 )
-	{
-	for( i=1; i<=2; i++ )
-		{
-		aa[i] = atan( c * y[i-1] ) * fs / PI ;
-		}
-	printf( "pass band %.9E\n", aa[1] );
-	printf( "stop band %.9E\n", aa[2] );
-	}
-else
-	{
-	for( i=1; i<=2; i++ )
-		{
-		a = c * y[i-1];
-		b = atan(a);
-		q = sqrt( 1.0 + a * a  -  cgam * cgam );
-#ifdef ANSIC
-		q = atan2( q, cgam );
-#else
-		q = atan2( cgam, q );
-#endif
-		aa[i] = (q + b) * fnyq / PI;
-		pp[i] = (q - b) * fnyq / PI;
-		}
-	printf( "pass band %.9E %.9E\n", pp[1], aa[1] );
-	printf( "stop band %.9E %.9E\n", pp[2], aa[2] );
-	}
-lampln();	/* find locations in lambda plane */
-if( (2*n+2) > ARRSIZ )
-	goto toosml;
-	}
-
-/* Transformation from low-pass to band-pass critical frequencies
- *
- * Center frequency
- *                     cos( 1/2 (Whigh+Wlow) T )
- *  cos( Wcenter T ) = ----------------------
- *                     cos( 1/2 (Whigh-Wlow) T )
- *
- *
- * Band edges
- *            cos( Wcenter T) - cos( Wdigital T )
- *  Wanalog = -----------------------------------
- *                        sin( Wdigital T )
- */
-
-if( kind == 2 )
-	{ /* Chebyshev */
-	a = PI * (a+f1) / fs ;
-	cgam = cos(a) / cang;
-	a = 2.0 * PI * f2 / fs;
-	cbp = (cgam - cos(a))/sin(a);
-	}
-if( kind == 1 )
-	{ /* Butterworth */
-	a = PI * (a+f1) / fs ;
-	cgam = cos(a) / cang;
-	a = 2.0 * PI * f2 / fs;
-	cbp = (cgam - cos(a))/sin(a);
-	scale = 1.0;
-	}
-
-spln();		/* find s plane poles and zeros */
-
-if( ((type & 1) == 0) && ((4*n+2) > ARRSIZ) )
-	goto toosml;
-
-zplna();	/* convert s plane to z plane */
-zplnb();
-zplnc();
-xfun(); /* tabulate transfer function */
-goto top;
-
-toosml:
-printf( "Cannot continue, storage arrays too small\n" );
-goto top;
-}
-
 
 int 
 lampln (void)
@@ -833,10 +549,6 @@
 int 
 zplnb (void)
 {
-cmplx lin[2];
-
-lin[1].r = 1.0;
-lin[1].i = 0.0;
 
 if( kind != 3 )
 	{ /* Butterworth or Chebyshev */
@@ -1114,23 +826,3 @@
 }
 
 
-
-
-/* Get a number from keyboard.
- * Display previous value and keep it if user just hits <CR>.
- */
-int 
-getnum (char *line, double *val)
-{
-char s[40];
-
-printf( "%s = %.9E ? ", line, *val );
-gets( s );
-if( s[0] != '\0' )
-	{
-	sscanf( s, "%lf", val );
-	printf( "%.9E\n", *val );
-	}
-return 0;
-}
-
