
# zxbasmtab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULDIVrightPOWrightUMINUSA ADC ADD ADDR AF ALIGN AND APO B BC BIT C CALL CCF COMMA CP CPD CPDR CPI CPIR CPL D DAA DE DEC DEFAULT DEFB DEFS DEFW DI DIV DJNZ E EI END ENDP EQU EX EXX H HALT HL I ID IM IN INC INCBIN IND INDR INI INIR INTEGER IX IXH IXL IY IYH IYL JP JR L LABEL LD LDD LDDR LDI LDIR LOCAL LP M MINUS MUL NAMESPACE NC NEG NEWLINE NOP NZ OR ORG OTDR OTIR OUT OUTD OUTI P PE PLUS PO POP POW PROC PUSH R RES RET RETI RETN RL RLA RLC RLCA RLD RP RR RRA RRC RRCA RRD RST SBC SCF SET SLA SLL SP SRA SRL STRING SUB UMINUS XOR Z _INIT _LINE start : program\n              | program endline\n     endline : END NEWLINE\n     endline : END expr NEWLINE\n                | END pexpr NEWLINE\n     program : line\n     program : program line\n     line : ID EQU expr NEWLINE\n             | ID EQU pexpr NEWLINE\n     line : LABEL NEWLINE\n     line : LABEL asm NEWLINE\n     line : asm NEWLINE\n     line : NEWLINE\n     asm : LD reg8 COMMA reg8_hl\n            | LD reg8_hl COMMA reg8\n            | LD reg8 COMMA reg8\n            | LD SP COMMA HL\n            | LD SP COMMA reg16i\n            | LD A COMMA reg8\n            | LD reg8 COMMA A\n            | LD reg8_hl COMMA A\n            | LD A COMMA reg8_hl\n            | LD A COMMA A\n            | LD A COMMA I\n            | LD I COMMA A\n            | LD A COMMA R\n            | LD R COMMA A\n            | LD A COMMA reg8i\n            | LD reg8i COMMA A\n            | LD reg8 COMMA reg8i\n            | LD reg8i COMMA regBCDE\n            | LD reg8i COMMA reg8i\n     asm : LD A COMMA LP BC RP\n            | LD A COMMA LP DE RP\n            | LD LP BC RP COMMA A\n            | LD LP DE RP COMMA A\n     asm : PROC\n     asm : ENDP\n     asm : LOCAL id_list\n     id_list : ID\n     id_list : id_list COMMA ID\n     asm : DEFB number_list\n            | DEFB STRING\n     asm : DEFS number_list\n     asm : DEFW number_list\n     number_list : expr\n                    | pexpr\n     number_list : number_list COMMA expr\n                    | number_list COMMA pexpr\n     asm : LD reg8_I COMMA reg8\n            | LD reg8_I COMMA A\n     asm : LD reg8 COMMA reg8_I\n            | LD A COMMA reg8_I\n     reg8_hl : LP HL RP\n        reg8_I : LP IX PLUS expr RP\n               | LP IX MINUS expr RP\n               | LP IY PLUS expr RP\n               | LP IY MINUS expr RP\n               | LP IX PLUS pexpr RP\n               | LP IX MINUS pexpr RP\n               | LP IY PLUS pexpr RP\n               | LP IY MINUS pexpr RP\n     asm : EX AF COMMA AF APO\n     asm : EX DE COMMA HL\n     asm : ORG expr\n            | ORG pexpr\n     asm : NAMESPACE DEFAULT\n            | NAMESPACE ID\n     asm : ALIGN expr\n            | ALIGN pexpr\n     asm : INCBIN STRING\n     asm : EX LP SP RP COMMA reg16i\n            | EX LP SP RP COMMA HL\n     asm : INC inc_reg\n            | DEC inc_reg\n     asm : INC reg8_I\n            | DEC reg8_I\n     asm : LD reg8 COMMA expr\n            | LD reg8 COMMA pexpr\n            | LD reg16 COMMA expr\n            | LD reg8_hl COMMA expr\n            | LD A COMMA expr\n            | LD SP COMMA expr\n            | LD reg8i COMMA expr\n     asm : LD reg8_I COMMA expr\n     asm : JP reg8_hl\n            | JP LP reg16i RP\n     asm : SBC A COMMA reg8\n            | SBC A COMMA reg8i\n            | SBC A COMMA A\n            | SBC A COMMA reg8_hl\n            | SBC HL COMMA SP\n            | SBC HL COMMA BC\n            | SBC HL COMMA DE\n            | SBC HL COMMA HL\n            | ADD A COMMA reg8\n            | ADD A COMMA reg8i\n            | ADD A COMMA A\n            | ADD A COMMA reg8_hl\n            | ADC A COMMA reg8\n            | ADC A COMMA reg8i\n            | ADC A COMMA A\n            | ADC A COMMA reg8_hl\n            | ADD HL COMMA BC\n            | ADD HL COMMA DE\n            | ADD HL COMMA HL\n            | ADD HL COMMA SP\n            | ADC HL COMMA BC\n            | ADC HL COMMA DE\n            | ADC HL COMMA HL\n            | ADC HL COMMA SP\n            | ADD reg16i COMMA BC\n            | ADD reg16i COMMA DE\n            | ADD reg16i COMMA HL\n            | ADD reg16i COMMA SP\n            | ADD reg16i COMMA reg16i\n     asm : SBC A COMMA expr\n            | SBC A COMMA pexpr\n            | ADD A COMMA expr\n            | ADD A COMMA pexpr\n            | ADC A COMMA expr\n            | ADC A COMMA pexpr\n     asm : SBC A COMMA reg8_I\n            | ADD A COMMA reg8_I\n            | ADC A COMMA reg8_I\n     asm : bitwiseop reg8\n            | bitwiseop reg8i\n            | bitwiseop A\n            | bitwiseop reg8_hl\n     asm : bitwiseop reg8_I\n     asm : bitwiseop expr\n            | bitwiseop pexpr\n     bitwiseop : OR\n              | AND\n              | XOR\n              | SUB\n              | CP\n     asm : PUSH AF\n            | PUSH reg16\n            | POP AF\n            | POP reg16\n     asm : LD pexpr COMMA A\n            | LD pexpr COMMA reg16\n            | LD pexpr COMMA SP\n     asm : LD A COMMA pexpr\n            | LD reg16 COMMA pexpr\n            | LD SP COMMA pexpr\n     asm : rotation reg8\n            | rotation reg8_hl\n            | rotation A\n     asm : rotation reg8_I\n     asm : bitop expr COMMA A\n            | bitop pexpr COMMA A\n            | bitop expr COMMA reg8\n            | bitop pexpr COMMA reg8\n            | bitop expr COMMA reg8_hl\n            | bitop pexpr COMMA reg8_hl\n     asm : bitop expr COMMA reg8_I\n            | bitop pexpr COMMA reg8_I\n     bitop : BIT\n              | RES\n              | SET\n     rotation : RR\n                 | RL\n                 | RRC\n                 | RLC\n                 | SLA\n                 | SLL\n                 | SRA\n                 | SRL\n     inc_reg : SP\n                | reg8\n                | reg16\n                | reg8_hl\n                | A\n                | reg8i\n     reg8 : H\n             | L\n             | regBCDE\n     regBCDE : B\n                | C\n                | D\n                | E\n     reg8i : IXH\n              | IXL\n              | IYH\n              | IYL\n     reg16 : BC\n             | DE\n             | HL\n             | reg16i\n     reg16i : IX\n               | IY\n     asm : JP jp_flags COMMA expr\n            | JP jp_flags COMMA pexpr\n            | CALL jp_flags COMMA expr\n            | CALL jp_flags COMMA pexpr\n     asm : RET jp_flags\n     jp_flags : P\n                 | M\n                 | PO\n                 | PE\n                 | jr_flags\n     asm : JR jr_flags COMMA expr\n            | JR jr_flags COMMA pexpr\n     jr_flags : Z\n                 | C\n                 | NZ\n                 | NC\n     asm : JP expr\n            | JR expr\n            | CALL expr\n            | DJNZ expr\n            | JP pexpr\n            | JR pexpr\n            | CALL pexpr\n            | DJNZ pexpr\n     asm : RST expr\n     asm : IM expr\n        asm : IN A COMMA LP C RP\n            | IN reg8 COMMA LP C RP\n        asm : OUT LP C RP COMMA A\n            | OUT LP C RP COMMA reg8\n     asm : IN A COMMA pexpr\n     asm : OUT pexpr COMMA A\n     asm : NOP\n            | EXX\n            | CCF\n            | SCF\n            | LDIR\n            | LDI\n            | LDDR\n            | LDD\n            | CPIR\n            | CPI\n            | CPDR\n            | CPD\n            | DAA\n            | NEG\n            | CPL\n            | HALT\n            | EI\n            | DI\n            | OUTD\n            | OUTI\n            | OTDR\n            | OTIR\n            | IND\n            | INI\n            | INDR\n            | INIR\n            | RET\n            | RETI\n            | RETN\n            | RLA\n            | RLCA\n            | RRA\n            | RRCA\n            | RLD\n            | RRD\n     expr : expr PLUS expr\n             | expr MINUS expr\n             | expr MUL expr\n             | expr DIV expr\n             | expr POW expr\n             | pexpr PLUS expr\n             | pexpr MINUS expr\n             | pexpr MUL expr\n             | pexpr DIV expr\n             | pexpr POW expr\n             | expr PLUS pexpr\n             | expr MINUS pexpr\n             | expr MUL pexpr\n             | expr DIV pexpr\n             | expr POW pexpr\n     pexpr : LP expr RP\n     expr : MINUS expr %prec UMINUS\n     expr : INTEGER\n     expr : ID\n     expr : ADDR\n     asm : preproc_line\n     preproc_line : _LINE INTEGER\n     preproc_line : _LINE INTEGER STRING\n     preproc_line : _INIT ID\n    '
    
_lr_action_items = {'ID':([0,2,3,5,11,12,13,14,16,17,18,22,26,30,31,33,34,35,36,74,75,76,77,78,87,88,89,91,93,94,95,96,98,109,133,137,162,189,215,224,225,226,227,228,231,238,240,241,242,243,244,245,246,247,248,249,250,251,252,258,259,261,264,268,269,277,278,299,312,313,315,316,356,400,],[4,4,-6,-13,128,135,135,135,135,146,135,135,135,135,135,135,135,135,135,-133,-134,-135,-136,-137,-160,-161,-162,218,-7,135,135,-10,-12,135,135,135,135,135,135,-11,135,135,135,135,135,135,135,325,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,-8,-9,135,135,135,135,135,135,135,]),'LABEL':([0,2,3,5,93,96,98,224,277,278,],[6,6,-6,-13,-7,-10,-12,-11,-8,-9,]),'NEWLINE':([0,2,3,5,6,7,9,10,32,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,93,94,96,97,98,102,103,108,110,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,138,139,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,161,164,165,166,167,168,169,170,171,172,173,174,182,183,184,185,186,187,188,190,191,192,193,194,195,196,197,202,203,204,206,207,208,209,210,212,217,218,220,221,222,223,224,253,274,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,300,301,302,303,304,305,306,307,308,311,314,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,344,346,347,348,349,350,351,352,353,354,355,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,401,404,417,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,],[5,5,-6,-13,96,98,-37,-38,-252,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-250,-251,-253,-254,-255,-256,-257,-258,-259,-260,-281,-7,219,-10,224,-12,-190,-191,-179,-188,-189,-177,-178,-184,-185,-186,-187,-192,-193,-180,-181,-182,-183,-39,-40,-42,-43,-46,-47,-278,-279,-280,-44,-45,-65,-66,-67,-68,-69,-70,-71,-74,-76,-171,-172,-173,-174,-175,-176,-75,-77,-86,-210,-214,-199,-200,-201,-202,-203,-206,-207,-208,-209,-126,-127,-128,-129,-130,-131,-132,-138,-139,-140,-141,-148,-149,-150,-151,-212,-216,-198,-211,-215,-213,-217,-218,-219,-282,-284,275,276,277,278,-11,-277,-283,-8,-9,-16,-14,-20,-30,-52,-78,-79,-15,-21,-81,-17,-18,-83,-147,-23,-19,-22,-24,-26,-28,-53,-82,-145,-25,-27,-32,-29,-31,-84,-54,-276,-50,-51,-85,-142,-143,-144,-80,-146,-41,-48,-49,-261,-271,-262,-272,-263,-273,-264,-274,-265,-275,-266,-267,-268,-269,-270,-64,-87,-194,-195,-90,-88,-89,-91,-117,-118,-123,-95,-92,-93,-94,-98,-96,-97,-99,-119,-120,-124,-106,-104,-105,-107,-116,-112,-113,-114,-115,-102,-100,-101,-103,-121,-122,-125,-110,-108,-109,-111,-152,-154,-156,-158,-153,-155,-157,-159,-196,-197,-204,-205,-224,-225,-63,-33,-34,-35,-36,-55,-59,-56,-60,-57,-61,-58,-62,-72,-73,-220,-221,-222,-223,]),'LD':([0,2,3,5,6,93,96,98,224,277,278,],[8,8,-6,-13,8,-7,-10,-12,-11,-8,-9,]),'PROC':([0,2,3,5,6,93,96,98,224,277,278,],[9,9,-6,-13,9,-7,-10,-12,-11,-8,-9,]),'ENDP':([0,2,3,5,6,93,96,98,224,277,278,],[10,10,-6,-13,10,-7,-10,-12,-11,-8,-9,]),'LOCAL':([0,2,3,5,6,93,96,98,224,277,278,],[11,11,-6,-13,11,-7,-10,-12,-11,-8,-9,]),'DEFB':([0,2,3,5,6,93,96,98,224,277,278,],[12,12,-6,-13,12,-7,-10,-12,-11,-8,-9,]),'DEFS':([0,2,3,5,6,93,96,98,224,277,278,],[13,13,-6,-13,13,-7,-10,-12,-11,-8,-9,]),'DEFW':([0,2,3,5,6,93,96,98,224,277,278,],[14,14,-6,-13,14,-7,-10,-12,-11,-8,-9,]),'EX':([0,2,3,5,6,93,96,98,224,277,278,],[15,15,-6,-13,15,-7,-10,-12,-11,-8,-9,]),'ORG':([0,2,3,5,6,93,96,98,224,277,278,],[16,16,-6,-13,16,-7,-10,-12,-11,-8,-9,]),'NAMESPACE':([0,2,3,5,6,93,96,98,224,277,278,],[17,17,-6,-13,17,-7,-10,-12,-11,-8,-9,]),'ALIGN':([0,2,3,5,6,93,96,98,224,277,278,],[18,18,-6,-13,18,-7,-10,-12,-11,-8,-9,]),'INCBIN':([0,2,3,5,6,93,96,98,224,277,278,],[19,19,-6,-13,19,-7,-10,-12,-11,-8,-9,]),'INC':([0,2,3,5,6,93,96,98,224,277,278,],[20,20,-6,-13,20,-7,-10,-12,-11,-8,-9,]),'DEC':([0,2,3,5,6,93,96,98,224,277,278,],[21,21,-6,-13,21,-7,-10,-12,-11,-8,-9,]),'JP':([0,2,3,5,6,93,96,98,224,277,278,],[22,22,-6,-13,22,-7,-10,-12,-11,-8,-9,]),'SBC':([0,2,3,5,6,93,96,98,224,277,278,],[23,23,-6,-13,23,-7,-10,-12,-11,-8,-9,]),'ADD':([0,2,3,5,6,93,96,98,224,277,278,],[24,24,-6,-13,24,-7,-10,-12,-11,-8,-9,]),'ADC':([0,2,3,5,6,93,96,98,224,277,278,],[25,25,-6,-13,25,-7,-10,-12,-11,-8,-9,]),'PUSH':([0,2,3,5,6,93,96,98,224,277,278,],[27,27,-6,-13,27,-7,-10,-12,-11,-8,-9,]),'POP':([0,2,3,5,6,93,96,98,224,277,278,],[28,28,-6,-13,28,-7,-10,-12,-11,-8,-9,]),'CALL':([0,2,3,5,6,93,96,98,224,277,278,],[31,31,-6,-13,31,-7,-10,-12,-11,-8,-9,]),'RET':([0,2,3,5,6,93,96,98,224,277,278,],[32,32,-6,-13,32,-7,-10,-12,-11,-8,-9,]),'JR':([0,2,3,5,6,93,96,98,224,277,278,],[33,33,-6,-13,33,-7,-10,-12,-11,-8,-9,]),'DJNZ':([0,2,3,5,6,93,96,98,224,277,278,],[34,34,-6,-13,34,-7,-10,-12,-11,-8,-9,]),'RST':([0,2,3,5,6,93,96,98,224,277,278,],[35,35,-6,-13,35,-7,-10,-12,-11,-8,-9,]),'IM':([0,2,3,5,6,93,96,98,224,277,278,],[36,36,-6,-13,36,-7,-10,-12,-11,-8,-9,]),'IN':([0,2,3,5,6,93,96,98,224,277,278,],[37,37,-6,-13,37,-7,-10,-12,-11,-8,-9,]),'OUT':([0,2,3,5,6,93,96,98,224,277,278,],[38,38,-6,-13,38,-7,-10,-12,-11,-8,-9,]),'NOP':([0,2,3,5,6,93,96,98,224,277,278,],[39,39,-6,-13,39,-7,-10,-12,-11,-8,-9,]),'EXX':([0,2,3,5,6,93,96,98,224,277,278,],[40,40,-6,-13,40,-7,-10,-12,-11,-8,-9,]),'CCF':([0,2,3,5,6,93,96,98,224,277,278,],[41,41,-6,-13,41,-7,-10,-12,-11,-8,-9,]),'SCF':([0,2,3,5,6,93,96,98,224,277,278,],[42,42,-6,-13,42,-7,-10,-12,-11,-8,-9,]),'LDIR':([0,2,3,5,6,93,96,98,224,277,278,],[43,43,-6,-13,43,-7,-10,-12,-11,-8,-9,]),'LDI':([0,2,3,5,6,93,96,98,224,277,278,],[44,44,-6,-13,44,-7,-10,-12,-11,-8,-9,]),'LDDR':([0,2,3,5,6,93,96,98,224,277,278,],[45,45,-6,-13,45,-7,-10,-12,-11,-8,-9,]),'LDD':([0,2,3,5,6,93,96,98,224,277,278,],[46,46,-6,-13,46,-7,-10,-12,-11,-8,-9,]),'CPIR':([0,2,3,5,6,93,96,98,224,277,278,],[47,47,-6,-13,47,-7,-10,-12,-11,-8,-9,]),'CPI':([0,2,3,5,6,93,96,98,224,277,278,],[48,48,-6,-13,48,-7,-10,-12,-11,-8,-9,]),'CPDR':([0,2,3,5,6,93,96,98,224,277,278,],[49,49,-6,-13,49,-7,-10,-12,-11,-8,-9,]),'CPD':([0,2,3,5,6,93,96,98,224,277,278,],[50,50,-6,-13,50,-7,-10,-12,-11,-8,-9,]),'DAA':([0,2,3,5,6,93,96,98,224,277,278,],[51,51,-6,-13,51,-7,-10,-12,-11,-8,-9,]),'NEG':([0,2,3,5,6,93,96,98,224,277,278,],[52,52,-6,-13,52,-7,-10,-12,-11,-8,-9,]),'CPL':([0,2,3,5,6,93,96,98,224,277,278,],[53,53,-6,-13,53,-7,-10,-12,-11,-8,-9,]),'HALT':([0,2,3,5,6,93,96,98,224,277,278,],[54,54,-6,-13,54,-7,-10,-12,-11,-8,-9,]),'EI':([0,2,3,5,6,93,96,98,224,277,278,],[55,55,-6,-13,55,-7,-10,-12,-11,-8,-9,]),'DI':([0,2,3,5,6,93,96,98,224,277,278,],[56,56,-6,-13,56,-7,-10,-12,-11,-8,-9,]),'OUTD':([0,2,3,5,6,93,96,98,224,277,278,],[57,57,-6,-13,57,-7,-10,-12,-11,-8,-9,]),'OUTI':([0,2,3,5,6,93,96,98,224,277,278,],[58,58,-6,-13,58,-7,-10,-12,-11,-8,-9,]),'OTDR':([0,2,3,5,6,93,96,98,224,277,278,],[59,59,-6,-13,59,-7,-10,-12,-11,-8,-9,]),'OTIR':([0,2,3,5,6,93,96,98,224,277,278,],[60,60,-6,-13,60,-7,-10,-12,-11,-8,-9,]),'IND':([0,2,3,5,6,93,96,98,224,277,278,],[61,61,-6,-13,61,-7,-10,-12,-11,-8,-9,]),'INI':([0,2,3,5,6,93,96,98,224,277,278,],[62,62,-6,-13,62,-7,-10,-12,-11,-8,-9,]),'INDR':([0,2,3,5,6,93,96,98,224,277,278,],[63,63,-6,-13,63,-7,-10,-12,-11,-8,-9,]),'INIR':([0,2,3,5,6,93,96,98,224,277,278,],[64,64,-6,-13,64,-7,-10,-12,-11,-8,-9,]),'RETI':([0,2,3,5,6,93,96,98,224,277,278,],[65,65,-6,-13,65,-7,-10,-12,-11,-8,-9,]),'RETN':([0,2,3,5,6,93,96,98,224,277,278,],[66,66,-6,-13,66,-7,-10,-12,-11,-8,-9,]),'RLA':([0,2,3,5,6,93,96,98,224,277,278,],[67,67,-6,-13,67,-7,-10,-12,-11,-8,-9,]),'RLCA':([0,2,3,5,6,93,96,98,224,277,278,],[68,68,-6,-13,68,-7,-10,-12,-11,-8,-9,]),'RRA':([0,2,3,5,6,93,96,98,224,277,278,],[69,69,-6,-13,69,-7,-10,-12,-11,-8,-9,]),'RRCA':([0,2,3,5,6,93,96,98,224,277,278,],[70,70,-6,-13,70,-7,-10,-12,-11,-8,-9,]),'RLD':([0,2,3,5,6,93,96,98,224,277,278,],[71,71,-6,-13,71,-7,-10,-12,-11,-8,-9,]),'RRD':([0,2,3,5,6,93,96,98,224,277,278,],[72,72,-6,-13,72,-7,-10,-12,-11,-8,-9,]),'OR':([0,2,3,5,6,93,96,98,224,277,278,],[74,74,-6,-13,74,-7,-10,-12,-11,-8,-9,]),'AND':([0,2,3,5,6,93,96,98,224,277,278,],[75,75,-6,-13,75,-7,-10,-12,-11,-8,-9,]),'XOR':([0,2,3,5,6,93,96,98,224,277,278,],[76,76,-6,-13,76,-7,-10,-12,-11,-8,-9,]),'SUB':([0,2,3,5,6,93,96,98,224,277,278,],[77,77,-6,-13,77,-7,-10,-12,-11,-8,-9,]),'CP':([0,2,3,5,6,93,96,98,224,277,278,],[78,78,-6,-13,78,-7,-10,-12,-11,-8,-9,]),'RR':([0,2,3,5,6,93,96,98,224,277,278,],[79,79,-6,-13,79,-7,-10,-12,-11,-8,-9,]),'RL':([0,2,3,5,6,93,96,98,224,277,278,],[80,80,-6,-13,80,-7,-10,-12,-11,-8,-9,]),'RRC':([0,2,3,5,6,93,96,98,224,277,278,],[81,81,-6,-13,81,-7,-10,-12,-11,-8,-9,]),'RLC':([0,2,3,5,6,93,96,98,224,277,278,],[82,82,-6,-13,82,-7,-10,-12,-11,-8,-9,]),'SLA':([0,2,3,5,6,93,96,98,224,277,278,],[83,83,-6,-13,83,-7,-10,-12,-11,-8,-9,]),'SLL':([0,2,3,5,6,93,96,98,224,277,278,],[84,84,-6,-13,84,-7,-10,-12,-11,-8,-9,]),'SRA':([0,2,3,5,6,93,96,98,224,277,278,],[85,85,-6,-13,85,-7,-10,-12,-11,-8,-9,]),'SRL':([0,2,3,5,6,93,96,98,224,277,278,],[86,86,-6,-13,86,-7,-10,-12,-11,-8,-9,]),'BIT':([0,2,3,5,6,93,96,98,224,277,278,],[87,87,-6,-13,87,-7,-10,-12,-11,-8,-9,]),'RES':([0,2,3,5,6,93,96,98,224,277,278,],[88,88,-6,-13,88,-7,-10,-12,-11,-8,-9,]),'SET':([0,2,3,5,6,93,96,98,224,277,278,],[89,89,-6,-13,89,-7,-10,-12,-11,-8,-9,]),'_LINE':([0,2,3,5,6,93,96,98,224,277,278,],[90,90,-6,-13,90,-7,-10,-12,-11,-8,-9,]),'_INIT':([0,2,3,5,6,93,96,98,224,277,278,],[91,91,-6,-13,91,-7,-10,-12,-11,-8,-9,]),'$end':([1,2,3,5,92,93,96,98,219,224,275,276,277,278,],[0,-1,-6,-13,-2,-7,-10,-12,-3,-11,-4,-5,-8,-9,]),'END':([2,3,5,93,96,98,224,277,278,],[94,-6,-13,-7,-10,-12,-11,-8,-9,]),'EQU':([4,],[95,]),'SP':([8,20,21,142,239,260,262,263,265,],[101,152,152,256,322,358,371,376,387,]),'A':([8,20,21,23,24,25,26,29,37,74,75,76,77,78,79,80,81,82,83,84,85,86,225,226,228,229,230,231,238,239,259,261,264,266,267,273,407,408,421,],[104,156,156,175,177,180,184,196,213,-133,-134,-135,-136,-137,-163,-164,-165,-166,-167,-168,-169,-170,281,287,293,303,304,306,318,320,349,361,377,388,392,404,424,425,438,]),'I':([8,228,],[105,296,]),'R':([8,228,],[106,297,]),'LP':([8,12,13,14,15,16,18,20,21,22,26,29,30,31,33,34,35,36,38,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,94,95,109,133,137,162,189,215,225,226,227,228,231,238,240,242,243,244,245,246,247,248,249,250,251,252,258,259,261,264,266,267,268,269,270,271,299,312,313,315,316,356,400,],[109,137,137,137,142,137,137,158,158,162,189,198,137,137,137,137,137,137,215,-133,-134,-135,-136,-137,-163,-164,-165,-166,-167,-168,-169,-170,-160,-161,-162,137,137,137,137,137,137,137,137,189,137,137,299,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,356,356,356,198,198,137,137,400,402,137,137,137,137,137,137,137,]),'H':([8,20,21,26,29,37,74,75,76,77,78,79,80,81,82,83,84,85,86,225,226,228,238,259,261,264,266,267,421,],[115,115,115,115,115,115,-133,-134,-135,-136,-137,-163,-164,-165,-166,-167,-168,-169,-170,115,115,115,115,115,115,115,115,115,115,]),'L':([8,20,21,26,29,37,74,75,76,77,78,79,80,81,82,83,84,85,86,225,226,228,238,259,261,264,266,267,421,],[116,116,116,116,116,116,-133,-134,-135,-136,-137,-163,-164,-165,-166,-167,-168,-169,-170,116,116,116,116,116,116,116,116,116,116,]),'IXH':([8,20,21,26,74,75,76,77,78,225,228,231,259,261,264,],[117,117,117,117,-133,-134,-135,-136,-137,117,117,117,117,117,117,]),'IXL':([8,20,21,26,74,75,76,77,78,225,228,231,259,261,264,],[118,118,118,118,-133,-134,-135,-136,-137,118,118,118,118,118,118,]),'IYH':([8,20,21,26,74,75,76,77,78,225,228,231,259,261,264,],[119,119,119,119,-133,-134,-135,-136,-137,119,119,119,119,119,119,]),'IYL':([8,20,21,26,74,75,76,77,78,225,228,231,259,261,264,],[120,120,120,120,-133,-134,-135,-136,-137,120,120,120,120,120,120,]),'BC':([8,20,21,27,28,109,239,260,262,263,265,299,],[110,110,110,110,110,232,110,359,369,373,385,405,]),'DE':([8,15,20,21,27,28,109,239,260,262,263,265,299,],[111,141,111,111,111,111,233,111,360,370,374,386,406,]),'HL':([8,20,21,23,24,25,27,28,109,158,162,189,198,227,239,255,260,262,263,265,299,356,418,],[102,102,102,176,178,181,102,102,234,234,234,234,234,289,102,344,357,368,375,384,234,234,435,]),'B':([8,20,21,26,29,37,74,75,76,77,78,79,80,81,82,83,84,85,86,225,226,228,231,238,259,261,264,266,267,421,],[123,123,123,123,123,123,-133,-134,-135,-136,-137,-163,-164,-165,-166,-167,-168,-169,-170,123,123,123,123,123,123,123,123,123,123,123,]),'C':([8,20,21,22,26,29,31,32,33,37,74,75,76,77,78,79,80,81,82,83,84,85,86,215,225,226,228,231,238,259,261,264,266,267,400,402,421,],[124,124,124,172,124,124,172,172,172,124,-133,-134,-135,-136,-137,-163,-164,-165,-166,-167,-168,-169,-170,272,124,124,124,124,124,124,124,124,124,124,419,420,124,]),'D':([8,20,21,26,29,37,74,75,76,77,78,79,80,81,82,83,84,85,86,225,226,228,231,238,259,261,264,266,267,421,],[125,125,125,125,125,125,-133,-134,-135,-136,-137,-163,-164,-165,-166,-167,-168,-169,-170,125,125,125,125,125,125,125,125,125,125,125,]),'E':([8,20,21,26,29,37,74,75,76,77,78,79,80,81,82,83,84,85,86,225,226,228,231,238,259,261,264,266,267,421,],[126,126,126,126,126,126,-133,-134,-135,-136,-137,-163,-164,-165,-166,-167,-168,-169,-170,126,126,126,126,126,126,126,126,126,126,126,]),'IX':([8,20,21,24,27,28,109,158,162,189,198,227,239,263,299,356,418,],[121,121,121,121,121,121,235,235,121,235,235,121,121,121,235,235,121,]),'IY':([8,20,21,24,27,28,109,158,162,189,198,227,239,263,299,356,418,],[122,122,122,122,122,122,237,237,122,237,237,122,122,122,237,237,122,]),'STRING':([12,19,217,],[130,149,274,]),'MINUS':([12,13,14,16,18,22,26,30,31,33,34,35,36,74,75,76,77,78,87,88,89,94,95,109,131,132,133,134,135,136,137,143,144,147,148,162,164,165,187,188,189,199,200,202,203,206,207,208,209,210,211,212,215,220,221,222,223,225,226,227,228,231,235,236,237,238,240,242,243,244,245,246,247,248,249,250,251,252,253,258,259,261,264,268,269,284,285,288,291,292,299,301,302,308,312,313,314,315,316,319,323,324,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,347,348,353,354,356,365,366,381,382,396,397,398,399,400,409,410,411,412,413,414,415,416,],[133,133,133,133,133,133,133,133,133,133,133,133,133,-133,-134,-135,-136,-137,-160,-161,-162,133,133,133,244,249,133,-278,-279,-280,133,244,249,244,249,133,244,249,244,249,133,244,249,244,249,244,249,244,249,244,249,244,133,244,249,244,249,133,133,133,133,133,313,244,316,133,133,133,133,133,133,133,133,133,133,133,133,133,-277,133,133,133,133,133,133,244,249,244,244,249,133,244,249,244,133,133,-276,133,133,244,244,249,244,249,-261,-271,-262,-272,-263,-273,-264,-274,-265,-275,-266,-267,-268,-269,-270,244,249,244,249,133,244,249,244,249,244,249,244,249,133,244,249,244,249,244,249,244,249,]),'INTEGER':([12,13,14,16,18,22,26,30,31,33,34,35,36,74,75,76,77,78,87,88,89,90,94,95,109,133,137,162,189,215,225,226,227,228,231,238,240,242,243,244,245,246,247,248,249,250,251,252,258,259,261,264,268,269,299,312,313,315,316,356,400,],[134,134,134,134,134,134,134,134,134,134,134,134,134,-133,-134,-135,-136,-137,-160,-161,-162,217,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,]),'ADDR':([12,13,14,16,18,22,26,30,31,33,34,35,36,74,75,76,77,78,87,88,89,94,95,109,133,137,162,189,215,225,226,227,228,231,238,240,242,243,244,245,246,247,248,249,250,251,252,258,259,261,264,268,269,299,312,313,315,316,356,400,],[136,136,136,136,136,136,136,136,136,136,136,136,136,-133,-134,-135,-136,-137,-160,-161,-162,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,]),'AF':([15,27,28,254,],[140,190,192,343,]),'DEFAULT':([17,],[145,]),'P':([22,31,32,],[166,166,166,]),'M':([22,31,32,],[167,167,167,]),'PO':([22,31,32,],[168,168,168,]),'PE':([22,31,32,],[169,169,169,]),'Z':([22,31,32,33,],[171,171,171,171,]),'NZ':([22,31,32,33,],[173,173,173,173,]),'NC':([22,31,32,33,],[174,174,174,174,]),'COMMA':([99,100,101,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,132,134,135,136,138,139,140,141,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,199,200,201,205,213,214,216,253,309,310,311,314,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,345,403,426,427,428,429,430,431,432,433,],[225,226,227,-190,-191,228,229,230,231,-179,-188,-189,238,239,240,-177,-178,-184,-185,-186,-187,-192,-193,-180,-181,-182,-183,241,-40,242,-46,-47,-278,-279,-280,242,242,254,255,258,-199,-200,-201,-202,-203,-206,-207,-208,-209,259,260,261,262,263,264,265,266,267,268,269,270,271,273,-277,407,408,-54,-276,-41,-48,-49,-261,-271,-262,-272,-263,-273,-264,-274,-265,-275,-266,-267,-268,-269,-270,418,421,-55,-59,-56,-60,-57,-61,-58,-62,]),'RP':([121,122,134,135,136,232,233,234,236,253,256,257,272,314,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,405,406,409,410,411,412,413,414,415,416,419,420,],[-192,-193,-278,-279,-280,309,310,311,314,-277,345,346,403,-276,-261,-271,-262,-272,-263,-273,-264,-274,-265,-275,-266,-267,-268,-269,-270,422,423,426,427,428,429,430,431,432,433,436,437,]),'PLUS':([131,132,134,135,136,143,144,147,148,164,165,187,188,199,200,202,203,206,207,208,209,210,211,212,220,221,222,223,235,236,237,253,284,285,288,291,292,301,302,308,314,319,323,324,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,347,348,353,354,365,366,381,382,396,397,398,399,409,410,411,412,413,414,415,416,],[243,248,-278,-279,-280,243,248,243,248,243,248,243,248,243,248,243,248,243,248,243,248,243,248,243,243,248,243,248,312,243,315,-277,243,248,243,243,248,243,248,243,-276,243,243,248,243,248,-261,-271,-262,-272,-263,-273,-264,-274,-265,-275,-266,-267,-268,-269,-270,243,248,243,248,243,248,243,248,243,248,243,248,243,248,243,248,243,248,243,248,]),'MUL':([131,132,134,135,136,143,144,147,148,164,165,187,188,199,200,202,203,206,207,208,209,210,211,212,220,221,222,223,236,253,284,285,288,291,292,301,302,308,314,319,323,324,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,347,348,353,354,365,366,381,382,396,397,398,399,409,410,411,412,413,414,415,416,],[245,250,-278,-279,-280,245,250,245,250,245,250,245,250,245,250,245,250,245,250,245,250,245,250,245,245,250,245,250,245,-277,245,250,245,245,250,245,250,245,-276,245,245,250,245,250,245,250,245,250,-263,-273,-264,-274,-265,-275,245,245,-268,-269,-270,245,250,245,250,245,250,245,250,245,250,245,250,245,250,245,250,245,250,245,250,]),'DIV':([131,132,134,135,136,143,144,147,148,164,165,187,188,199,200,202,203,206,207,208,209,210,211,212,220,221,222,223,236,253,284,285,288,291,292,301,302,308,314,319,323,324,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,347,348,353,354,365,366,381,382,396,397,398,399,409,410,411,412,413,414,415,416,],[246,251,-278,-279,-280,246,251,246,251,246,251,246,251,246,251,246,251,246,251,246,251,246,251,246,246,251,246,251,246,-277,246,251,246,246,251,246,251,246,-276,246,246,251,246,251,246,251,246,251,-263,-273,-264,-274,-265,-275,246,246,-268,-269,-270,246,251,246,251,246,251,246,251,246,251,246,251,246,251,246,251,246,251,246,251,]),'POW':([131,132,134,135,136,143,144,147,148,164,165,187,188,199,200,202,203,206,207,208,209,210,211,212,220,221,222,223,236,253,284,285,288,291,292,301,302,308,314,319,323,324,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,347,348,353,354,365,366,381,382,396,397,398,399,409,410,411,412,413,414,415,416,],[247,252,-278,-279,-280,247,252,247,252,247,252,247,252,247,252,247,252,247,252,247,252,247,252,247,247,252,247,252,247,-277,247,252,247,247,252,247,252,247,-276,247,247,252,247,252,247,252,247,252,247,252,247,252,247,252,247,247,247,247,247,247,252,247,252,247,252,247,252,247,252,247,252,247,252,247,252,247,252,247,252,]),'APO':([343,],[417,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'program':([0,],[2,]),'line':([0,2,],[3,93,]),'asm':([0,2,6,],[7,7,97,]),'bitwiseop':([0,2,6,],[26,26,26,]),'rotation':([0,2,6,],[29,29,29,]),'bitop':([0,2,6,],[30,30,30,]),'preproc_line':([0,2,6,],[73,73,73,]),'endline':([2,],[92,]),'reg8':([8,20,21,26,29,37,225,226,228,238,259,261,264,266,267,421,],[99,153,153,182,194,214,279,286,294,317,350,362,378,389,393,439,]),'reg8_hl':([8,20,21,22,26,29,225,228,259,261,264,266,267,],[100,155,155,161,185,195,280,295,352,364,380,390,394,]),'reg16i':([8,20,21,24,27,28,162,227,239,263,418,],[103,103,103,179,103,103,257,290,103,372,434,]),'reg8i':([8,20,21,26,225,228,231,259,261,264,],[107,157,157,183,282,298,305,351,363,379,]),'regBCDE':([8,20,21,26,29,37,225,226,228,231,238,259,261,264,266,267,421,],[108,108,108,108,108,108,108,108,108,307,108,108,108,108,108,108,108,]),'reg8_I':([8,20,21,26,29,225,228,259,261,264,266,267,],[112,151,160,186,197,283,300,355,367,383,391,395,]),'pexpr':([8,12,13,14,16,18,22,26,30,31,33,34,35,36,38,94,95,109,133,137,162,189,215,225,226,227,228,231,238,240,242,243,244,245,246,247,248,249,250,251,252,258,259,261,264,268,269,270,299,312,313,315,316,356,400,],[113,132,132,132,144,148,165,188,200,203,207,209,211,211,216,221,223,211,211,211,211,211,211,285,211,292,302,211,211,324,327,329,331,333,335,337,211,211,211,211,211,348,354,366,382,397,399,401,211,410,412,414,416,211,211,]),'reg16':([8,20,21,27,28,239,],[114,154,154,191,193,321,]),'id_list':([11,],[127,]),'number_list':([12,13,14,],[129,138,139,]),'expr':([12,13,14,16,18,22,26,30,31,33,34,35,36,94,95,109,133,137,162,189,215,225,226,227,228,231,238,240,242,243,244,245,246,247,248,249,250,251,252,258,259,261,264,268,269,299,312,313,315,316,356,400,],[131,131,131,143,147,164,187,199,202,206,208,210,212,220,222,236,253,236,236,236,236,284,288,291,301,308,319,323,326,328,330,332,334,336,338,339,340,341,342,347,353,365,381,396,398,236,409,411,413,415,236,236,]),'inc_reg':([20,21,],[150,159,]),'jp_flags':([22,31,32,],[163,201,204,]),'jr_flags':([22,31,32,33,],[170,170,170,205,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> program','start',1,'p_start','asmparse.py',519),
  ('start -> program endline','start',2,'p_start','asmparse.py',520),
  ('endline -> END NEWLINE','endline',2,'p_program_endline','asmparse.py',525),
  ('endline -> END expr NEWLINE','endline',3,'p_program_endline2','asmparse.py',530),
  ('endline -> END pexpr NEWLINE','endline',3,'p_program_endline2','asmparse.py',531),
  ('program -> line','program',1,'p_program','asmparse.py',538),
  ('program -> program line','program',2,'p_program_line','asmparse.py',546),
  ('line -> ID EQU expr NEWLINE','line',4,'p_def_label','asmparse.py',554),
  ('line -> ID EQU pexpr NEWLINE','line',4,'p_def_label','asmparse.py',555),
  ('line -> LABEL NEWLINE','line',2,'p_line_label','asmparse.py',564),
  ('line -> LABEL asm NEWLINE','line',3,'p_line_label_asm','asmparse.py',573),
  ('line -> asm NEWLINE','line',2,'p_line_asm','asmparse.py',582),
  ('line -> NEWLINE','line',1,'p_line_newline','asmparse.py',588),
  ('asm -> LD reg8 COMMA reg8_hl','asm',4,'p_asm_ld8','asmparse.py',594),
  ('asm -> LD reg8_hl COMMA reg8','asm',4,'p_asm_ld8','asmparse.py',595),
  ('asm -> LD reg8 COMMA reg8','asm',4,'p_asm_ld8','asmparse.py',596),
  ('asm -> LD SP COMMA HL','asm',4,'p_asm_ld8','asmparse.py',597),
  ('asm -> LD SP COMMA reg16i','asm',4,'p_asm_ld8','asmparse.py',598),
  ('asm -> LD A COMMA reg8','asm',4,'p_asm_ld8','asmparse.py',599),
  ('asm -> LD reg8 COMMA A','asm',4,'p_asm_ld8','asmparse.py',600),
  ('asm -> LD reg8_hl COMMA A','asm',4,'p_asm_ld8','asmparse.py',601),
  ('asm -> LD A COMMA reg8_hl','asm',4,'p_asm_ld8','asmparse.py',602),
  ('asm -> LD A COMMA A','asm',4,'p_asm_ld8','asmparse.py',603),
  ('asm -> LD A COMMA I','asm',4,'p_asm_ld8','asmparse.py',604),
  ('asm -> LD I COMMA A','asm',4,'p_asm_ld8','asmparse.py',605),
  ('asm -> LD A COMMA R','asm',4,'p_asm_ld8','asmparse.py',606),
  ('asm -> LD R COMMA A','asm',4,'p_asm_ld8','asmparse.py',607),
  ('asm -> LD A COMMA reg8i','asm',4,'p_asm_ld8','asmparse.py',608),
  ('asm -> LD reg8i COMMA A','asm',4,'p_asm_ld8','asmparse.py',609),
  ('asm -> LD reg8 COMMA reg8i','asm',4,'p_asm_ld8','asmparse.py',610),
  ('asm -> LD reg8i COMMA regBCDE','asm',4,'p_asm_ld8','asmparse.py',611),
  ('asm -> LD reg8i COMMA reg8i','asm',4,'p_asm_ld8','asmparse.py',612),
  ('asm -> LD A COMMA LP BC RP','asm',6,'p_LDa','asmparse.py',622),
  ('asm -> LD A COMMA LP DE RP','asm',6,'p_LDa','asmparse.py',623),
  ('asm -> LD LP BC RP COMMA A','asm',6,'p_LDa','asmparse.py',624),
  ('asm -> LD LP DE RP COMMA A','asm',6,'p_LDa','asmparse.py',625),
  ('asm -> PROC','asm',1,'p_PROC','asmparse.py',631),
  ('asm -> ENDP','asm',1,'p_ENDP','asmparse.py',638),
  ('asm -> LOCAL id_list','asm',2,'p_LOCAL','asmparse.py',645),
  ('id_list -> ID','id_list',1,'p_idlist','asmparse.py',655),
  ('id_list -> id_list COMMA ID','id_list',3,'p_idlist_id','asmparse.py',661),
  ('asm -> DEFB number_list','asm',2,'p_DEFB','asmparse.py',667),
  ('asm -> DEFB STRING','asm',2,'p_DEFB','asmparse.py',668),
  ('asm -> DEFS number_list','asm',2,'p_DEFS','asmparse.py',674),
  ('asm -> DEFW number_list','asm',2,'p_DEFW','asmparse.py',687),
  ('number_list -> expr','number_list',1,'p_number_list','asmparse.py',693),
  ('number_list -> pexpr','number_list',1,'p_number_list','asmparse.py',694),
  ('number_list -> number_list COMMA expr','number_list',3,'p_number_list_number','asmparse.py',700),
  ('number_list -> number_list COMMA pexpr','number_list',3,'p_number_list_number','asmparse.py',701),
  ('asm -> LD reg8_I COMMA reg8','asm',4,'p_asm_ldind_r8','asmparse.py',707),
  ('asm -> LD reg8_I COMMA A','asm',4,'p_asm_ldind_r8','asmparse.py',708),
  ('asm -> LD reg8 COMMA reg8_I','asm',4,'p_asm_ldr8_ind','asmparse.py',714),
  ('asm -> LD A COMMA reg8_I','asm',4,'p_asm_ldr8_ind','asmparse.py',715),
  ('reg8_hl -> LP HL RP','reg8_hl',3,'p_reg8_hl','asmparse.py',721),
  ('reg8_I -> LP IX PLUS expr RP','reg8_I',5,'p_ind8_I','asmparse.py',727),
  ('reg8_I -> LP IX MINUS expr RP','reg8_I',5,'p_ind8_I','asmparse.py',728),
  ('reg8_I -> LP IY PLUS expr RP','reg8_I',5,'p_ind8_I','asmparse.py',729),
  ('reg8_I -> LP IY MINUS expr RP','reg8_I',5,'p_ind8_I','asmparse.py',730),
  ('reg8_I -> LP IX PLUS pexpr RP','reg8_I',5,'p_ind8_I','asmparse.py',731),
  ('reg8_I -> LP IX MINUS pexpr RP','reg8_I',5,'p_ind8_I','asmparse.py',732),
  ('reg8_I -> LP IY PLUS pexpr RP','reg8_I',5,'p_ind8_I','asmparse.py',733),
  ('reg8_I -> LP IY MINUS pexpr RP','reg8_I',5,'p_ind8_I','asmparse.py',734),
  ('asm -> EX AF COMMA AF APO','asm',5,'p_ex_af_af','asmparse.py',744),
  ('asm -> EX DE COMMA HL','asm',4,'p_ex_de_hl','asmparse.py',750),
  ('asm -> ORG expr','asm',2,'p_org','asmparse.py',756),
  ('asm -> ORG pexpr','asm',2,'p_org','asmparse.py',757),
  ('asm -> NAMESPACE DEFAULT','asm',2,'p_namespace','asmparse.py',763),
  ('asm -> NAMESPACE ID','asm',2,'p_namespace','asmparse.py',764),
  ('asm -> ALIGN expr','asm',2,'p_align','asmparse.py',777),
  ('asm -> ALIGN pexpr','asm',2,'p_align','asmparse.py',778),
  ('asm -> INCBIN STRING','asm',2,'p_incbin','asmparse.py',788),
  ('asm -> EX LP SP RP COMMA reg16i','asm',6,'p_ex_sp_reg8','asmparse.py',799),
  ('asm -> EX LP SP RP COMMA HL','asm',6,'p_ex_sp_reg8','asmparse.py',800),
  ('asm -> INC inc_reg','asm',2,'p_incdec','asmparse.py',806),
  ('asm -> DEC inc_reg','asm',2,'p_incdec','asmparse.py',807),
  ('asm -> INC reg8_I','asm',2,'p_incdeci','asmparse.py',813),
  ('asm -> DEC reg8_I','asm',2,'p_incdeci','asmparse.py',814),
  ('asm -> LD reg8 COMMA expr','asm',4,'p_LD_reg_val','asmparse.py',820),
  ('asm -> LD reg8 COMMA pexpr','asm',4,'p_LD_reg_val','asmparse.py',821),
  ('asm -> LD reg16 COMMA expr','asm',4,'p_LD_reg_val','asmparse.py',822),
  ('asm -> LD reg8_hl COMMA expr','asm',4,'p_LD_reg_val','asmparse.py',823),
  ('asm -> LD A COMMA expr','asm',4,'p_LD_reg_val','asmparse.py',824),
  ('asm -> LD SP COMMA expr','asm',4,'p_LD_reg_val','asmparse.py',825),
  ('asm -> LD reg8i COMMA expr','asm',4,'p_LD_reg_val','asmparse.py',826),
  ('asm -> LD reg8_I COMMA expr','asm',4,'p_LD_regI_val','asmparse.py',836),
  ('asm -> JP reg8_hl','asm',2,'p_JP_hl','asmparse.py',842),
  ('asm -> JP LP reg16i RP','asm',4,'p_JP_hl','asmparse.py',843),
  ('asm -> SBC A COMMA reg8','asm',4,'p_SBCADD','asmparse.py',855),
  ('asm -> SBC A COMMA reg8i','asm',4,'p_SBCADD','asmparse.py',856),
  ('asm -> SBC A COMMA A','asm',4,'p_SBCADD','asmparse.py',857),
  ('asm -> SBC A COMMA reg8_hl','asm',4,'p_SBCADD','asmparse.py',858),
  ('asm -> SBC HL COMMA SP','asm',4,'p_SBCADD','asmparse.py',859),
  ('asm -> SBC HL COMMA BC','asm',4,'p_SBCADD','asmparse.py',860),
  ('asm -> SBC HL COMMA DE','asm',4,'p_SBCADD','asmparse.py',861),
  ('asm -> SBC HL COMMA HL','asm',4,'p_SBCADD','asmparse.py',862),
  ('asm -> ADD A COMMA reg8','asm',4,'p_SBCADD','asmparse.py',863),
  ('asm -> ADD A COMMA reg8i','asm',4,'p_SBCADD','asmparse.py',864),
  ('asm -> ADD A COMMA A','asm',4,'p_SBCADD','asmparse.py',865),
  ('asm -> ADD A COMMA reg8_hl','asm',4,'p_SBCADD','asmparse.py',866),
  ('asm -> ADC A COMMA reg8','asm',4,'p_SBCADD','asmparse.py',867),
  ('asm -> ADC A COMMA reg8i','asm',4,'p_SBCADD','asmparse.py',868),
  ('asm -> ADC A COMMA A','asm',4,'p_SBCADD','asmparse.py',869),
  ('asm -> ADC A COMMA reg8_hl','asm',4,'p_SBCADD','asmparse.py',870),
  ('asm -> ADD HL COMMA BC','asm',4,'p_SBCADD','asmparse.py',871),
  ('asm -> ADD HL COMMA DE','asm',4,'p_SBCADD','asmparse.py',872),
  ('asm -> ADD HL COMMA HL','asm',4,'p_SBCADD','asmparse.py',873),
  ('asm -> ADD HL COMMA SP','asm',4,'p_SBCADD','asmparse.py',874),
  ('asm -> ADC HL COMMA BC','asm',4,'p_SBCADD','asmparse.py',875),
  ('asm -> ADC HL COMMA DE','asm',4,'p_SBCADD','asmparse.py',876),
  ('asm -> ADC HL COMMA HL','asm',4,'p_SBCADD','asmparse.py',877),
  ('asm -> ADC HL COMMA SP','asm',4,'p_SBCADD','asmparse.py',878),
  ('asm -> ADD reg16i COMMA BC','asm',4,'p_SBCADD','asmparse.py',879),
  ('asm -> ADD reg16i COMMA DE','asm',4,'p_SBCADD','asmparse.py',880),
  ('asm -> ADD reg16i COMMA HL','asm',4,'p_SBCADD','asmparse.py',881),
  ('asm -> ADD reg16i COMMA SP','asm',4,'p_SBCADD','asmparse.py',882),
  ('asm -> ADD reg16i COMMA reg16i','asm',4,'p_SBCADD','asmparse.py',883),
  ('asm -> SBC A COMMA expr','asm',4,'p_arith_A_expr','asmparse.py',889),
  ('asm -> SBC A COMMA pexpr','asm',4,'p_arith_A_expr','asmparse.py',890),
  ('asm -> ADD A COMMA expr','asm',4,'p_arith_A_expr','asmparse.py',891),
  ('asm -> ADD A COMMA pexpr','asm',4,'p_arith_A_expr','asmparse.py',892),
  ('asm -> ADC A COMMA expr','asm',4,'p_arith_A_expr','asmparse.py',893),
  ('asm -> ADC A COMMA pexpr','asm',4,'p_arith_A_expr','asmparse.py',894),
  ('asm -> SBC A COMMA reg8_I','asm',4,'p_arith_A_regI','asmparse.py',900),
  ('asm -> ADD A COMMA reg8_I','asm',4,'p_arith_A_regI','asmparse.py',901),
  ('asm -> ADC A COMMA reg8_I','asm',4,'p_arith_A_regI','asmparse.py',902),
  ('asm -> bitwiseop reg8','asm',2,'p_bitwiseop_reg','asmparse.py',908),
  ('asm -> bitwiseop reg8i','asm',2,'p_bitwiseop_reg','asmparse.py',909),
  ('asm -> bitwiseop A','asm',2,'p_bitwiseop_reg','asmparse.py',910),
  ('asm -> bitwiseop reg8_hl','asm',2,'p_bitwiseop_reg','asmparse.py',911),
  ('asm -> bitwiseop reg8_I','asm',2,'p_bitwiseop_regI','asmparse.py',917),
  ('asm -> bitwiseop expr','asm',2,'p_bitwise_expr','asmparse.py',923),
  ('asm -> bitwiseop pexpr','asm',2,'p_bitwise_expr','asmparse.py',924),
  ('bitwiseop -> OR','bitwiseop',1,'p_bitwise','asmparse.py',930),
  ('bitwiseop -> AND','bitwiseop',1,'p_bitwise','asmparse.py',931),
  ('bitwiseop -> XOR','bitwiseop',1,'p_bitwise','asmparse.py',932),
  ('bitwiseop -> SUB','bitwiseop',1,'p_bitwise','asmparse.py',933),
  ('bitwiseop -> CP','bitwiseop',1,'p_bitwise','asmparse.py',934),
  ('asm -> PUSH AF','asm',2,'p_PUSH_POP','asmparse.py',940),
  ('asm -> PUSH reg16','asm',2,'p_PUSH_POP','asmparse.py',941),
  ('asm -> POP AF','asm',2,'p_PUSH_POP','asmparse.py',942),
  ('asm -> POP reg16','asm',2,'p_PUSH_POP','asmparse.py',943),
  ('asm -> LD pexpr COMMA A','asm',4,'p_LD_addr_reg','asmparse.py',949),
  ('asm -> LD pexpr COMMA reg16','asm',4,'p_LD_addr_reg','asmparse.py',950),
  ('asm -> LD pexpr COMMA SP','asm',4,'p_LD_addr_reg','asmparse.py',951),
  ('asm -> LD A COMMA pexpr','asm',4,'p_LD_reg_addr','asmparse.py',957),
  ('asm -> LD reg16 COMMA pexpr','asm',4,'p_LD_reg_addr','asmparse.py',958),
  ('asm -> LD SP COMMA pexpr','asm',4,'p_LD_reg_addr','asmparse.py',959),
  ('asm -> rotation reg8','asm',2,'p_ROTATE','asmparse.py',965),
  ('asm -> rotation reg8_hl','asm',2,'p_ROTATE','asmparse.py',966),
  ('asm -> rotation A','asm',2,'p_ROTATE','asmparse.py',967),
  ('asm -> rotation reg8_I','asm',2,'p_ROTATE_ix','asmparse.py',973),
  ('asm -> bitop expr COMMA A','asm',4,'p_BIT','asmparse.py',979),
  ('asm -> bitop pexpr COMMA A','asm',4,'p_BIT','asmparse.py',980),
  ('asm -> bitop expr COMMA reg8','asm',4,'p_BIT','asmparse.py',981),
  ('asm -> bitop pexpr COMMA reg8','asm',4,'p_BIT','asmparse.py',982),
  ('asm -> bitop expr COMMA reg8_hl','asm',4,'p_BIT','asmparse.py',983),
  ('asm -> bitop pexpr COMMA reg8_hl','asm',4,'p_BIT','asmparse.py',984),
  ('asm -> bitop expr COMMA reg8_I','asm',4,'p_BIT_ix','asmparse.py',994),
  ('asm -> bitop pexpr COMMA reg8_I','asm',4,'p_BIT_ix','asmparse.py',995),
  ('bitop -> BIT','bitop',1,'p_bitop','asmparse.py',1005),
  ('bitop -> RES','bitop',1,'p_bitop','asmparse.py',1006),
  ('bitop -> SET','bitop',1,'p_bitop','asmparse.py',1007),
  ('rotation -> RR','rotation',1,'p_rotation','asmparse.py',1013),
  ('rotation -> RL','rotation',1,'p_rotation','asmparse.py',1014),
  ('rotation -> RRC','rotation',1,'p_rotation','asmparse.py',1015),
  ('rotation -> RLC','rotation',1,'p_rotation','asmparse.py',1016),
  ('rotation -> SLA','rotation',1,'p_rotation','asmparse.py',1017),
  ('rotation -> SLL','rotation',1,'p_rotation','asmparse.py',1018),
  ('rotation -> SRA','rotation',1,'p_rotation','asmparse.py',1019),
  ('rotation -> SRL','rotation',1,'p_rotation','asmparse.py',1020),
  ('inc_reg -> SP','inc_reg',1,'p_reg_inc','asmparse.py',1026),
  ('inc_reg -> reg8','inc_reg',1,'p_reg_inc','asmparse.py',1027),
  ('inc_reg -> reg16','inc_reg',1,'p_reg_inc','asmparse.py',1028),
  ('inc_reg -> reg8_hl','inc_reg',1,'p_reg_inc','asmparse.py',1029),
  ('inc_reg -> A','inc_reg',1,'p_reg_inc','asmparse.py',1030),
  ('inc_reg -> reg8i','inc_reg',1,'p_reg_inc','asmparse.py',1031),
  ('reg8 -> H','reg8',1,'p_reg8','asmparse.py',1037),
  ('reg8 -> L','reg8',1,'p_reg8','asmparse.py',1038),
  ('reg8 -> regBCDE','reg8',1,'p_reg8','asmparse.py',1039),
  ('regBCDE -> B','regBCDE',1,'p_regBCDE','asmparse.py',1045),
  ('regBCDE -> C','regBCDE',1,'p_regBCDE','asmparse.py',1046),
  ('regBCDE -> D','regBCDE',1,'p_regBCDE','asmparse.py',1047),
  ('regBCDE -> E','regBCDE',1,'p_regBCDE','asmparse.py',1048),
  ('reg8i -> IXH','reg8i',1,'p_reg8i','asmparse.py',1054),
  ('reg8i -> IXL','reg8i',1,'p_reg8i','asmparse.py',1055),
  ('reg8i -> IYH','reg8i',1,'p_reg8i','asmparse.py',1056),
  ('reg8i -> IYL','reg8i',1,'p_reg8i','asmparse.py',1057),
  ('reg16 -> BC','reg16',1,'p_reg16','asmparse.py',1063),
  ('reg16 -> DE','reg16',1,'p_reg16','asmparse.py',1064),
  ('reg16 -> HL','reg16',1,'p_reg16','asmparse.py',1065),
  ('reg16 -> reg16i','reg16',1,'p_reg16','asmparse.py',1066),
  ('reg16i -> IX','reg16i',1,'p_reg16i','asmparse.py',1072),
  ('reg16i -> IY','reg16i',1,'p_reg16i','asmparse.py',1073),
  ('asm -> JP jp_flags COMMA expr','asm',4,'p_jp','asmparse.py',1079),
  ('asm -> JP jp_flags COMMA pexpr','asm',4,'p_jp','asmparse.py',1080),
  ('asm -> CALL jp_flags COMMA expr','asm',4,'p_jp','asmparse.py',1081),
  ('asm -> CALL jp_flags COMMA pexpr','asm',4,'p_jp','asmparse.py',1082),
  ('asm -> RET jp_flags','asm',2,'p_ret','asmparse.py',1088),
  ('jp_flags -> P','jp_flags',1,'p_jpflags_other','asmparse.py',1094),
  ('jp_flags -> M','jp_flags',1,'p_jpflags_other','asmparse.py',1095),
  ('jp_flags -> PO','jp_flags',1,'p_jpflags_other','asmparse.py',1096),
  ('jp_flags -> PE','jp_flags',1,'p_jpflags_other','asmparse.py',1097),
  ('jp_flags -> jr_flags','jp_flags',1,'p_jpflags_other','asmparse.py',1098),
  ('asm -> JR jr_flags COMMA expr','asm',4,'p_jr','asmparse.py',1104),
  ('asm -> JR jr_flags COMMA pexpr','asm',4,'p_jr','asmparse.py',1105),
  ('jr_flags -> Z','jr_flags',1,'p_jr_flags','asmparse.py',1112),
  ('jr_flags -> C','jr_flags',1,'p_jr_flags','asmparse.py',1113),
  ('jr_flags -> NZ','jr_flags',1,'p_jr_flags','asmparse.py',1114),
  ('jr_flags -> NC','jr_flags',1,'p_jr_flags','asmparse.py',1115),
  ('asm -> JP expr','asm',2,'p_jrjp','asmparse.py',1121),
  ('asm -> JR expr','asm',2,'p_jrjp','asmparse.py',1122),
  ('asm -> CALL expr','asm',2,'p_jrjp','asmparse.py',1123),
  ('asm -> DJNZ expr','asm',2,'p_jrjp','asmparse.py',1124),
  ('asm -> JP pexpr','asm',2,'p_jrjp','asmparse.py',1125),
  ('asm -> JR pexpr','asm',2,'p_jrjp','asmparse.py',1126),
  ('asm -> CALL pexpr','asm',2,'p_jrjp','asmparse.py',1127),
  ('asm -> DJNZ pexpr','asm',2,'p_jrjp','asmparse.py',1128),
  ('asm -> RST expr','asm',2,'p_rst','asmparse.py',1140),
  ('asm -> IM expr','asm',2,'p_im','asmparse.py',1151),
  ('asm -> IN A COMMA LP C RP','asm',6,'p_in','asmparse.py',1161),
  ('asm -> IN reg8 COMMA LP C RP','asm',6,'p_in','asmparse.py',1162),
  ('asm -> OUT LP C RP COMMA A','asm',6,'p_out','asmparse.py',1168),
  ('asm -> OUT LP C RP COMMA reg8','asm',6,'p_out','asmparse.py',1169),
  ('asm -> IN A COMMA pexpr','asm',4,'p_in_expr','asmparse.py',1175),
  ('asm -> OUT pexpr COMMA A','asm',4,'p_out_expr','asmparse.py',1181),
  ('asm -> NOP','asm',1,'p_single','asmparse.py',1187),
  ('asm -> EXX','asm',1,'p_single','asmparse.py',1188),
  ('asm -> CCF','asm',1,'p_single','asmparse.py',1189),
  ('asm -> SCF','asm',1,'p_single','asmparse.py',1190),
  ('asm -> LDIR','asm',1,'p_single','asmparse.py',1191),
  ('asm -> LDI','asm',1,'p_single','asmparse.py',1192),
  ('asm -> LDDR','asm',1,'p_single','asmparse.py',1193),
  ('asm -> LDD','asm',1,'p_single','asmparse.py',1194),
  ('asm -> CPIR','asm',1,'p_single','asmparse.py',1195),
  ('asm -> CPI','asm',1,'p_single','asmparse.py',1196),
  ('asm -> CPDR','asm',1,'p_single','asmparse.py',1197),
  ('asm -> CPD','asm',1,'p_single','asmparse.py',1198),
  ('asm -> DAA','asm',1,'p_single','asmparse.py',1199),
  ('asm -> NEG','asm',1,'p_single','asmparse.py',1200),
  ('asm -> CPL','asm',1,'p_single','asmparse.py',1201),
  ('asm -> HALT','asm',1,'p_single','asmparse.py',1202),
  ('asm -> EI','asm',1,'p_single','asmparse.py',1203),
  ('asm -> DI','asm',1,'p_single','asmparse.py',1204),
  ('asm -> OUTD','asm',1,'p_single','asmparse.py',1205),
  ('asm -> OUTI','asm',1,'p_single','asmparse.py',1206),
  ('asm -> OTDR','asm',1,'p_single','asmparse.py',1207),
  ('asm -> OTIR','asm',1,'p_single','asmparse.py',1208),
  ('asm -> IND','asm',1,'p_single','asmparse.py',1209),
  ('asm -> INI','asm',1,'p_single','asmparse.py',1210),
  ('asm -> INDR','asm',1,'p_single','asmparse.py',1211),
  ('asm -> INIR','asm',1,'p_single','asmparse.py',1212),
  ('asm -> RET','asm',1,'p_single','asmparse.py',1213),
  ('asm -> RETI','asm',1,'p_single','asmparse.py',1214),
  ('asm -> RETN','asm',1,'p_single','asmparse.py',1215),
  ('asm -> RLA','asm',1,'p_single','asmparse.py',1216),
  ('asm -> RLCA','asm',1,'p_single','asmparse.py',1217),
  ('asm -> RRA','asm',1,'p_single','asmparse.py',1218),
  ('asm -> RRCA','asm',1,'p_single','asmparse.py',1219),
  ('asm -> RLD','asm',1,'p_single','asmparse.py',1220),
  ('asm -> RRD','asm',1,'p_single','asmparse.py',1221),
  ('expr -> expr PLUS expr','expr',3,'p_expr_div_expr','asmparse.py',1227),
  ('expr -> expr MINUS expr','expr',3,'p_expr_div_expr','asmparse.py',1228),
  ('expr -> expr MUL expr','expr',3,'p_expr_div_expr','asmparse.py',1229),
  ('expr -> expr DIV expr','expr',3,'p_expr_div_expr','asmparse.py',1230),
  ('expr -> expr POW expr','expr',3,'p_expr_div_expr','asmparse.py',1231),
  ('expr -> pexpr PLUS expr','expr',3,'p_expr_div_expr','asmparse.py',1232),
  ('expr -> pexpr MINUS expr','expr',3,'p_expr_div_expr','asmparse.py',1233),
  ('expr -> pexpr MUL expr','expr',3,'p_expr_div_expr','asmparse.py',1234),
  ('expr -> pexpr DIV expr','expr',3,'p_expr_div_expr','asmparse.py',1235),
  ('expr -> pexpr POW expr','expr',3,'p_expr_div_expr','asmparse.py',1236),
  ('expr -> expr PLUS pexpr','expr',3,'p_expr_div_expr','asmparse.py',1237),
  ('expr -> expr MINUS pexpr','expr',3,'p_expr_div_expr','asmparse.py',1238),
  ('expr -> expr MUL pexpr','expr',3,'p_expr_div_expr','asmparse.py',1239),
  ('expr -> expr DIV pexpr','expr',3,'p_expr_div_expr','asmparse.py',1240),
  ('expr -> expr POW pexpr','expr',3,'p_expr_div_expr','asmparse.py',1241),
  ('pexpr -> LP expr RP','pexpr',3,'p_expr_lprp','asmparse.py',1247),
  ('expr -> MINUS expr','expr',2,'p_expr_uminus','asmparse.py',1253),
  ('expr -> INTEGER','expr',1,'p_expr_int','asmparse.py',1259),
  ('expr -> ID','expr',1,'p_expr_label','asmparse.py',1265),
  ('expr -> ADDR','expr',1,'p_expr_addr','asmparse.py',1271),
  ('asm -> preproc_line','asm',1,'p_preprocessor_line','asmparse.py',1278),
  ('preproc_line -> _LINE INTEGER','preproc_line',2,'p_preprocessor_line_line','asmparse.py',1284),
  ('preproc_line -> _LINE INTEGER STRING','preproc_line',3,'p_preprocessor_line_line_file','asmparse.py',1290),
  ('preproc_line -> _INIT ID','preproc_line',2,'p_preproc_line_init','asmparse.py',1299),
]
