#
# SNMP forwarder: Agent part configuration
#
# This file is composed of a set of option/value pairs possibly
# enclosed into blocks. Blocks provide lexical scopes for options.
# Blocks names have no pre-defined meaning and serve as hints
# to human reader.
#
# For example:
#
# global-option: value
#
# outermost-block
# {
#     common-option: value
#
#     more-specific-block
#     {
#         more-specific-option: value
#
#         very-concrete-settings
#         {
#             concrete-option: value
#         }
#     }
# }
#
# Some options can appear inside a block while some can only be of global
# scope. Options specified inside a block apply to their current scopes as
# well as to all nested scopes unless the same option exists there.
#
# Options are distinguished from values by trailing colon (:). There may be
# several whitespace separated values assigned to option.
#
# The following options are recognized.
#
# Option                              Semantics
# ------                              ---------
# config-version                      configuration syntax version
# program-name                        program name to use this configuration
# snmp-credentials-id                 SNMP credentials ID
# snmp-engine-id                      SNMP engine ID
# snmp-transport-domain               identifies SNMP local network endpoint
# snmp-transport-options              transparent-proxy, virtual-interface
# snmp-bind-address                   listen for SNMP packets at this endpoint
# snmp-security-model                 SNMP security model (0, 1, 3)
# snmp-security-level                 SNMP security level (1, 2, 3)
# snmp-security-name                  SNMP security name
# snmp-community-name                 SNMPv1/v2c community name
# snmp-usm-user                       SNMPv3/USM username
# snmp-usm-auth-protocol              SNMPv3/USM authentication protocol
# snmp-usm-auth-key                   SNMPv3/USM authentication key
# snmp-usm-priv-protocol              SNMPv3/USM privacy protocol
# snmp-usm-priv-key                   SNMPv3/USM privacy key
# snmp-context-id                     SNMP Context ID
# snmp-context-engine-id-pattern      SNMP Context Engine ID
# snmp-context-name-pattern           SNMP Context Name
# snmp-content-id                     SNMP Content ID
# snmp-pdu-type-pattern               SNMP PDU type (SET/GET/GETNEXT/GETBULK)
# snmp-pdu-oid-prefix-pattern-list    list of OIDs regexps to match OIDs in 
#                                     SNMP PDU var-binds
# snmp-peer-id                        SNMP peer ID
# snmp-peer-address-pattern-list      true if SNMP Manager is sending packets
#                                     from a transport endpoint that matches
#                                     at least one of these regexps
# snmp-bind-address-pattern-list      true if SNMP Manager is sending packets
#                                     to a transport endpoint that matches
#                                     at least one of these regexps
# plugin-modules-path-list            plugin modules search path
# plugin-module                       plugin file name (without .py)
# plugin-options                      plugin module configuration options
# plugin-id                           plugin module ID
# trunk-id                            trunk ID
# trunk-bind-address                  trunk connection local endpoint
# trunk-peer-address                  trunk connection peer address
# trunk-connection-mode               trunking client or server
# trunk-crypto-key                    trunk data encryption key
# matching-snmp-context-id-list       true if incoming SNMP message is targeted
#                                     to this SNMP Context
# matching-snmp-content-id-list       true if incoming SNMP PDU is of specified 
#                                     type and carries specified OID(s) in 
#                                     arbitrary order
# matching-snmp-credentials-id-list   true if incoming SNMP message is using
#                                     credentials from this list
# matching-snmp-peer-id-list          true if incoming SNMP message is sent
#                                     by a SNMP Manager from this list
# using-plugin-id-list                Funnel SNMP message though each of listed
#                                     plugin modules
#                                     through trunk(s) in this list
# using-trunk-id-list                 Pass SNMP message to Forwarder Manager(s)
#                                     through trunk(s) in this list
#
# General configuration strategy is:
#
# 1) Configure SNMP credentials and SNMP Agent(s) listening for SNMP
#    Managers to communicate with. Each Agent is identified by
#    snmp-credentials-id.
# 2) Configure SNMP contexts. Each SNMP context is identified by 
#    snmp-context-id option.
# 3) Configure individual SNMP Managers or groups of Managers. Each Manager
#    or group is identified by the snmp-peer-id option.
# 4) Configure server<->client communication link(s) called "trunks". Both
#    Forwarder client and server could initiate and/or receive trunking
#    connections. Each trunk is identified by a trunk-id which is used
#    for message routing. Trunk initiator is responsible for trunk ID
#    definition.
# 5) Optionally configure plugins. These are small Python code snippets
#    capable to access/modify/block passing SNMP message. You should
#    configure each module you intend to use (giving search path, module
#    file name, options) and assign it an ID. Then you could list these
#    IDs in the routing section (see below).
# 6) Configure message routing in form of matching-snmp-credentials-id-list,
#    matching-snmp-peer-id-list and matching-snmp-context-id-list options
#    mapped to the contents of using-trunk-id-list. The latter identifies 
#    Manager part(s) of SNMP Forwarder to pass received SNMP message over.
#

config-version: 2
program-name: snmpfwd-server

credentials-group {
  snmp-engine-A {
    snmp-engine-id: 0x0102030405070809

    udp {
      snmp-transport-domain: 1.3.6.1.6.1.1.100
      snmp-bind-address: 127.0.0.1:1161

      snmp-security-level: 1

      v1 {
        snmp-community-name: public
        snmp-security-name: public
        snmp-security-model: 1
        snmp-credentials-id: config-1
      }

      v2c {
        snmp-community-name: abrakadabra
        snmp-security-name: abrakadabra
        snmp-security-model: 2
        snmp-credentials-id: config-2
      }

      v3 {
        snmp-security-model: 3

        my-user-1 {
	      snmp-security-level: 3
          snmp-security-name: test-user

          snmp-usm-user: test-user
          snmp-usm-auth-protocol: 1.3.6.1.6.3.10.1.1.2
          snmp-usm-auth-key: authkey1
          snmp-usm-priv-protocol: 1.3.6.1.6.3.10.1.2.2
          snmp-usm-priv-key: privkey1

          snmp-credentials-id: config-121
        }

        my-user-2 {
          snmp-security-level: 1
          snmp-security-name: testuser
          snmp-usm-user: testuser21
          snmp-credentials-id: config-15
        }
      }
    }
  }

  snmp-engine-B {
    snmp-engine-id: 0x010203040E0F0103

    v1 {
      snmp-community-name: public
      snmp-security-name: public
      snmp-security-model: 1
      snmp-security-level: 1

      udpv4-at-secondary-interface {
        snmp-transport-domain: 1.3.6.1.6.1.1.150
        snmp-bind-address: 0.0.0.0:1164

        # This option allows SNMP request-response communication at
        # a secondary IP interface. Also it senses actual destination
        # IP address used by the Manager regardless of the one we are 
        # bound to.
#        snmp-transport-options: virtual-interface

        # This option allows SNMP request-response communication at any
        # IP address, even if such IP interface does not exist at this 
        # system. Superuser required.
#        snmp-transport-options: transparent-proxy

        snmp-credentials-id: config-at-secondary-interface
      }
    }

    v3 {
      snmp-security-model: 3
      snmp-security-level: 3
      snmp-security-name: test-user

      snmp-usm-user: test-user
      snmp-usm-auth-protocol: 1.3.6.1.6.3.10.1.1.2
      snmp-usm-auth-key: authkey1
      snmp-usm-priv-protocol: 1.3.6.1.6.3.10.1.2.2
      snmp-usm-priv-key: privkey1

      udpv4 {
        snmp-transport-domain: 1.3.6.1.6.1.1.200
        snmp-bind-address: 127.0.0.1:1163
           
        snmp-credentials-id: config-3
      }
    }
  }
}

context-group {
  snmp-context-engine-id-pattern: .*
  snmp-context-name-pattern: .*

  snmp-context-id: any-context
}

content-group {
  snmp-pdu-type-pattern: .*
  snmp-pdu-oid-prefix-pattern-list: 1\.3\.6\..*

  # ordering of oid-prefix-pattern-list is important here

  write-pdu-group {
    snmp-pdu-type-pattern: SET
    snmp-content-id: set-content
  }

  if-subtree-group {
    snmp-pdu-oid-prefix-pattern-list: 1\.3\.6\.1\.2\.1\.2\..*
    snmp-content-id: if-subtree-content
  }
  
  others {
    snmp-content-id: any-content
  }
}

peers-group {
  snmp-transport-domain: 1.3.6.1.6.1.1.100
  snmp-bind-address-pattern-list: .*

  my-managers {
    snmp-peer-address-pattern-list: .*
    snmp-peer-id: 100

    manager-sending-to-a-secondary-interface {
      snmp-transport-domain: 1.3.6.1.6.1.1.150
      snmp-bind-address-pattern-list: 127\.0\.0\.[2-3]:[0-9]*
      snmp-peer-id: 101
    }
  }
}

plugin-group {
  plugin-1 {
    plugin-module: rewrite
    plugin-options: config=/etc/snmpfwd/plugins/rewrite.conf

# disabled
#    plugin-id: rewrite
  }

  plugin-2 {
    plugin-module: logger
    plugin-options: config=/etc/snmpfwd/plugins/logger.conf

# disabled
#    plugin-id: logger
  }
}

trunking-group {
  trunk-crypto-key: 1234567890

  clients {
    host-1 {
      trunk-bind-address: 127.0.0.1
      trunk-peer-address: 127.0.0.1:30301
      trunk-connection-mode: client
      trunk-id: servertrunk
    }
  }

  servers {
    interface-1 {
      trunk-connection-mode: server
      trunk-bind-address: 127.0.0.1:30201
      trunk-id: <discover>
    }
  }
}

routing-map {
  matching-snmp-context-id-list: any-context
  matching-snmp-content-id-list: any-content

  route-1 {
    matching-snmp-credentials-id-list: config-1 config-2 config-121
    matching-snmp-content-id-list: if-subtree-content
    matching-snmp-peer-id-list: 100 111
    using-trunk-id-list: clienttrunk
  }

  route-2 {
    matching-snmp-credentials-id-list: config-1 config-121
    matching-snmp-peer-id-list: 100
    using-trunk-id-list: servertrunk
  }
  
  route-3 {
    matching-snmp-credentials-id-list: config-2
    matching-snmp-content-id-list: set-content
    matching-snmp-peer-id-list: 111 100
    using-trunk-id-list: clienttrunk
  }

  route-4 {
    matching-snmp-credentials-id-list: config-at-secondary-interace
    matching-snmp-peer-id-list: 101
# plugins disabled
#    using-plugin-id-list: logger rewrite
    using-trunk-id-list: clienttrunk
  }
}
