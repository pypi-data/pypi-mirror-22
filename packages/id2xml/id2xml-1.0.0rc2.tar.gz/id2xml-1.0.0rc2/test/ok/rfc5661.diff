106c106,109
<    o  Improved access and good performance on the Internet
---
>    o  Improved access and good performance on the Internet The protocol
>       is designed to transit firewalls easily, perform well where
>       latency is high and bandwidth is low, and scale to very large
>       numbers of clients per server.
108,114c111,112
<       The protocol is designed to transit firewalls easily, perform well
<       where latency is high and bandwidth is low, and scale to very
<       large numbers of clients per server.
< 
<    o  Strong security with negotiation built into the protocol
< 
<       The protocol builds on the work of the ONCRPC working group in
---
>    o  Strong security with negotiation built into the protocol The
>       protocol builds on the work of the ONCRPC working group in
120,129c118,125
<    o  Good cross-platform interoperability
< 
<       The protocol features a file system model that provides a useful,
<       common set of features that does not unduly favor one file system
<       or operating system over another.
< 
<    o  Designed for protocol extensions
< 
<       The protocol is designed to accept standard extensions within a
<       framework that enables and encourages backward compatibility.
---
>    o  Good cross-platform interoperability The protocol features a file
>       system model that provides a useful, common set of features that
>       does not unduly favor one file system or operating system over
>       another.
> 
>    o  Designed for protocol extensions The protocol is designed to
>       accept standard extensions within a framework that enables and
>       encourages backward compatibility.
168,170c164,166
<       entity that maintains a set of locks on behalf of one or more
<       applications.  This client is responsible for crash or failure
<       recovery for those locks it manages.
---
>          entity that maintains a set of locks on behalf of one or more
>          applications.  This client is responsible for crash or failure
>          recovery for those locks it manages.
173,174c169,170
<       connection and multiple clients may exist on the same network
<       node.
---
>          connection and multiple clients may exist on the same network
>          node.
236c232
<       server include:
---
>          server include:
238,240c234,236
<       1.  Media commit of data; that is, the modified data has been
<           successfully written to the disk media, for example, the disk
<           platter.
---
>          1.  Media commit of data; that is, the modified data has been
>              successfully written to the disk media, for example, the
>              disk platter.
242,243c238,239
<       2.  An immediate reply disk drive with battery-backed, on-drive
<           intermediate storage or uninterruptible power system (UPS).
---
>          2.  An immediate reply disk drive with battery-backed, on-drive
>              intermediate storage or uninterruptible power system (UPS).
245,246c241,242
<       3.  Server commit of data with battery-backed intermediate storage
<           and recovery software.
---
>          3.  Server commit of data with battery-backed intermediate
>              storage and recovery software.
248,249c244,245
<       4.  Cache commit with uninterruptible power system (UPS) and
<           recovery software.
---
>          4.  Cache commit with uninterruptible power system (UPS) and
>              recovery software.
660,661c656,657
<         service@hostname
<    For NFS, the "service" element is
---
>       service@hostname
>       For NFS, the "service" element is
1275,1278c1271,1273
<    1.   Procedures are not added or deleted.
< 
<         To maintain the general RPC model, NFSv4 minor versions will not
<         add to or delete procedures from the NFS program.
---
>    1.   Procedures are not added or deleted.  To maintain the general
>         RPC model, NFSv4 minor versions will not add to or delete
>         procedures from the NFS program.
1284c1279
<         procedures does not affect the RPC model.
---
>            procedures does not affect the RPC model.
1286,1299c1281,1296
<         *  Minor versions may append attributes to the bitmap4 that
<            represents sets of attributes and to the fattr4 that
<            represents sets of attribute values.
< 
<            This allows for the expansion of the attribute model to allow
<            for future growth or adaptation.
< 
<         *  Minor version X must append any new attributes after the last
<            documented attribute.
< 
<            Since attribute results are specified as an opaque array of
<            per-attribute, XDR-encoded results, the complexity of adding
<            new attributes in the midst of the current definitions would
<            be too burdensome.
---
>            +  Minor versions may append attributes to the bitmap4 that
>               represents sets of attributes and to the fattr4 that
>               represents sets of attribute values.
> 
>               This allows for the expansion of the attribute model to
>               allow
>                  for future growth or adaptation.
> 
>            +  Minor version X must append any new attributes after the
>               last documented attribute.
> 
>               Since attribute results are specified as an opaque array
>               of
>                  per-attribute, XDR-encoded results, the complexity of
>                  adding new attributes in the midst of the current
>                  definitions would be too burdensome.
1305,1307c1302,1305
<         for a single operation is too burdensome.  New operations should
<         be added instead of modifying existing structures for a minor
<         version.
---
> 
>            for a single operation is too burdensome.  New operations
>            should be added instead of modifying existing structures for
>            a minor version.
1310d1307
<         version:
1312,1322c1309,1322
<         *  adding bits to flag fields, such as new attributes to
<            GETATTR's bitmap4 data type, and providing corresponding
<            variants of opaque arrays, such as a notify4 used together
<            with such bitmaps
< 
<         *  adding bits to existing attributes like ACLs that have flag
<            words
< 
<         *  extending enumerated types (including NFS4ERR_*) with new
<            values
<         *  adding cases to a switched union
---
>            version:
> 
>            +  adding bits to flag fields, such as new attributes to
>               GETATTR's bitmap4 data type, and providing corresponding
>               variants of opaque arrays, such as a notify4 used together
>               with such bitmaps
> 
>            +  adding bits to existing attributes like ACLs that have
>               flag words
> 
>            +  extending enumerated types (including NFS4ERR_*) with new
>               values
> 
>            +  adding cases to a switched union
1327,1330c1327,1329
<    5.   Minor versions must not delete operations.
< 
<         This prevents the potential reuse of a particular operation
<         "slot" in a future minor version.
---
>    5.   Minor versions must not delete operations.  This prevents the
>         potential reuse of a particular operation "slot" in a future
>         minor version.
1337d1335
< 
1365,1369c1363,1367
<         forces the use of implementation experience before designating a
<         feature as REQUIRED.  On the other hand, some classes of
<         features are infrastructural and have broad effects.  Allowing
<         infrastructural features to be RECOMMENDED or OPTIONAL
<         complicates implementation of the minor version.
---
>            forces the use of implementation experience before
>            designating a feature as REQUIRED.  On the other hand, some
>            classes of features are infrastructural and have broad
>            effects.  Allowing infrastructural features to be RECOMMENDED
>            or OPTIONAL complicates implementation of the minor version.
1885a1884
> 
1899,1902c1898,1902
<       it is not required to do so.  It can invoke CREATE_SESSION on the
<       connection.  This will result in client ID trunking as described
<       below.  It can also decide to drop the connection if it does not
<       choose to use trunking.
---
> 
>          it is not required to do so.  It can invoke CREATE_SESSION on
>          the connection.  This will result in client ID trunking as
>          described below.  It can also decide to drop the connection if
>          it does not choose to use trunking.
1914,1918c1914,1919
<       CREATE_SESSION on each connection, using the same client ID that
<       was returned in eir_clientid.  These invocations create two
<       sessions and also associate each connection with its respective
<       session.  The client is free to decline to use client ID trunking
<       by simply dropping the connection at this point.
---
>          CREATE_SESSION on each connection, using the same client ID
>          that was returned in eir_clientid.  These invocations create
>          two sessions and also associate each connection with its
>          respective session.  The client is free to decline to use
>          client ID trunking by simply dropping the connection at this
>          point.
1921,1922c1922,1923
<       sessions associated with that same client ID.  This requires the
<       server to coordinate state across sessions.
---
>          sessions associated with that same client ID.  This requires
>          the server to coordinate state across sessions.
1953,1958c1954,1959
<       BIND_CONN_TO_SESSION operation, see Section 18.34), if the client
<       specified SP4_SSV state protection for the BIND_CONN_TO_SESSION
<       operation, the client MUST send the BIND_CONN_TO_SESSION with
<       RPCSEC_GSS protection, using integrity or privacy, and an
<       RPCSEC_GSS handle created with the GSS SSV mechanism
<       (Section 2.10.9).
---
>          BIND_CONN_TO_SESSION operation, see Section 18.34), if the
>          client specified SP4_SSV state protection for the
>          BIND_CONN_TO_SESSION operation, the client MUST send the
>          BIND_CONN_TO_SESSION with RPCSEC_GSS protection, using
>          integrity or privacy, and an RPCSEC_GSS handle created with the
>          GSS SSV mechanism (Section 2.10.9).
1961,1968c1962,1970
<       session of a wrong server, the server will either reject the
<       attempt because it is not aware of the session identifier of the
<       BIND_CONN_TO_SESSION arguments, or it will reject the attempt
<       because the RPCSEC_GSS authentication fails.  Even if the server
<       mistakenly or maliciously accepts the connection association
<       attempt, the RPCSEC_GSS verifier it computes in the response will
<       not be verified by the client, so the client will know it cannot
<       use the connection for trunking the specified session.
---
>          session of a wrong server, the server will either reject the
>          attempt because it is not aware of the session identifier of
>          the BIND_CONN_TO_SESSION arguments, or it will reject the
>          attempt because the RPCSEC_GSS authentication fails.  Even if
>          the server mistakenly or maliciously accepts the connection
>          association attempt, the RPCSEC_GSS verifier it computes in the
>          response will not be verified by the client, so the client will
>          know it cannot use the connection for trunking the specified
>          session.
1971,1975c1973,1977
<       BIND_CONN_TO_SESSION operation will use RPCSEC_GSS integrity or
<       privacy, using the same credential that was used when the client
<       ID was created.  Mutual authentication via RPCSEC_GSS assures the
<       client that the connection is associated with the correct session
<       of the correct server.
---
>          BIND_CONN_TO_SESSION operation will use RPCSEC_GSS integrity or
>          privacy, using the same credential that was used when the
>          client ID was created.  Mutual authentication via RPCSEC_GSS
>          assures the client that the connection is associated with the
>          correct session of the correct server.
1989,2003c1991,2006
<       When the client sends EXCHANGE_ID, it specifies SP4_SSV
<       protection.  The first EXCHANGE_ID the client sends always has to
<       be confirmed by a CREATE_SESSION call.  The client then sends
<       SET_SSV.  Later, the client sends EXCHANGE_ID to a second
<       destination network address different from the one the first
<       EXCHANGE_ID was sent to.  The client checks that each EXCHANGE_ID
<       reply has the same eir_clientid, eir_server_owner.so_major_id, and
<       eir_server_scope.  If so, the client verifies the claim by sending
<       a CREATE_SESSION operation to the second destination address,
<       protected with RPCSEC_GSS integrity using an RPCSEC_GSS handle
<       returned by the second EXCHANGE_ID.  If the server accepts the
<       CREATE_SESSION request, and if the client verifies the RPCSEC_GSS
<       verifier and integrity codes, then the client has proof the second
<       server knows the SSV, and thus the two servers are cooperating for
<       the purposes of specifying server scope and client ID trunking.
---
>          When the client sends EXCHANGE_ID, it specifies SP4_SSV
>          protection.  The first EXCHANGE_ID the client sends always has
>          to be confirmed by a CREATE_SESSION call.  The client then
>          sends SET_SSV.  Later, the client sends EXCHANGE_ID to a second
>          destination network address different from the one the first
>          EXCHANGE_ID was sent to.  The client checks that each
>          EXCHANGE_ID reply has the same eir_clientid,
>          eir_server_owner.so_major_id, and eir_server_scope.  If so, the
>          client verifies the claim by sending a CREATE_SESSION operation
>          to the second destination address, protected with RPCSEC_GSS
>          integrity using an RPCSEC_GSS handle returned by the second
>          EXCHANGE_ID.  If the server accepts the CREATE_SESSION request,
>          and if the client verifies the RPCSEC_GSS verifier and
>          integrity codes, then the client has proof the second server
>          knows the SSV, and thus the two servers are cooperating for the
>          purposes of specifying server scope and client ID trunking.
2227a2231
> 
2239,2253c2243,2258
<       highest_slotid argument to a Sequence operation, i.e. the
<       requester continues to ignore the target highest_slotid in the
<       response to a Sequence operation, and continues to set its
<       highest_slotid argument to be higher than the target
<       highest_slotid.  This can be considered particularly egregious
<       behavior when the replier knows there are no outstanding requests
<       with slot IDs higher than its target highest_slotid.  When faced
<       with such intransigence, the replier is free to take more forceful
<       action, and MAY reply with a new enforced highest_slotid that is
<       less than its previous enforced highest_slotid.  Thereafter, if
<       the requester continues to send requests with a highest_slotid
<       that is greater than the replier's new enforced highest_slotid,
<       the server MAY return NFS4ERR_BAD_HIGH_SLOT, unless the slot ID in
<       the request is greater than the new enforced highest_slotid and
<       the request is a retry.
---
>          highest_slotid argument to a Sequence operation, i.e. the
>          requester continues to ignore the target highest_slotid in the
>          response to a Sequence operation, and continues to set its
>          highest_slotid argument to be higher than the target
>          highest_slotid.  This can be considered particularly egregious
>          behavior when the replier knows there are no outstanding
>          requests with slot IDs higher than its target highest_slotid.
>          When faced with such intransigence, the replier is free to take
>          more forceful action, and MAY reply with a new enforced
>          highest_slotid that is less than its previous enforced
>          highest_slotid.  Thereafter, if the requester continues to send
>          requests with a highest_slotid that is greater than the
>          replier's new enforced highest_slotid, the server MAY return
>          NFS4ERR_BAD_HIGH_SLOT, unless the slot ID in the request is
>          greater than the new enforced highest_slotid and the request is
>          a retry.
2256,2257c2261,2262
<       requester sends a request with a highest_slotid less than or equal
<       to the replier's new enforced highest_slotid.
---
>          requester sends a request with a highest_slotid less than or
>          equal to the replier's new enforced highest_slotid.
2260,2270c2265,2276
<       non-retry requests that have a slot ID that exceeds the replier's
<       highest_slotid.  Once the replier has forcibly lowered the
<       enforced highest_slotid, the requester is only allowed to send
<       retries on slots that exceed the replier's highest_slotid.  If a
<       request is received with a slot ID that is higher than the new
<       enforced highest_slotid, and the sequence ID is one higher than
<       what is in the slot's reply cache, then the server can both retire
<       the slot and return NFS4ERR_BADSLOT (however, the server MUST NOT
<       do one and not the other).  The reason it is safe to retire the
<       slot is because by using the next sequence ID, the requester is
<       indicating it has received the previous reply for the slot.
---
>          non-retry requests that have a slot ID that exceeds the
>          replier's highest_slotid.  Once the replier has forcibly
>          lowered the enforced highest_slotid, the requester is only
>          allowed to send retries on slots that exceed the replier's
>          highest_slotid.  If a request is received with a slot ID that
>          is higher than the new enforced highest_slotid, and the
>          sequence ID is one higher than what is in the slot's reply
>          cache, then the server can both retire the slot and return
>          NFS4ERR_BADSLOT (however, the server MUST NOT do one and not
>          the other).  The reason it is safe to retire the slot is
>          because by using the next sequence ID, the requester is
>          indicating it has received the previous reply for the slot.
3010,3012c3016,3019
<       use, and establish a new SSV for the client ID.  The client will
<       be unable to delete the old client ID, and will let the lease on
<       the old client ID expire.
---
> 
>          use, and establish a new SSV for the client ID.  The client
>          will be unable to delete the old client ID, and will let the
>          lease on the old client ID expire.
3015,3019c3022,3027
<       using Bob's RPCSEC_GSS context, Eve can use the new session via
<       the legitimate client, but she cannot disrupt Bob.  Moreover,
<       because the client SHOULD have modified the SSV due to Eve using
<       the new session, Bob cannot get revenge on Eve by associating a
<       rogue connection with the session.
---
> 
>          using Bob's RPCSEC_GSS context, Eve can use the new session via
>          the legitimate client, but she cannot disrupt Bob.  Moreover,
>          because the client SHOULD have modified the SSV due to Eve
>          using the new session, Bob cannot get revenge on Eve by
>          associating a rogue connection with the session.
3022,3048c3030,3058
<       hijacked the old session?  When the client detects that a new
<       principal, Bob, wants to use the session, it SHOULD have sent a
<       SET_SSV, which leads to the following sub-scenarios:
< 
<       *  Let us suppose that from the rogue connection, Eve sent a
<          SET_SSV with the same slot ID and sequence ID that the
<          legitimate client later uses.  The server will assume the
<          SET_SSV sent with Bob's credentials is a retry, and return to
<          the legitimate client the reply it sent Eve.  However, unless
<          Eve can correctly guess the SSV the legitimate client will use,
<          the digest verification checks in the SET_SSV response will
<          fail.  That is an indication to the client that the session has
<          apparently been hijacked.
< 
<       *  Alternatively, Eve sent a SET_SSV with a different slot ID than
<          the legitimate client uses for its SET_SSV.  Then the digest
<          verification of the SET_SSV sent with Bob's credentials fails
<          on the server, and the error returned to the client makes it
<          apparent that the session has been hijacked.
< 
<       *  Alternatively, Eve sent an operation other than SET_SSV, but
<          with the same slot ID and sequence that the legitimate client
<          uses for its SET_SSV.  The server returns to the legitimate
<          client the response it sent Eve.  The client sees that the
<          response is not at all what it expects.  The client assumes
<          either session hijacking or a server bug, and either way
<          destroys the old session.
---
> 
>          hijacked the old session?  When the client detects that a new
>          principal, Bob, wants to use the session, it SHOULD have sent a
>          SET_SSV, which leads to the following sub-scenarios:
> 
>          +  Let us suppose that from the rogue connection, Eve sent a
>             SET_SSV with the same slot ID and sequence ID that the
>             legitimate client later uses.  The server will assume the
>             SET_SSV sent with Bob's credentials is a retry, and return
>             to the legitimate client the reply it sent Eve.  However,
>             unless Eve can correctly guess the SSV the legitimate client
>             will use, the digest verification checks in the SET_SSV
>             response will fail.  That is an indication to the client
>             that the session has apparently been hijacked.
> 
>          +  Alternatively, Eve sent a SET_SSV with a different slot ID
>             than the legitimate client uses for its SET_SSV.  Then the
>             digest verification of the SET_SSV sent with Bob's
>             credentials fails on the server, and the error returned to
>             the client makes it apparent that the session has been
>             hijacked.
> 
>          +  Alternatively, Eve sent an operation other than SET_SSV, but
>             with the same slot ID and sequence that the legitimate
>             client uses for its SET_SSV.  The server returns to the
>             legitimate client the response it sent Eve.  The client sees
>             that the response is not at all what it expects.  The client
>             assumes either session hijacking or a server bug, and either
>             way destroys the old session.
3719,3720c3729,3730
<    const NFS4_MAXFILELEN           = 0xffffffffffffffff;
<    const NFS4_MAXFILEOFF           = 0xfffffffffffffffe;
---
>    const NFS4_MAXFILELEN  = 0xffffffffffffffff;
>       const NFS4_MAXFILEOFF = 0xfffffffffffffffe;
3751,3822c3761,3833
<    +---------------+---------------------------------------------------+
<    | Data Type     | Definition                                        |
<    +---------------+---------------------------------------------------+
<    | int32_t       | typedef int int32_t;                              |
<    | uint32_t      | typedef unsigned int uint32_t;                    |
<    | int64_t       | typedef hyper int64_t;                            |
<    | uint64_t      | typedef unsigned hyper uint64_t;                  |
<    | attrlist4     | typedef opaque attrlist4<>;                       |
<    |               | Used for file/directory attributes.               |
<    | bitmap4       | typedef uint32_t bitmap4<>;                       |
<    |               | Used in attribute array encoding.                 |
<    | changeid4     | typedef uint64_t changeid4;                       |
<    |               | Used in the definition of change_info4.           |
<    | clientid4     | typedef uint64_t clientid4;                       |
<    |               | Shorthand reference to client identification.     |
<    | count4        | typedef uint32_t count4;                          |
<    |               | Various count parameters (READ, WRITE, COMMIT).   |
<    | length4       | typedef uint64_t length4;                         |
<    |               | The length of a byte-range within a file.         |
<    | mode4         | typedef uint32_t mode4;                           |
<    |               | Mode attribute data type.                         |
<    | nfs_cookie4   | typedef uint64_t nfs_cookie4;                     |
<    |               | Opaque cookie value for READDIR.                  |
<    | nfs_fh4       | typedef opaque nfs_fh4<NFS4_FHSIZE>;              |
<    |               | Filehandle definition.                            |
<    | nfs_ftype4    | enum nfs_ftype4;                                  |
<    |               | Various defined file types.                       |
<    | nfsstat4      | enum nfsstat4;                                    |
<    |               | Return value for operations.                      |
<    | offset4       | typedef uint64_t offset4;                         |
<    |               | Various offset designations (READ, WRITE, LOCK,   |
<    |               | COMMIT).                                          |
<    | qop4          | typedef uint32_t qop4;                            |
<    |               | Quality of protection designation in SECINFO.     |
<    | sec_oid4      | typedef opaque sec_oid4<>;                        |
<    |               | Security Object Identifier.  The sec_oid4 data    |
<    |               | type is not really opaque.  Instead, it contains  |
<    |               | an ASN.1 OBJECT IDENTIFIER as used by GSS-API in  |
<    |               | the mech_type argument to GSS_Init_sec_context.   |
<    |               | See [7] for details.                              |
<    | sequenceid4   | typedef uint32_t sequenceid4;                     |
<    |               | Sequence number used for various session          |
<    |               | operations (EXCHANGE_ID, CREATE_SESSION,          |
<    |               | SEQUENCE, CB_SEQUENCE).                           |
<    | seqid4        | typedef uint32_t seqid4;                          |
<    |               | Sequence identifier used for locking.             |
<    | sessionid4    | typedef opaque sessionid4[NFS4_SESSIONID_SIZE];   |
<    |               | Session identifier.                               |
<    | slotid4       | typedef uint32_t slotid4;                         |
<    |               | Sequencing artifact for various session           |
<    |               | operations (SEQUENCE, CB_SEQUENCE).               |
<    | utf8string    | typedef opaque utf8string<>;                      |
<    |               | UTF-8 encoding for strings.                       |
<    | utf8str_cis   | typedef utf8string utf8str_cis;                   |
<    |               | Case-insensitive UTF-8 string.                    |
<    | utf8str_cs    | typedef utf8string utf8str_cs;                    |
<    |               | Case-sensitive UTF-8 string.                      |
<    | utf8str_mixed | typedef utf8string utf8str_mixed;                 |
<    |               | UTF-8 strings with a case-sensitive prefix and a  |
<    |               | case-insensitive suffix.                          |
<    | component4    | typedef utf8str_cs component4;                    |
<    |               | Represents pathname components.                   |
<    | linktext4     | typedef utf8str_cs linktext4;                     |
<    |               | Symbolic link contents ("symbolic link" is        |
<    |               | defined in an Open Group [14] standard).          |
<    | pathname4     | typedef component4 pathname4<>;                   |
<    |               | Represents pathname for fs_locations.             |
<    | verifier4     | typedef opaque verifier4[NFS4_VERIFIER_SIZE];     |
<    |               | Verifier used for various operations (COMMIT,     |
<    |               | CREATE, EXCHANGE_ID, OPEN, READDIR, WRITE)        |
<    |               | NFS4_VERIFIER_SIZE is defined as 8.               |
<    +---------------+---------------------------------------------------+
---
>    +---------------+--------------------------------------------------+
>    | Data Type     | Definition                                       |
>    +---------------+--------------------------------------------------+
>    | int32_t       | typedef int int32_t;                             |
>    | uint32_t      | typedef unsigned int uint32_t;                   |
>    | int64_t       | typedef hyper int64_t;                           |
>    | uint64_t      | typedef unsigned hyper uint64_t;                 |
>    | attrlist4     | typedef opaque attrlist4<>;                      |
>    |               | Used for file/directory attributes.              |
>    | bitmap4       | typedef uint32_t bitmap4<>;                      |
>    |               | Used in attribute array encoding.                |
>    | changeid4     | typedef uint64_t changeid4;                      |
>    |               | Used in the definition of change_info4.          |
>    | clientid4     | typedef uint64_t clientid4;                      |
>    |               | Shorthand reference to client identification.    |
>    | count4        | typedef uint32_t count4;                         |
>    |               | Various count parameters (READ, WRITE, COMMIT).  |
>    | length4       | typedef uint64_t length4;                        |
>    |               | The length of a byte-range within a file.        |
>    | mode4         | typedef uint32_t mode4;                          |
>    |               | Mode attribute data type.                        |
>    | nfs_cookie4   | typedef uint64_t nfs_cookie4;                    |
>    |               | Opaque cookie value for READDIR.                 |
>    | nfs_fh4       | typedef opaque nfs_fh4<NFS4_FHSIZE>;             |
>    |               | Filehandle definition.                           |
>    | nfs_ftype4    | enum nfs_ftype4;                                 |
>    |               | Various defined file types.                      |
>    | nfsstat4      | enum nfsstat4;                                   |
>    |               | Return value for operations.                     |
>    | offset4       | typedef uint64_t offset4;                        |
>    |               | Various offset designations (READ, WRITE, LOCK,  |
>    |               | COMMIT).                                         |
>    | qop4          | typedef uint32_t qop4;                           |
>    |               | Quality of protection designation in SECINFO.    |
>    | sec_oid4      | typedef opaque sec_oid4<>;                       |
>    |               | Security Object Identifier.  The sec_oid4 data   |
>    |               | type is not really opaque.  Instead, it contains |
>    |               | an ASN.1 OBJECT IDENTIFIER as used by GSS-API in |
>    |               | the mech_type argument to GSS_Init_sec_context.  |
>    |               | See [7] for details.                             |
>    | sequenceid4   | typedef uint32_t sequenceid4;                    |
>    |               | Sequence number used for various session         |
>    |               | operations (EXCHANGE_ID, CREATE_SESSION,         |
>    |               | SEQUENCE, CB_SEQUENCE).                          |
>    | seqid4        | typedef uint32_t seqid4;                         |
>    |               | Sequence identifier used for locking.            |
>    | sessionid4    | typedef opaque sessionid4[NFS4_SESSIONID_SIZE];  |
>    |               | Session identifier.                              |
>    | slotid4       | typedef uint32_t slotid4;                        |
>    |               | Sequencing artifact for various session          |
>    |               | operations (SEQUENCE, CB_SEQUENCE).              |
>    | utf8string    | typedef opaque utf8string<>;                     |
>    |               | UTF-8 encoding for strings.                      |
>    | utf8str_cis   | typedef utf8string utf8str_cis;                  |
>    |               | Case-insensitive UTF-8 string.                   |
>    | utf8str_cs    | typedef utf8string utf8str_cs;                   |
>    |               | Case-sensitive UTF-8 string.                     |
>    | utf8str_mixed | typedef utf8string utf8str_mixed;                |
>    |               | UTF-8 strings with a case-sensitive prefix and a |
>    |               | case-insensitive suffix.                         |
>    | component4    | typedef utf8str_cs component4;                   |
>    |               | Represents pathname components.                  |
>    | linktext4     | typedef utf8str_cs linktext4;                    |
>    |               | Symbolic link contents ("symbolic link" is       |
>    |               | defined in an Open Group [14] standard).         |
>    | pathname4     | typedef component4 pathname4<>;                  |
>    |               | Represents pathname for fs_locations.            |
>    | verifier4     | typedef opaque verifier4[NFS4_VERIFIER_SIZE];    |
>    |               | Verifier used for various operations (COMMIT,    |
>    |               | CREATE, EXCHANGE_ID, OPEN, READDIR, WRITE)       |
>    |               | NFS4_VERIFIER_SIZE is defined as 8.              |
>    |               |                                                  |
>    +---------------+--------------------------------------------------+
4185,4211c4196,4231
<    +-------------------------+---+---------+---------------------------+
<    | name                    | # | Data    | Description               |
<    |                         |   | Type    |                           |
<    +-------------------------+---+---------+---------------------------+
<    | threshold4_read_size    | 0 | length4 | If a file's length is     |
<    |                         |   |         | less than the value of    |
<    |                         |   |         | threshold4_read_size,     |
<    |                         |   |         | then it is RECOMMENDED    |
<    |                         |   |         | that the client read from |
<    |                         |   |         | the file via the MDS and  |
<    |                         |   |         | not a storage device.     |
<    | threshold4_write_size   | 1 | length4 | If a file's length is     |
<    |                         |   |         | less than the value of    |
<    |                         |   |         | threshold4_write_size,    |
<    |                         |   |         | then it is RECOMMENDED    |
<    |                         |   |         | that the client write to  |
<    |                         |   |         | the file via the MDS and  |
<    |                         |   |         | not a storage device.     |
<    | threshold4_read_iosize  | 2 | length4 | For read I/O sizes below  |
<    |                         |   |         | this threshold, it is     |
<    |                         |   |         | RECOMMENDED to read data  |
<    |                         |   |         | through the MDS.          |
<    | threshold4_write_iosize | 3 | length4 | For write I/O sizes below |
<    |                         |   |         | this threshold, it is     |
<    |                         |   |         | RECOMMENDED to write data |
<    |                         |   |         | through the MDS.          |
<    +-------------------------+---+---------+---------------------------+
---
>    +-------------------------+----+----------+-------------------------+
>    | name                    | #  | Data     | Description             |
>    |                         |    | Type     |                         |
>    +-------------------------+----+----------+-------------------------+
>    | threshold4_read_size    | 0  | length4  | If a file's length is   |
>    |                         |    |          | less than the value of  |
>    |                         |    |          | threshold4_read_size,   |
>    |                         |    |          | then it is RECOMMENDED  |
>    |                         |    |          | that the client read    |
>    |                         |    |          | from                    |
>    |                         |    |          | the file via the MDS    |
>    |                         |    |          | and                     |
>    |                         |    |          | not a storage device.   |
>    | threshold4_write_size   | 1  | length4  | If a file's length is   |
>    |                         |    |          | less than the value of  |
>    |                         |    |          | threshold4_write_size,  |
>    |                         |    |          | then it is RECOMMENDED  |
>    |                         |    |          | that the client write   |
>    |                         |    |          | to                      |
>    |                         |    |          | the file via the MDS    |
>    |                         |    |          | and                     |
>    |                         |    |          | not a storage device.   |
>    | threshold4_read_iosize  | 2  | length4  | For read I/O sizes      |
>    |                         |    |          | below                   |
>    |                         |    |          | this threshold, it is   |
>    |                         |    |          | RECOMMENDED to read     |
>    |                         |    |          | data                    |
>    |                         |    |          | through the MDS.        |
>    | threshold4_write_iosize | 3  | length4  | For write I/O sizes     |
>    |                         |    |          | below                   |
>    |                         |    |          | this threshold, it is   |
>    |                         |    |          | RECOMMENDED to write    |
>    |                         |    |          | data                    |
>    |                         |    |          | through the MDS.        |
>    |                         |    |          |                         |
>    +-------------------------+----+----------+-------------------------+
4218d4237
< 
4314a4334
> 
4418,4419c4438,4439
<    [volatile bit = 1 | server boot time | slot | generation number]
<    o  slot is an index in the server volatile filehandle table
---
>    [volatile bit = 1 | server boot time | slot | generation number] o
>    slot is an index in the server volatile filehandle table
4507,4513c4527,4534
<         +----------+-----------+---------------------------------+
<         | LOOKUP   | "foo"     | ; look up file                  |
<         | GETATTR  | attrbits  |                                 |
<         | OPENATTR |           | ; access foo's named attributes |
<         | LOOKUP   | "x11icon" | ; look up specific attribute    |
<         | READ     | 0,4096    | ; read stream of bytes          |
<         +----------+-----------+---------------------------------+
---
>    +---------------+--------------+------------------------------------+
>    | LOOKUP        | "foo"        | ; look up file  ; access foo's     |
>    | GETATTR       | attrbits     | named attributes ; look up         |
>    | OPENATTR      | "x11icon"    | specific attribute ; read stream   |
>    | LOOKUP READ   | 0,4096       | of bytes                           |
>    +---------------+--------------+------------------------------------+
>    |               |              |                                    |
>    +---------------+--------------+------------------------------------+
4654c4675,4676
<    o  The per-server attribute is:
---
>    o  The per-server attribute is: lease_time o The per-file system
>       attributes are:
4656,4659c4678
<          lease_time
<    o  The per-file system attributes are:
< 
<          supported_attrs, suppattr_exclcreat, fh_expire_type,
---
>       supported_attrs, suppattr_exclcreat, fh_expire_type,
4668,4678c4687,4695
<    o  The per-file system object attributes are:
< 
<          type, change, size, named_attr, fsid, rdattr_error, filehandle,
<          acl, archive, fileid, hidden, maxlink, mimetype, mode,
<          numlinks, owner, owner_group, rawdev, space_used, system,
<          time_access, time_backup, time_create, time_metadata,
<          time_modify, mounted_on_fileid, dir_notif_delay,
<          dirent_notif_delay, dacl, sacl, layout_type, layout_hint,
<          layout_blksize, layout_alignment, mdsthreshold, retention_get,
<          retention_set, retentevt_get, retentevt_set, retention_hold,
<          mode_set_masked
---
>    o  The per-file system object attributes are: type, change, size,
>       named_attr, fsid, rdattr_error, filehandle, acl, archive, fileid,
>       hidden, maxlink, mimetype, mode, numlinks, owner, owner_group,
>       rawdev, space_used, system, time_access, time_backup, time_create,
>       time_metadata, time_modify, mounted_on_fileid, dir_notif_delay,
>       dirent_notif_delay, dacl, sacl, layout_type, layout_hint,
>       layout_blksize, layout_alignment, mdsthreshold, retention_get,
>       retention_set, retentevt_get, retentevt_set, retention_hold,
>       mode_set_masked
4730a4748
>      |                    |    |            |     |                  |
4733c4751
<                                   Table 2
---
>                                   Table 1
4768c4786
<    | layout_hint        | 63 | layouthint4    |   W | Section 5.12.4   |
---
>    | layout_hint        | 63 | layouthint4    | W   | Section 5.12.4   |
4778c4796
<    | mode_set_masked    | 74 | mode_masked4   |   W | Section 6.2.5    |
---
>    | mode_set_masked    | 74 | mode_masked4   | W   | Section 6.2.5    |
4789c4807
<    | retentevt_set      | 72 | retention_set4 |   W | Section 5.13.4   |
---
>    | retentevt_set      | 72 | retention_set4 | W   | Section 5.13.4   |
4792c4810
<    | retention_set      | 70 | retention_set4 |   W | Section 5.13.2   |
---
>    | retention_set      | 70 | retention_set4 | W   | Section 5.13.2   |
4800c4818
<    | time_access_set    | 48 | settime4       |   W | Section 5.8.2.38 |
---
>    | time_access_set    | 48 | settime4       | W   | Section 5.8.2.38 |
4806c4824,4825
<    | time_modify_set    | 54 | settime4       |   W | Section 5.8.2.44 |
---
>    | time_modify_set    | 54 | settime4       | W   | Section 5.8.2.44 |
>    |                    |    |                |     |                  |
4809c4828
<                                   Table 3
---
>                                   Table 2
5652c5671
<    typedef uint32_t        acetype4;
---
>    typedef uint32_t  acetype4;
5656c5675
<    typedef uint32_t        acemask4;
---
>    typedef uint32_t  acemask4;
5728,5758c5747,5778
<    +------------------------------+--------------+---------------------+
<    | Value                        | Abbreviation | Description         |
<    +------------------------------+--------------+---------------------+
<    | ACE4_ACCESS_ALLOWED_ACE_TYPE | ALLOW        | Explicitly grants   |
<    |                              |              | the access defined  |
<    |                              |              | in acemask4 to the  |
<    |                              |              | file or directory.  |
<    | ACE4_ACCESS_DENIED_ACE_TYPE  | DENY         | Explicitly denies   |
<    |                              |              | the access defined  |
<    |                              |              | in acemask4 to the  |
<    |                              |              | file or directory.  |
<    | ACE4_SYSTEM_AUDIT_ACE_TYPE   | AUDIT        | Log (in a           |
<    |                              |              | system-dependent    |
<    |                              |              | way) any access     |
<    |                              |              | attempt to a file   |
<    |                              |              | or directory that   |
<    |                              |              | uses any of the     |
<    |                              |              | access methods      |
<    |                              |              | specified in        |
<    |                              |              | acemask4.           |
<    | ACE4_SYSTEM_ALARM_ACE_TYPE   | ALARM        | Generate an alarm   |
<    |                              |              | (in a               |
<    |                              |              | system-dependent    |
<    |                              |              | way) when any       |
<    |                              |              | access attempt is   |
<    |                              |              | made to a file or   |
<    |                              |              | directory for the   |
<    |                              |              | access methods      |
<    |                              |              | specified in        |
<    |                              |              | acemask4.           |
<    +------------------------------+--------------+---------------------+
---
>    +------------------------------+--------------+--------------------+
>    | Value                        | Abbreviation | Description        |
>    +------------------------------+--------------+--------------------+
>    | ACE4_ACCESS_ALLOWED_ACE_TYPE | ALLOW        | Explicitly grants  |
>    |                              |              | the access defined |
>    |                              |              | in acemask4 to the |
>    |                              |              | file or directory. |
>    | ACE4_ACCESS_DENIED_ACE_TYPE  | DENY         | Explicitly denies  |
>    |                              |              | the access defined |
>    |                              |              | in acemask4 to the |
>    |                              |              | file or directory. |
>    | ACE4_SYSTEM_AUDIT_ACE_TYPE   | AUDIT        | Log (in a          |
>    |                              |              | system-dependent   |
>    |                              |              | way) any access    |
>    |                              |              | attempt to a file  |
>    |                              |              | or directory that  |
>    |                              |              | uses any of the    |
>    |                              |              | access methods     |
>    |                              |              | specified in       |
>    |                              |              | acemask4.          |
>    | ACE4_SYSTEM_ALARM_ACE_TYPE   | ALARM        | Generate an alarm  |
>    |                              |              | (in a              |
>    |                              |              | system-dependent   |
>    |                              |              | way) when any      |
>    |                              |              | access attempt is  |
>    |                              |              | made to a file or  |
>    |                              |              | directory for the  |
>    |                              |              | access methods     |
>    |                              |              | specified in       |
>    |                              |              | acemask4.          |
>    |                              |              |                    |
>    +------------------------------+--------------+--------------------+
5816d5835
< 
5834c5853
<       Discussion:
---
>          Discussion:
5861c5880
<       Discussion:
---
>          Discussion:
5876c5895
<       Discussion:
---
>          Discussion:
5895c5914
<       Discussion:
---
>          Discussion:
5909,5911c5928,5929
< 
<          RENAME
<       Discussion:
---
>       RENAME
>          Discussion:
5937c5955
<       Discussion:
---
>          Discussion:
5952,5954c5970,5971
<          READ
< 
<          OPEN
---
>       READ
>       OPEN
5956c5973
<          REMOVE
---
>       REMOVE
5997c6014
<       Discussion:
---
>          Discussion:
6026c6043
<       Discussion:
---
>          Discussion:
6042,6043c6059
< 
<       Discussion:
---
>          Discussion:
6057c6073
<       Discussion:
---
>          Discussion:
6070c6086
<       Discussion:
---
>          Discussion:
6082c6098
<       Discussion:
---
>          Discussion:
6096,6097c6112,6113
<          VERIFY
<       Discussion:
---
>       VERIFY
>          Discussion:
6117c6133
<       Discussion:
---
>          Discussion:
6129c6145
<       Discussion:
---
>          Discussion:
6233,6236c6249,6252
<       added to each new directory created.
<       If this flag is set in an ACE in an ACL attribute to be set on a
<       non-directory file system object, the operation attempting to set
<       the ACL SHOULD fail with NFS4ERR_ATTRNOTSUPP.
---
>       added to each new directory created.  If this flag is set in an
>       ACE in an ACL attribute to be set on a non-directory file system
>       object, the operation attempting to set the ACL SHOULD fail with
>       NFS4ERR_ATTRNOTSUPP.
6253,6255c6269,6271
<       ACE4_DIRECTORY_INHERIT_ACE nor ACE4_FILE_INHERIT_ACE is present,
<       then an operation attempting to set such an attribute SHOULD fail
<       with NFS4ERR_ATTRNOTSUPP.
---
>          ACE4_DIRECTORY_INHERIT_ACE nor ACE4_FILE_INHERIT_ACE is
>          present, then an operation attempting to set such an attribute
>          SHOULD fail with NFS4ERR_ATTRNOTSUPP.
6278,6280c6294,6296
<       even when they return NFS4_OK.  For the purposes of AUDIT and
<       ALARM, we consider an ACCESS operation to be a "failure" if it
<       fails to return a bit that was requested and supported.
---
>          even when they return NFS4_OK.  For the purposes of AUDIT and
>          ALARM, we consider an ACCESS operation to be a "failure" if it
>          fails to return a bit that was requested and supported.
6324a6341
>    |               |                                                  |
6327c6344
<                                   Table 4
---
>                                   Table 3
6645,6674c6662,6686
<    1.  If just the mode is given in the call:
< 
<        In this case, inheritance SHOULD take place, but the mode MUST be
<        applied to the inherited ACL as described in Section 6.4.1.1,
<        thereby modifying the ACL.
< 
<    2.  If just the ACL is given in the call:
< 
<        In this case, inheritance SHOULD NOT take place, and the ACL as
<        defined in the CREATE or OPEN will be set without modification,
<        and the mode modified as in Section 6.4.1.2.
< 
<    3.  If both mode and ACL are given in the call:
< 
<        In this case, inheritance SHOULD NOT take place, and both
<        attributes will be set as described in Section 6.4.1.3.
< 
<    4.  If neither mode nor ACL is given in the call:
< 
<        In the case where an object is being created without any initial
<        attributes at all, e.g., an OPEN operation with an opentype4 of
<        OPEN4_CREATE and a createmode4 of EXCLUSIVE4, inheritance SHOULD
<        NOT take place (note that EXCLUSIVE4_1 is a better choice of
<        createmode4, since it does permit initial attributes).  Instead,
<        the server SHOULD set permissions to deny all access to the newly
<        created object.  It is expected that the appropriate client will
<        set the desired attributes in a subsequent SETATTR operation, and
<        the server SHOULD allow that operation to succeed, regardless of
<        what permissions the object is created with.  For example, an
<        empty ACL denies all permissions, but the server should allow the
---
>    1.  If just the mode is given in the call: In this case, inheritance
>        SHOULD take place, but the mode MUST be applied to the inherited
>        ACL as described in Section 6.4.1.1, thereby modifying the ACL.
> 
>    2.  If just the ACL is given in the call: In this case, inheritance
>        SHOULD NOT take place, and the ACL as defined in the CREATE or
>        OPEN will be set without modification, and the mode modified as
>        in Section 6.4.1.2.
> 
>    3.  If both mode and ACL are given in the call: In this case,
>        inheritance SHOULD NOT take place, and both attributes will be
>        set as described in Section 6.4.1.3.
> 
>    4.  If neither mode nor ACL is given in the call: In the case where
>        an object is being created without any initial attributes at all,
>        e.g., an OPEN operation with an opentype4 of OPEN4_CREATE and a
>        createmode4 of EXCLUSIVE4, inheritance SHOULD NOT take place
>        (note that EXCLUSIVE4_1 is a better choice of createmode4, since
>        it does permit initial attributes).  Instead, the server SHOULD
>        set permissions to deny all access to the newly created object.
>        It is expected that the appropriate client will set the desired
>        attributes in a subsequent SETATTR operation, and the server
>        SHOULD allow that operation to succeed, regardless of what
>        permissions the object is created with.  For example, an empty
>        ACL denies all permissions, but the server should allow the
6679,6686c6691,6698
<        modifications to the ACL will happen.  The mode attribute, if
<        supported, MUST be as computed in Section 6.3.2, with the
<        MODE4_SUID, MODE4_SGID, and MODE4_SVTX bits clear.  If no
<        inheritable ACEs exist on the parent directory, the rules for
<        creating acl, dacl, or sacl attributes are implementation
<        defined.  If either the dacl or sacl attribute is supported, then
<        the ACL4_DEFAULTED flag SHOULD be set on the newly created
<        attributes.
---
>           modifications to the ACL will happen.  The mode attribute, if
>           supported, MUST be as computed in Section 6.3.2, with the
>           MODE4_SUID, MODE4_SGID, and MODE4_SVTX bits clear.  If no
>           inheritable ACEs exist on the parent directory, the rules for
>           creating acl, dacl, or sacl attributes are implementation
>           defined.  If either the dacl or sacl attribute is supported,
>           then the ACL4_DEFAULTED flag SHOULD be set on the newly
>           created attributes.
7108,7121c7120,7130
<    o  Stateids may represent opens of files.
< 
<       Each stateid in this case represents the OPEN state for a given
<       client ID/open-owner/filehandle triple.  Such stateids are subject
<       to change (with consequent incrementing of the stateid's seqid) in
<       response to OPENs that result in upgrade and OPEN_DOWNGRADE
<       operations.
< 
<    o  Stateids may represent sets of byte-range locks.
< 
<       All locks held on a particular file by a particular owner and
<       gotten under the aegis of a particular open file are associated
<       with a single stateid with the seqid being incremented whenever
<       LOCK and LOCKU operations affect that set of locks.
---
>    o  Stateids may represent opens of files.  Each stateid in this case
>       represents the OPEN state for a given client ID/open-owner/
>       filehandle triple.  Such stateids are subject to change (with
>       consequent incrementing of the stateid's seqid) in response to
>       OPENs that result in upgrade and OPEN_DOWNGRADE operations.
> 
>    o  Stateids may represent sets of byte-range locks.  All locks held
>       on a particular file by a particular owner and gotten under the
>       aegis of a particular open file are associated with a single
>       stateid with the seqid being incremented whenever LOCK and LOCKU
>       operations affect that set of locks.
7130c7139
<       particular filehandle.
---
>          particular filehandle.
7137c7146
<       particular directory filehandle.
---
>          particular directory filehandle.
7147,7150c7156,7159
<       client for a particular filehandle with a given layout type.  The
<       seqid is updated as the layouts of that set of byte-ranges change,
<       via layout stateid changing operations such as LAYOUTGET and
<       LAYOUTRETURN.
---
>          client for a particular filehandle with a given layout type.
>          The seqid is updated as the layouts of that set of byte-ranges
>          change, via layout stateid changing operations such as
>          LAYOUTGET and LAYOUTRETURN.
7173a7183
> 
7539,7548c7549,7558
<       errors or it MUST ensure that, despite transport-level
<       retransmission intervals that exceed the lease_time, a SEQUENCE
<       operation is sent that renews the lease before expiration.  The
<       client can achieve this by associating a new connection with the
<       session, and sending a SEQUENCE operation on it.  However, if the
<       attempt to establish a new connection is delayed for some reason
<       (e.g., exponential backoff of the connection establishment
<       packets), the client will have to abort the connection
<       establishment attempt before the lease expires, and attempt to
<       reconnect.
---
>          errors or it MUST ensure that, despite transport-level
>          retransmission intervals that exceed the lease_time, a SEQUENCE
>          operation is sent that renews the lease before expiration.  The
>          client can achieve this by associating a new connection with
>          the session, and sending a SEQUENCE operation on it.  However,
>          if the attempt to establish a new connection is delayed for
>          some reason (e.g., exponential backoff of the connection
>          establishment packets), the client will have to abort the
>          connection establishment attempt before the lease expires, and
>          attempt to reconnect.
8004c8014
<    1.   Client A acquires one or more locks.
---
>    1.  Client A acquires one or more locks.
8006c8016
<    2.   Server restarts.
---
>    2.  Server restarts.
8008,8010c8018,8020
<    3.   Client A and server experience mutual network partition, such
<         that client A is unable to reclaim all of its locks within the
<         grace period.
---
>    3.  Client A and server experience mutual network partition, such
>        that client A is unable to reclaim all of its locks within the
>        grace period.
8012,8013c8022,8023
<    4.   Server's reclaim grace period ends.  Client A has either no
<         locks or an incomplete set of locks known to the server.
---
>    4.  Server's reclaim grace period ends.  Client A has either no locks
>        or an incomplete set of locks known to the server.
8015,8016c8025,8026
<    5.   Client B acquires a lock that would have conflicted with a lock
<         of client A that was not reclaimed.
---
>    5.  Client B acquires a lock that would have conflicted with a lock
>        of client A that was not reclaimed.
8018c8028
<    6.   Client B releases the lock.
---
>    6.  Client B releases the lock.
8020c8030
<    7.   Server restarts a second time.
---
>    7.  Server restarts a second time.
8022c8032
<    8.   Network partition between client A and server heals.
---
>    8.  Network partition between client A and server heals.
8024,8025c8034,8035
<    9.   Client A connects to new server instance and finds out about
<         server restart.
---
>    9.  Client A connects to new server instance and finds out about
>        server restart.
8102,8104c8112,8115
<        there is unrecoverable damage or corruption to the information in
<        stable storage, then for all clients and/or locks that may be
<        affected, the server MUST return NFS4ERR_NO_GRACE.
---
> 
>           there is unrecoverable damage or corruption to the information
>           in stable storage, then for all clients and/or locks that may
>           be affected, the server MUST return NFS4ERR_NO_GRACE.
8635,8637c8646,8648
<    const OPEN4_SHARE_ACCESS_READ   = 0x00000001;
<    const OPEN4_SHARE_ACCESS_WRITE  = 0x00000002;
<    const OPEN4_SHARE_ACCESS_BOTH   = 0x00000003;
---
>    const OPEN4_SHARE_ACCESS_READ  = 0x00000001;
>       const OPEN4_SHARE_ACCESS_WRITE = 0x00000002; const
>       OPEN4_SHARE_ACCESS_BOTH = 0x00000003;
9098,9108c9109,9119
<       modifications, some client implementors may be tempted to use the
<       time_modify attribute and not the change attribute to validate
<       cached data, so that metadata changes do not spuriously invalidate
<       clean data.  The implementor is cautioned in this approach.  The
<       change attribute is guaranteed to change for each update to the
<       file, whereas time_modify is guaranteed to change only at the
<       granularity of the time_delta attribute.  Use by the client's data
<       cache validation logic of time_modify and not change runs the risk
<       of the client incorrectly marking stale data as valid.  Thus, any
<       cache validation approach by the client MUST include the use of
<       the change attribute.
---
>          modifications, some client implementors may be tempted to use
>          the time_modify attribute and not the change attribute to
>          validate cached data, so that metadata changes do not
>          spuriously invalidate clean data.  The implementor is cautioned
>          in this approach.  The change attribute is guaranteed to change
>          for each update to the file, whereas time_modify is guaranteed
>          to change only at the granularity of the time_delta attribute.
>          Use by the client's data cache validation logic of time_modify
>          and not change runs the risk of the client incorrectly marking
>          stale data as valid.  Thus, any cache validation approach by
>          the client MUST include the use of the change attribute.
9588,9592c9599
<            if (cc != sc)
<                modified = TRUE;
<        } else {
<            do CB_GETATTR for size;
<        }
---
>           if (cc != sc) modified = TRUE;
9593a9601,9604
>           } else {
>               do CB_GETATTR for size;
> 
>                  }
9630,9635c9641,9645
<       RENAME
<    Whether a RENAME of a directory in the path leading to the file
<    results in recall of an OPEN delegation depends on the semantics of
<    the server's file system.  If that file system denies such RENAMEs
<    when a file is open, the recall must be performed to determine
<    whether the file in question is, in fact, open.
---
>       RENAME Whether a RENAME of a directory in the path leading to the
>       file results in recall of an OPEN delegation depends on the
>       semantics of the server's file system.  If that file system denies
>       such RENAMEs when a file is open, the recall must be performed to
>       determine whether the file in question is, in fact, open.
10782a10793
> 
11540,11541c11551
< 
<    -  Current fh is root of pseudo-fs.
---
>       *  Current fh is root of pseudo-fs.
11545,11547c11555,11557
<    -  Just for completeness.  Normally, clients will know the fsid of
<       the pseudo-fs as soon as they establish communication with a
<       server.
---
>       *  Just for completeness.  Normally, clients will know the fsid of
>          the pseudo-fs as soon as they establish communication with a
>          server.
11553,11555c11563,11565
<    -  Get current fsid to see where file system boundaries are.  The
<       fsid will be that for the pseudo-fs in this example, so no
<       boundary.
---
>       *  Get current fsid to see where file system boundaries are.  The
>          fsid will be that for the pseudo-fs in this example, so no
>          boundary.
11559c11569
<    -  Current fh is for /this and is within pseudo-fs.
---
>       *  Current fh is for /this and is within pseudo-fs.
11563c11573
<    -  Current fh is for /this/is and is within pseudo-fs.
---
>       *  Current fh is for /this/is and is within pseudo-fs.
11567,11569c11577,11579
<    -  Get current fsid to see where file system boundaries are.  The
<       fsid will be that for the pseudo-fs in this example, so no
<       boundary.
---
>       *  Get current fsid to see where file system boundaries are.  The
>          fsid will be that for the pseudo-fs in this example, so no
>          boundary.
11573c11583
<    -  Current fh is for /this/is and is within pseudo-fs.
---
>       *  Current fh is for /this/is and is within pseudo-fs.
11576,11577c11586
< 
<    -  Current fh is for /this/is/the and is within pseudo-fs.
---
>       *  Current fh is for /this/is/the and is within pseudo-fs.
11581,11583c11590,11592
<    -  Get current fsid to see where file system boundaries are.  The
<       fsid will be that for the pseudo-fs in this example, so no
<       boundary.
---
>       *  Get current fsid to see where file system boundaries are.  The
>          fsid will be that for the pseudo-fs in this example, so no
>          boundary.
11587c11596
<    -  Current fh is for /this/is/the and is within pseudo-fs.
---
>       *  Current fh is for /this/is/the and is within pseudo-fs.
11591,11592c11600,11601
<    -  Current fh is for /this/is/the/path and is within a new, absent
<       file system, but ...
---
>       *  Current fh is for /this/is/the/path and is within a new, absent
>          file system, but ...
11594c11603
<    -  The client will never see the value of that fh.
---
>       *  The client will never see the value of that fh.
11598,11622c11607,11634
<    -  We are getting the fsid to know where the file system boundaries
<       are.  In this operation, the fsid will be different than that of
<       the parent directory (which in turn was retrieved in OP10).  Note
<       that the fsid we are given will not necessarily be preserved at
<       the new location.  That fsid might be different, and in fact the
<       fsid we have for this file system might be a valid fsid of a
<       different file system on that new server.
< 
<    -  In this particular case, we are pretty sure anyway that what has
<       moved is /this/is/the/path rather than /this/is/the since we have
<       the fsid of the latter and it is that of the pseudo-fs, which
<       presumably cannot move.  However, in other examples, we might not
<       have this kind of information to rely on (e.g., /this/is/the might
<       be a non-pseudo file system separate from /this/is/the/path), so
<       we need to have other reliable source information on the boundary
<       of the file system that is moved.  If, for example, the file
<       system /this/is had moved, we would have a case of migration
<       rather than referral, and once the boundaries of the migrated file
<       system was clear we could fetch fs_locations_info.
< 
<    -  We are fetching fs_locations_info because the fact that we got an
<       NFS4ERR_MOVED at this point means that it is most likely that this
<       is a referral and we need the destination.  Even if it is the case
<       that /this/is/the is a file system that has migrated, we will
<       still need the location information for that file system.
---
>       *  We are getting the fsid to know where the file system
>          boundaries are.  In this operation, the fsid will be different
>          than that of the parent directory (which in turn was retrieved
>          in OP10).  Note that the fsid we are given will not necessarily
>          be preserved at the new location.  That fsid might be
>          different, and in fact the fsid we have for this file system
>          might be a valid fsid of a different file system on that new
>          server.
> 
>       *  In this particular case, we are pretty sure anyway that what
>          has moved is /this/is/the/path rather than /this/is/the since
>          we have the fsid of the latter and it is that of the pseudo-fs,
>          which presumably cannot move.  However, in other examples, we
>          might not have this kind of information to rely on (e.g.,
>          /this/is/the might be a non-pseudo file system separate from
>          /this/is/the/path), so we need to have other reliable source
>          information on the boundary of the file system that is moved.
>          If, for example, the file system /this/is had moved, we would
>          have a case of migration rather than referral, and once the
>          boundaries of the migrated file system was clear we could fetch
>          fs_locations_info.
> 
>       *  We are fetching fs_locations_info because the fact that we got
>          an NFS4ERR_MOVED at this point means that it is most likely
>          that this is a referral and we need the destination.  Even if
>          it is the case that /this/is/the is a file system that has
>          migrated, we will still need the location information for that
>          file system.
11626,11629c11638,11642
<    -  Fails because current fh is in an absent file system at the start
<       of the operation, and the specification makes no exception for
<       GETFH.  Note that this means the server will never send the client
<       a filehandle from within an absent file system.
---
>       *  Fails because current fh is in an absent file system at the
>          start of the operation, and the specification makes no
>          exception for GETFH.  Note that this means the server will
>          never send the client a filehandle from within an absent file
>          system.
11755,11756c11768
<       system)
<    o  fsid (value: unique value within referring server)
---
>       system) o fsid (value: unique value within referring server)
12192,12197c12204,12209
<       system, a client might choose to transfer immediately to another
<       replica, or it may reference the current file system and only
<       transition when a migration event occurs.  Similarly, when this
<       flag appears as a replica in the referral, clients would likely
<       avoid being referred to this instance whenever there is another
<       choice.
---
>          system, a client might choose to transfer immediately to
>          another replica, or it may reference the current file system
>          and only transition when a migration event occurs.  Similarly,
>          when this flag appears as a replica in the referral, clients
>          would likely avoid being referred to this instance whenever
>          there is another choice.
12211,12219c12223,12231
<       existing files with which it has continuing connection (it is free
<       to simply forget cached filehandles).  If the client remembers the
<       directory filehandle associated with each open file, it may
<       proceed upward using LOOKUPP to find the new file system
<       boundaries.  Note that in the event of a referral, there will not
<       be any such files and so these actions will not be performed.
<       Instead, a reference to a portion of the original file system now
<       split off into other file systems will encounter an fsid change
<       and possibly a further referral.
---
>          existing files with which it has continuing connection (it is
>          free to simply forget cached filehandles).  If the client
>          remembers the directory filehandle associated with each open
>          file, it may proceed upward using LOOKUPP to find the new file
>          system boundaries.  Note that in the event of a referral, there
>          will not be any such files and so these actions will not be
>          performed.  Instead, a reference to a portion of the original
>          file system now split off into other file systems will
>          encounter an fsid change and possibly a further referral.
12222,12234c12234,12247
<       into two, it can prevent the disruption of running applications by
<       presenting the two file systems as a single one until a convenient
<       point to recognize the transition, such as a restart.  This would
<       require a mapping from the server's fsids to fsids as seen by the
<       client, but this is already necessary for other reasons.  As noted
<       above, existing fileids within the two descendant file systems
<       will not conflict.  Providing non-conflicting fileids for newly
<       created files on the split file systems is the responsibility of
<       the server (or servers working in concert).  The server can encode
<       filehandles such that filehandles generated before the split event
<       can be discerned from those generated after the split, allowing
<       the server to determine when the need for emulating two file
<       systems as one is over.
---
>          into two, it can prevent the disruption of running applications
>          by presenting the two file systems as a single one until a
>          convenient point to recognize the transition, such as a
>          restart.  This would require a mapping from the server's fsids
>          to fsids as seen by the client, but this is already necessary
>          for other reasons.  As noted above, existing fileids within the
>          two descendant file systems will not conflict.  Providing non-
>          conflicting fileids for newly created files on the split file
>          systems is the responsibility of the server (or servers working
>          in concert).  The server can encode filehandles such that
>          filehandles generated before the split event can be discerned
>          from those generated after the split, allowing the server to
>          determine when the need for emulating two file systems as one
>          is over.
12237,12239c12250,12252
<       of referral, it would generally be of little interest to the
<       client, since the client is not expected to have information
<       regarding the current contents of the absent file system.
---
>          of referral, it would generally be of little interest to the
>          client, since the client is not expected to have information
>          regarding the current contents of the absent file system.
13140a13154
> 
13628c13642,13643
<        returns NFS4ERR_RETURNCONFLICT.
---
> 
>           returns NFS4ERR_RETURNCONFLICT.
13668,13669c13683,13684
<    returned from CREATE_SESSION of the i'th session.  The reason for "-
<    1" is to allow for the required SEQUENCE operation.  The server MAY
---
>    returned from CREATE_SESSION of the i'th session.  The reason for
>    "-1" is to allow for the required SEQUENCE operation.  The server MAY
13977,13982c13992,13997
<       LAYOUTCOMMIT in reclaim mode, which the metadata server will
<       accept as long as it is in its grace period.  The use of
<       LAYOUTCOMMIT in reclaim mode informs the metadata server that the
<       layout has changed.  It is critical that the metadata server
<       receive this information before its grace period ends, and thus
<       before it starts allowing updates to the file system.
---
>          LAYOUTCOMMIT in reclaim mode, which the metadata server will
>          accept as long as it is in its grace period.  The use of
>          LAYOUTCOMMIT in reclaim mode informs the metadata server that
>          the layout has changed.  It is critical that the metadata
>          server receive this information before its grace period ends,
>          and thus before it starts allowing updates to the file system.
13985,13989c14000,14004
<       loca_reclaim field of the operation's arguments (Section 18.42.1)
<       to TRUE.  During the metadata server's recovery grace period (and
<       only during the recovery grace period) the metadata server is
<       prepared to accept LAYOUTCOMMIT requests with the loca_reclaim
<       field set to TRUE.
---
>          loca_reclaim field of the operation's arguments
>          (Section 18.42.1) to TRUE.  During the metadata server's
>          recovery grace period (and only during the recovery grace
>          period) the metadata server is prepared to accept LAYOUTCOMMIT
>          requests with the loca_reclaim field set to TRUE.
13992,14014c14007,14030
<       changes to the layout that occurred prior to the restart of the
<       metadata server.  The metadata server applies some consistency
<       checks on the loca_layoutupdate field of the arguments to
<       determine whether the client can commit the data written to the
<       storage device to the file system.  The loca_layoutupdate field is
<       of data type layoutupdate4 and contains layout-type-specific
<       content (in the lou_body field of loca_layoutupdate).  The layout-
<       type-specific information that loca_layoutupdate might have is
<       discussed in Section 12.5.4.3.  If the metadata server's
<       consistency checks on loca_layoutupdate succeed, then the metadata
<       server MUST commit the data (as described by the loca_offset,
<       loca_length, and loca_layoutupdate fields of the arguments) that
<       was written to the storage device.  If the metadata server's
<       consistency checks on loca_layoutupdate fail, the metadata server
<       rejects the LAYOUTCOMMIT operation and makes no changes to the
<       file system.  However, any time LAYOUTCOMMIT with loca_reclaim
<       TRUE fails, the pNFS client has lost all the data in the range
<       defined by <loca_offset, loca_length>.  A client can defend
<       against this risk by caching all data, whether written
<       synchronously or asynchronously in its memory, and by not
<       releasing the cached data until a successful LAYOUTCOMMIT.  This
<       condition does not hold true for all layout types; for example,
<       file-based storage devices need not suffer from this limitation.
---
>          changes to the layout that occurred prior to the restart of the
>          metadata server.  The metadata server applies some consistency
>          checks on the loca_layoutupdate field of the arguments to
>          determine whether the client can commit the data written to the
>          storage device to the file system.  The loca_layoutupdate field
>          is of data type layoutupdate4 and contains layout-type-specific
>          content (in the lou_body field of loca_layoutupdate).  The
>          layout- type-specific information that loca_layoutupdate might
>          have is discussed in Section 12.5.4.3.  If the metadata
>          server's consistency checks on loca_layoutupdate succeed, then
>          the metadata server MUST commit the data (as described by the
>          loca_offset, loca_length, and loca_layoutupdate fields of the
>          arguments) that was written to the storage device.  If the
>          metadata server's consistency checks on loca_layoutupdate fail,
>          the metadata server rejects the LAYOUTCOMMIT operation and
>          makes no changes to the file system.  However, any time
>          LAYOUTCOMMIT with loca_reclaim TRUE fails, the pNFS client has
>          lost all the data in the range defined by <loca_offset,
>          loca_length>.  A client can defend against this risk by caching
>          all data, whether written synchronously or asynchronously in
>          its memory, and by not releasing the cached data until a
>          successful LAYOUTCOMMIT.  This condition does not hold true for
>          all layout types; for example, file-based storage devices need
>          not suffer from this limitation.
14145,14147c14161,14163
<    should examine the layout specification, such as the NFSv4.1/
<    file-based layout (Section 13) of this document, the blocks layout
<    [41], and objects layout [40].
---
>    should examine the layout specification, such as the NFSv4.1/ file-
>    based layout (Section 13) of this document, the blocks layout [41],
>    and objects layout [40].
14206,14207c14222,14223
<    client ID, the server SHOULD return with (EXCHGID4_FLAG_USE_PNFS_MDS
<    | EXCHGID4_FLAG_USE_PNFS_DS) set.
---
>    client ID, the server SHOULD return with
>    (EXCHGID4_FLAG_USE_PNFS_MDS | EXCHGID4_FLAG_USE_PNFS_DS) set.
14308a14325
> 
14332,14336c14349,14353
<    const NFL4_UFLG_DENSE           = 0x00000001;
<    const NFL4_UFLG_COMMIT_THRU_MDS = 0x00000002;
<    const NFL4_UFLG_STRIPE_UNIT_SIZE_MASK
<                                    = 0xFFFFFFC0;
< 
---
>                                    const NFL4_UFLG_DENSE = 0x00000001;
>                                    const NFL4_UFLG_COMMIT_THRU_MDS =
>                                    0x00000002; const
>                                    NFL4_UFLG_STRIPE_UNIT_SIZE_MASK =
>                                    0xFFFFFFC0;
14342,14343c14359,14360
<            NFLH4_CARE_COMMIT_THRU_MDS
<                                    = NFL4_UFLG_COMMIT_THRU_MDS,
---
>       NFLH4_CARE_COMMIT_THRU_MDS
>                               = NFL4_UFLG_COMMIT_THRU_MDS,
14345,14346c14362,14363
<            NFLH4_CARE_STRIPE_UNIT_SIZE
<                                    = 0x00000040,
---
>       NFLH4_CARE_STRIPE_UNIT_SIZE
>                               = 0x00000040,
14458,14460c14475,14478
<        to convert the client's logical I/O offset to an offset on the
<        file on the data server corresponding to the stripe unit number
<        (see Section 13.4.4).
---
> 
>           to convert the client's logical I/O offset to an offset on the
>           file on the data server corresponding to the stripe unit
>           number (see Section 13.4.4).
14463,14465c14481,14484
<        For example, via the LAYOUTGET operation, a client might request
<        a layout starting at offset 1000 of a file that has its striping
<        pattern start at offset zero.
---
> 
>           For example, via the LAYOUTGET operation, a client might
>           request a layout starting at offset 1000 of a file that has
>           its striping pattern start at offset zero.
14487c14506
<           See the discussion on sparse packing in Section 13.4.4.
---
>              See the discussion on sparse packing in Section 13.4.4.
14505,14509c14524,14529
<           by the presence of multiple objects of data type layout4
<           (either returned in one or multiple LAYOUTGET operations), and
<           a data server is the target of a unit of one pattern and
<           another unit of another pattern, then each reference to each
<           data server MUST use a different filehandle.
---
> 
>              by the presence of multiple objects of data type layout4
>              (either returned in one or multiple LAYOUTGET operations),
>              and a data server is the target of a unit of one pattern
>              and another unit of another pattern, then each reference to
>              each data server MUST use a different filehandle.
14550,14552c14570
<         case 0:
<           fh = filehandle returned by OPEN;
<           break;
---
>         case 0: fh = filehandle returned by OPEN; break;
14554,14557c14572
<         default:
<           throw a fatal exception;
<           break;
<       }
---
>         default: throw a fatal exception; break;
14558a14574
>            }
14636a14653
>                     |     |            |              |
14659,14662c14676,14678
<         default:
<           throw a fatal exception;
<           break;
<       }
---
>         default: throw a fatal exception; break;
> 
>            }
14690c14706,14707
<    Suppose the striping index array is:
---
> 
>       Suppose the striping index array is:
14752a14770
>                     |     |            |              |
15026,15037c15044,15056
<       maintain the current NFSv4.1 commit and recovery model, the data
<       servers MUST return a common writeverf verifier in all WRITE
<       responses for a given file layout, and the metadata server's
<       COMMIT implementation must return the same writeverf.  The value
<       of the writeverf verifier MUST be changed at the metadata server
<       or any data server that is referenced in the layout, whenever
<       there is a server event that can possibly lead to loss of
<       uncommitted data.  The scope of the verifier can be for a file or
<       for the entire pNFS server.  It might be more difficult for the
<       server to maintain the verifier at the file level, but the benefit
<       is that only events that impact a given file will require recovery
<       action.
---
> 
>          maintain the current NFSv4.1 commit and recovery model, the
>          data servers MUST return a common writeverf verifier in all
>          WRITE responses for a given file layout, and the metadata
>          server's COMMIT implementation must return the same writeverf.
>          The value of the writeverf verifier MUST be changed at the
>          metadata server or any data server that is referenced in the
>          layout, whenever there is a server event that can possibly lead
>          to loss of uncommitted data.  The scope of the verifier can be
>          for a file or for the entire pNFS server.  It might be more
>          difficult for the server to maintain the verifier at the file
>          level, but the benefit is that only events that impact a given
>          file will require recovery action.
15486d15504
< 
15590c15608
<    const FSCHARSET_CAP4_ALLOWS_ONLY_UTF8   = 0x2;
---
>       const FSCHARSET_CAP4_ALLOWS_ONLY_UTF8 = 0x2;
15592c15610
<    typedef uint32_t        fs_charset_cap4;
---
>    typedef uint32_t  fs_charset_cap4;
15752a15771
>     |                                   |        |                   |
15755c15774
<                                   Table 5
---
>                                   Table 4
16567,16569c16586,16587
<    o  The invalid operation: ILLEGAL.
< 
<               Valid Error Returns for Each Protocol Operation
---
>    o  The invalid operation: ILLEGAL.  Valid Error Returns for Each
>       Protocol Operation
17262a17281
>    |                      |                                            |
17265c17284
<                                   Table 6
---
>                                   Table 5
17276,17397c17295
<    +-------------------------+-----------------------------------------+
<    | Callback Operation      | Errors                                  |
<    +-------------------------+-----------------------------------------+
<    | CB_GETATTR              | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,      |
<    |                         | NFS4ERR_DELAY, NFS4ERR_INVAL,           |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SERVERFAULT,                    |
<    |                         | NFS4ERR_TOO_MANY_OPS,                   |
<    | CB_ILLEGAL              | NFS4ERR_BADXDR, NFS4ERR_OP_ILLEGAL      |
<    | CB_LAYOUTRECALL         | NFS4ERR_BADHANDLE, NFS4ERR_BADIOMODE,   |
<    |                         | NFS4ERR_BADXDR, NFS4ERR_BAD_STATEID,    |
<    |                         | NFS4ERR_DELAY, NFS4ERR_INVAL,           |
<    |                         | NFS4ERR_NOMATCHING_LAYOUT,              |
<    |                         | NFS4ERR_NOTSUPP,                        |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_TOO_MANY_OPS,                   |
<    |                         | NFS4ERR_UNKNOWN_LAYOUTTYPE,             |
<    |                         | NFS4ERR_WRONG_TYPE                      |
<    | CB_NOTIFY               | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,      |
<    |                         | NFS4ERR_BAD_STATEID, NFS4ERR_DELAY,     |
<    |                         | NFS4ERR_INVAL, NFS4ERR_NOTSUPP,         |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SERVERFAULT,                    |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    | CB_NOTIFY_DEVICEID      | NFS4ERR_BADXDR, NFS4ERR_DELAY,          |
<    |                         | NFS4ERR_INVAL, NFS4ERR_NOTSUPP,         |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SERVERFAULT,                    |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    | CB_NOTIFY_LOCK          | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,      |
<    |                         | NFS4ERR_BAD_STATEID, NFS4ERR_DELAY,     |
<    |                         | NFS4ERR_NOTSUPP,                        |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SERVERFAULT,                    |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    | CB_PUSH_DELEG           | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,      |
<    |                         | NFS4ERR_DELAY, NFS4ERR_INVAL,           |
<    |                         | NFS4ERR_NOTSUPP,                        |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REJECT_DELEG,                   |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SERVERFAULT,                    |
<    |                         | NFS4ERR_TOO_MANY_OPS,                   |
<    |                         | NFS4ERR_WRONG_TYPE                      |
<    | CB_RECALL               | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,      |
<    |                         | NFS4ERR_BAD_STATEID, NFS4ERR_DELAY,     |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SERVERFAULT,                    |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    | CB_RECALL_ANY           | NFS4ERR_BADXDR, NFS4ERR_DELAY,          |
<    |                         | NFS4ERR_INVAL,                          |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    | CB_RECALLABLE_OBJ_AVAIL | NFS4ERR_BADXDR, NFS4ERR_DELAY,          |
<    |                         | NFS4ERR_INVAL, NFS4ERR_NOTSUPP,         |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SERVERFAULT,                    |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    | CB_RECALL_SLOT          | NFS4ERR_BADXDR, NFS4ERR_BAD_HIGH_SLOT,  |
<    |                         | NFS4ERR_DELAY,                          |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    | CB_SEQUENCE             | NFS4ERR_BADSESSION, NFS4ERR_BADSLOT,    |
<    |                         | NFS4ERR_BADXDR, NFS4ERR_BAD_HIGH_SLOT,  |
<    |                         | NFS4ERR_CONN_NOT_BOUND_TO_SESSION,      |
<    |                         | NFS4ERR_DELAY, NFS4ERR_REP_TOO_BIG,     |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SEQUENCE_POS,                   |
<    |                         | NFS4ERR_SEQ_FALSE_RETRY,                |
<    |                         | NFS4ERR_SEQ_MISORDERED,                 |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    | CB_WANTS_CANCELLED      | NFS4ERR_BADXDR, NFS4ERR_DELAY,          |
<    |                         | NFS4ERR_NOTSUPP,                        |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SERVERFAULT,                    |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    +-------------------------+-----------------------------------------+
---
>    +-------------------------+----------------------------------------+
17399c17297,17420
<                                   Table 7
---
>    | Callback Operation      | Errors                                 |
>    +-------------------------+----------------------------------------+
>    | CB_GETATTR              | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,     |
>    |                         | NFS4ERR_DELAY, NFS4ERR_INVAL,          |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SERVERFAULT,                   |
>    |                         | NFS4ERR_TOO_MANY_OPS,                  |
>    | CB_ILLEGAL              | NFS4ERR_BADXDR, NFS4ERR_OP_ILLEGAL     |
>    | CB_LAYOUTRECALL         | NFS4ERR_BADHANDLE, NFS4ERR_BADIOMODE,  |
>    |                         | NFS4ERR_BADXDR, NFS4ERR_BAD_STATEID,   |
>    |                         | NFS4ERR_DELAY, NFS4ERR_INVAL,          |
>    |                         | NFS4ERR_NOMATCHING_LAYOUT,             |
>    |                         | NFS4ERR_NOTSUPP,                       |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_TOO_MANY_OPS,                  |
>    |                         | NFS4ERR_UNKNOWN_LAYOUTTYPE,            |
>    |                         | NFS4ERR_WRONG_TYPE                     |
>    | CB_NOTIFY               | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,     |
>    |                         | NFS4ERR_BAD_STATEID, NFS4ERR_DELAY,    |
>    |                         | NFS4ERR_INVAL, NFS4ERR_NOTSUPP,        |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SERVERFAULT,                   |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    | CB_NOTIFY_DEVICEID      | NFS4ERR_BADXDR, NFS4ERR_DELAY,         |
>    |                         | NFS4ERR_INVAL, NFS4ERR_NOTSUPP,        |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SERVERFAULT,                   |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    | CB_NOTIFY_LOCK          | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,     |
>    |                         | NFS4ERR_BAD_STATEID, NFS4ERR_DELAY,    |
>    |                         | NFS4ERR_NOTSUPP,                       |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SERVERFAULT,                   |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    | CB_PUSH_DELEG           | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,     |
>    |                         | NFS4ERR_DELAY, NFS4ERR_INVAL,          |
>    |                         | NFS4ERR_NOTSUPP,                       |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REJECT_DELEG,                  |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SERVERFAULT,                   |
>    |                         | NFS4ERR_TOO_MANY_OPS,                  |
>    |                         | NFS4ERR_WRONG_TYPE                     |
>    | CB_RECALL               | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,     |
>    |                         | NFS4ERR_BAD_STATEID, NFS4ERR_DELAY,    |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SERVERFAULT,                   |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    | CB_RECALL_ANY           | NFS4ERR_BADXDR, NFS4ERR_DELAY,         |
>    |                         | NFS4ERR_INVAL,                         |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    | CB_RECALLABLE_OBJ_AVAIL | NFS4ERR_BADXDR, NFS4ERR_DELAY,         |
>    |                         | NFS4ERR_INVAL, NFS4ERR_NOTSUPP,        |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SERVERFAULT,                   |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    | CB_RECALL_SLOT          | NFS4ERR_BADXDR, NFS4ERR_BAD_HIGH_SLOT, |
>    |                         | NFS4ERR_DELAY,                         |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    | CB_SEQUENCE             | NFS4ERR_BADSESSION, NFS4ERR_BADSLOT,   |
>    |                         | NFS4ERR_BADXDR, NFS4ERR_BAD_HIGH_SLOT, |
>    |                         | NFS4ERR_CONN_NOT_BOUND_TO_SESSION,     |
>    |                         | NFS4ERR_DELAY, NFS4ERR_REP_TOO_BIG,    |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SEQUENCE_POS,                  |
>    |                         | NFS4ERR_SEQ_FALSE_RETRY,               |
>    |                         | NFS4ERR_SEQ_MISORDERED,                |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    | CB_WANTS_CANCELLED      | NFS4ERR_BADXDR, NFS4ERR_DELAY,         |
>    |                         | NFS4ERR_NOTSUPP,                       |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SERVERFAULT,                   |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    |                         |                                        |
>    +-------------------------+----------------------------------------+
> 
>                                   Table 6
17999a18021
>    |                                   |                               |
18002c18024
<                                   Table 8
---
>                                   Table 7
18118,18120c18140,18141
<     case OP_OPEN_DOWNGRADE:
<                            OPEN_DOWNGRADE4args opopen_downgrade;
< 
---
>       case OP_OPEN_DOWNGRADE:
>                              OPEN_DOWNGRADE4args opopen_downgrade;
18155,18194c18176,18214
<     case OP_BIND_CONN_TO_SESSION:
<                            BIND_CONN_TO_SESSION4args
<                            opbind_conn_to_session;
< 
<     case OP_EXCHANGE_ID:   EXCHANGE_ID4args opexchange_id;
< 
<     case OP_CREATE_SESSION:
<                            CREATE_SESSION4args opcreate_session;
< 
<     case OP_DESTROY_SESSION:
<                            DESTROY_SESSION4args opdestroy_session;
< 
<     case OP_FREE_STATEID:  FREE_STATEID4args opfree_stateid;
< 
<     case OP_GET_DIR_DELEGATION:
<                            GET_DIR_DELEGATION4args
<                                    opget_dir_delegation;
< 
<     case OP_GETDEVICEINFO: GETDEVICEINFO4args opgetdeviceinfo;
<     case OP_GETDEVICELIST: GETDEVICELIST4args opgetdevicelist;
<     case OP_LAYOUTCOMMIT:  LAYOUTCOMMIT4args oplayoutcommit;
<     case OP_LAYOUTGET:     LAYOUTGET4args oplayoutget;
<     case OP_LAYOUTRETURN:  LAYOUTRETURN4args oplayoutreturn;
< 
<     case OP_SECINFO_NO_NAME:
<                            SECINFO_NO_NAME4args opsecinfo_no_name;
< 
<     case OP_SEQUENCE:      SEQUENCE4args opsequence;
<     case OP_SET_SSV:       SET_SSV4args opset_ssv;
<     case OP_TEST_STATEID:  TEST_STATEID4args optest_stateid;
< 
<     case OP_WANT_DELEGATION:
<                            WANT_DELEGATION4args opwant_delegation;
<     case OP_DESTROY_CLIENTID:
<                            DESTROY_CLIENTID4args
<                                    opdestroy_clientid;
< 
<     case OP_RECLAIM_COMPLETE:
<                            RECLAIM_COMPLETE4args
<                                    opreclaim_complete;
---
>       case OP_BIND_CONN_TO_SESSION:
>                              BIND_CONN_TO_SESSION4args
>                              opbind_conn_to_session;
> 
>       case OP_EXCHANGE_ID:   EXCHANGE_ID4args opexchange_id;
> 
>       case OP_CREATE_SESSION:
>                              CREATE_SESSION4args opcreate_session;
> 
>       case OP_DESTROY_SESSION:
>                              DESTROY_SESSION4args opdestroy_session;
>       case OP_FREE_STATEID:  FREE_STATEID4args opfree_stateid;
> 
>       case OP_GET_DIR_DELEGATION:
>                              GET_DIR_DELEGATION4args
>                              opget_dir_delegation;
> 
>     case OP_GETDEVICEINFO: GETDEVICEINFO4args opgetdeviceinfo; case
>     OP_GETDEVICELIST: GETDEVICELIST4args opgetdevicelist; case
>     OP_LAYOUTCOMMIT: LAYOUTCOMMIT4args oplayoutcommit; case
>     OP_LAYOUTGET: LAYOUTGET4args oplayoutget; case OP_LAYOUTRETURN:
>     LAYOUTRETURN4args oplayoutreturn;
> 
>       case OP_SECINFO_NO_NAME:
>                              SECINFO_NO_NAME4args opsecinfo_no_name;
> 
>       case OP_SEQUENCE:      SEQUENCE4args opsequence;
>                              case OP_SET_SSV: SET_SSV4args opset_ssv;
>                              case OP_TEST_STATEID: TEST_STATEID4args
>                              optest_stateid;
> 
>       case OP_WANT_DELEGATION:
>                              WANT_DELEGATION4args opwant_delegation;
> 
>       case OP_DESTROY_CLIENTID:
>                              DESTROY_CLIENTID4args opdestroy_clientid;
> 
>       case OP_RECLAIM_COMPLETE:
>                              RECLAIM_COMPLETE4args opreclaim_complete;
18229,18232c18249,18250
<     case OP_OPEN_DOWNGRADE:
<                            OPEN_DOWNGRADE4res
<                                    opopen_downgrade;
< 
---
>       case OP_OPEN_DOWNGRADE:
>                              OPEN_DOWNGRADE4res opopen_downgrade;
18264,18266c18282,18287
<     case OP_BACKCHANNEL_CTL:
<                            BACKCHANNEL_CTL4res
<                                    opbackchannel_ctl;
---
>       case OP_BACKCHANNEL_CTL:
>                              BACKCHANNEL_CTL4res opbackchannel_ctl;
> 
>       case OP_BIND_CONN_TO_SESSION:
>                              BIND_CONN_TO_SESSION4res
>                              opbind_conn_to_session;
18268,18270c18289
<     case OP_BIND_CONN_TO_SESSION:
<                            BIND_CONN_TO_SESSION4res
<                                     opbind_conn_to_session;
---
>       case OP_EXCHANGE_ID:   EXCHANGE_ID4res opexchange_id;
18272c18291,18292
<     case OP_EXCHANGE_ID:   EXCHANGE_ID4res opexchange_id;
---
>       case OP_CREATE_SESSION:
>                              CREATE_SESSION4res opcreate_session;
18274,18276c18294
<     case OP_CREATE_SESSION:
<                            CREATE_SESSION4res
<                                    opcreate_session;
---
>       case OP_DESTROY_SESSION:
18278,18282c18296,18298
<     case OP_DESTROY_SESSION:
<                            DESTROY_SESSION4res
<                                    opdestroy_session;
<     case OP_FREE_STATEID:  FREE_STATEID4res
<                                    opfree_stateid;
---
>                              DESTROY_SESSION4res opdestroy_session; case
>                              OP_FREE_STATEID: FREE_STATEID4res
>                              opfree_stateid;
18284,18286c18300,18302
<     case OP_GET_DIR_DELEGATION:
<                            GET_DIR_DELEGATION4res
<                                    opget_dir_delegation;
---
>       case OP_GET_DIR_DELEGATION:
>                              GET_DIR_DELEGATION4res
>                              opget_dir_delegation;
18288,18289c18304,18305
<     case OP_GETDEVICEINFO: GETDEVICEINFO4res
<                                    opgetdeviceinfo;
---
>       case OP_GETDEVICEINFO: GETDEVICEINFO4res
>                              opgetdeviceinfo;
18291,18292c18307,18308
<     case OP_GETDEVICELIST: GETDEVICELIST4res
<                                    opgetdevicelist;
---
>       case OP_GETDEVICELIST: GETDEVICELIST4res
>                              opgetdevicelist;
18294,18296c18310,18313
<     case OP_LAYOUTCOMMIT:  LAYOUTCOMMIT4res oplayoutcommit;
<     case OP_LAYOUTGET:     LAYOUTGET4res oplayoutget;
<     case OP_LAYOUTRETURN:  LAYOUTRETURN4res oplayoutreturn;
---
>       case OP_LAYOUTCOMMIT:  LAYOUTCOMMIT4res oplayoutcommit;
>                              case OP_LAYOUTGET: LAYOUTGET4res
>                              oplayoutget; case OP_LAYOUTRETURN:
>                              LAYOUTRETURN4res oplayoutreturn;
18298,18300c18315,18316
<     case OP_SECINFO_NO_NAME:
<                            SECINFO_NO_NAME4res
<                                    opsecinfo_no_name;
---
>       case OP_SECINFO_NO_NAME:
>                              SECINFO_NO_NAME4res opsecinfo_no_name;
18302,18304c18318,18321
<     case OP_SEQUENCE:      SEQUENCE4res opsequence;
<     case OP_SET_SSV:       SET_SSV4res opset_ssv;
<     case OP_TEST_STATEID:  TEST_STATEID4res optest_stateid;
---
>       case OP_SEQUENCE:      SEQUENCE4res opsequence;
>                              case OP_SET_SSV: SET_SSV4res opset_ssv;
>                              case OP_TEST_STATEID: TEST_STATEID4res
>                              optest_stateid;
18306,18308c18323,18324
<     case OP_WANT_DELEGATION:
<                            WANT_DELEGATION4res
<                                    opwant_delegation;
---
>       case OP_WANT_DELEGATION:
>                              WANT_DELEGATION4res opwant_delegation;
18310c18326
<     case OP_DESTROY_CLIENTID:
---
>       case OP_DESTROY_CLIENTID:
18312,18313c18328
<                            DESTROY_CLIENTID4res
<                                    opdestroy_clientid;
---
>                              DESTROY_CLIENTID4res opdestroy_clientid;
18315,18317c18330,18331
<     case OP_RECLAIM_COMPLETE:
<                            RECLAIM_COMPLETE4res
<                                    opreclaim_complete;
---
>       case OP_RECLAIM_COMPLETE:
>                              RECLAIM_COMPLETE4res opreclaim_complete;
18419,18424c18433,18437
<                                  Figure 2
<    In this example, the PUTFH (Section 18.19) operation explicitly sets
<    the current filehandle value while the result of each LOOKUP
<    operation sets the current filehandle value to the resultant file
<    system object.  Also, the client is able to insert GETATTR operations
<    using the current filehandle as an argument.
---
>       Figure 2: In this example, the PUTFH (Section 18.19) operation
>    explicitly sets the current filehandle value while the result of each
>     LOOKUP operation sets the current filehandle value to the resultant
>       file system object.  Also, the client is able to insert GETATTR
>           operations using the current filehandle as an argument.
18495,18496c18508,18509
<    operation.  This allows the client to explicitly surround a single
<    I/O operation with a lock and its appropriate stateid to guarantee
---
>    operation.  This allows the client to explicitly surround a single I/
>    O operation with a lock and its appropriate stateid to guarantee
18514,18518c18527,18530
<                                  Figure 5
<    The final example shows a disallowed use of the current stateid.  The
<    client is attempting to implicitly pass an anonymous special stateid,
<    (0,0), to the READ operation.  The server MUST return
<    NFS4ERR_BAD_STATEID in the reply to the READ operation.
---
>      Figure 5: The final example shows a disallowed use of the current
>     stateid.  The client is attempting to implicitly pass an anonymous
>       special stateid, (0,0), to the READ operation.  The server MUST
>       return NFS4ERR_BAD_STATEID in the reply to the READ operation.
18535,18550c18547,18563
<    +------------------------------+------------------------------------+
<    | Error                        | Notes                              |
<    +------------------------------+------------------------------------+
<    | NFS4ERR_BADCHAR              | The tag argument has a character   |
<    |                              | the replier does not support.      |
<    | NFS4ERR_BADXDR               |                                    |
<    | NFS4ERR_DELAY                |                                    |
<    | NFS4ERR_INVAL                | The tag argument is not in UTF-8   |
<    |                              | encoding.                          |
<    | NFS4ERR_MINOR_VERS_MISMATCH  |                                    |
<    | NFS4ERR_SERVERFAULT          |                                    |
<    | NFS4ERR_TOO_MANY_OPS         |                                    |
<    | NFS4ERR_REP_TOO_BIG          |                                    |
<    | NFS4ERR_REP_TOO_BIG_TO_CACHE |                                    |
<    | NFS4ERR_REQ_TOO_BIG          |                                    |
<    +------------------------------+------------------------------------+
---
>     +------------------------------+----------------------------------+
>     | Error                        | Notes                            |
>     +------------------------------+----------------------------------+
>     | NFS4ERR_BADCHAR              | The tag argument has a character |
>     |                              | the replier does not support.    |
>     | NFS4ERR_BADXDR               |                                  |
>     | NFS4ERR_DELAY                |                                  |
>     | NFS4ERR_INVAL                | The tag argument is not in UTF-8 |
>     |                              | encoding.                        |
>     | NFS4ERR_MINOR_VERS_MISMATCH  |                                  |
>     | NFS4ERR_SERVERFAULT          |                                  |
>     | NFS4ERR_TOO_MANY_OPS         |                                  |
>     | NFS4ERR_REP_TOO_BIG          |                                  |
>     | NFS4ERR_REP_TOO_BIG_TO_CACHE |                                  |
>     | NFS4ERR_REQ_TOO_BIG          |                                  |
>     |                              |                                  |
>     +------------------------------+----------------------------------+
18552c18565
<                                   Table 9
---
>                                   Table 8
18609,18611c18622
<    DDELG  Directory Delegations
< 
<                                 Operations
---
>       DDELG Directory Delegations Operations
18613,18677c18624,18740
<    +----------------------+------------+--------------+----------------+
<    | Operation            | REQ, REC,  | Feature      | Definition     |
<    |                      | OPT, or    | (REQ, REC,   |                |
<    |                      | MNI        | or OPT)      |                |
<    +----------------------+------------+--------------+----------------+
<    | ACCESS               | REQ        |              | Section 18.1   |
<    | BACKCHANNEL_CTL      | REQ        |              | Section 18.33  |
<    | BIND_CONN_TO_SESSION | REQ        |              | Section 18.34  |
<    | CLOSE                | REQ        |              | Section 18.2   |
<    | COMMIT               | REQ        |              | Section 18.3   |
<    | CREATE               | REQ        |              | Section 18.4   |
<    | CREATE_SESSION       | REQ        |              | Section 18.36  |
<    | DELEGPURGE           | OPT        | FDELG (REQ)  | Section 18.5   |
<    | DELEGRETURN          | OPT        | FDELG,       | Section 18.6   |
<    |                      |            | DDELG, pNFS  |                |
<    |                      |            | (REQ)        |                |
<    | DESTROY_CLIENTID     | REQ        |              | Section 18.50  |
<    | DESTROY_SESSION      | REQ        |              | Section 18.37  |
<    | EXCHANGE_ID          | REQ        |              | Section 18.35  |
<    | FREE_STATEID         | REQ        |              | Section 18.38  |
<    | GETATTR              | REQ        |              | Section 18.7   |
<    | GETDEVICEINFO        | OPT        | pNFS (REQ)   | Section 18.40  |
<    | GETDEVICELIST        | OPT        | pNFS (OPT)   | Section 18.41  |
<    | GETFH                | REQ        |              | Section 18.8   |
<    | GET_DIR_DELEGATION   | OPT        | DDELG (REQ)  | Section 18.39  |
<    | LAYOUTCOMMIT         | OPT        | pNFS (REQ)   | Section 18.42  |
<    | LAYOUTGET            | OPT        | pNFS (REQ)   | Section 18.43  |
<    | LAYOUTRETURN         | OPT        | pNFS (REQ)   | Section 18.44  |
<    | LINK                 | OPT        |              | Section 18.9   |
<    | LOCK                 | REQ        |              | Section 18.10  |
<    | LOCKT                | REQ        |              | Section 18.11  |
<    | LOCKU                | REQ        |              | Section 18.12  |
<    | LOOKUP               | REQ        |              | Section 18.13  |
<    | LOOKUPP              | REQ        |              | Section 18.14  |
<    | NVERIFY              | REQ        |              | Section 18.15  |
<    | OPEN                 | REQ        |              | Section 18.16  |
<    | OPENATTR             | OPT        |              | Section 18.17  |
<    | OPEN_CONFIRM         | MNI        |              | N/A            |
<    | OPEN_DOWNGRADE       | REQ        |              | Section 18.18  |
<    | PUTFH                | REQ        |              | Section 18.19  |
<    | PUTPUBFH             | REQ        |              | Section 18.20  |
<    | PUTROOTFH            | REQ        |              | Section 18.21  |
<    | READ                 | REQ        |              | Section 18.22  |
<    | READDIR              | REQ        |              | Section 18.23  |
<    | READLINK             | OPT        |              | Section 18.24  |
<    | RECLAIM_COMPLETE     | REQ        |              | Section 18.51  |
<    | RELEASE_LOCKOWNER    | MNI        |              | N/A            |
<    | REMOVE               | REQ        |              | Section 18.25  |
<    | RENAME               | REQ        |              | Section 18.26  |
<    | RENEW                | MNI        |              | N/A            |
<    | RESTOREFH            | REQ        |              | Section 18.27  |
<    | SAVEFH               | REQ        |              | Section 18.28  |
<    | SECINFO              | REQ        |              | Section 18.29  |
<    | SECINFO_NO_NAME      | REC        | pNFS file    | Section 18.45, |
<    |                      |            | layout (REQ) | Section 13.12  |
<    | SEQUENCE             | REQ        |              | Section 18.46  |
<    | SETATTR              | REQ        |              | Section 18.30  |
<    | SETCLIENTID          | MNI        |              | N/A            |
<    | SETCLIENTID_CONFIRM  | MNI        |              | N/A            |
<    | SET_SSV              | REQ        |              | Section 18.47  |
<    | TEST_STATEID         | REQ        |              | Section 18.48  |
<    | VERIFY               | REQ        |              | Section 18.31  |
<    | WANT_DELEGATION      | OPT        | FDELG (OPT)  | Section 18.49  |
<    | WRITE                | REQ        |              | Section 18.32  |
<    +----------------------+------------+--------------+----------------+
---
>    +----------------------+--------------+----------------+------------+
>    | Operation            | REQ, REC,    | Feature (REQ,  | Definition |
>    |                      | OPT, or MNI  | REC, or OPT)   |            |
>    +----------------------+--------------+----------------+------------+
>    | ACCESS               | REQ          |                | Section    |
>    |                      |              |                | 18.1       |
>    | BACKCHANNEL_CTL      | REQ          |                | Section    |
>    |                      |              |                | 18.33      |
>    | BIND_CONN_TO_SESSION | REQ          |                | Section    |
>    |                      |              |                | 18.34      |
>    | CLOSE                | REQ          |                | Section    |
>    |                      |              |                | 18.2       |
>    | COMMIT               | REQ          |                | Section    |
>    |                      |              |                | 18.3       |
>    | CREATE               | REQ          |                | Section    |
>    |                      |              |                | 18.4       |
>    | CREATE_SESSION       | REQ          |                | Section    |
>    |                      |              |                | 18.36      |
>    | DELEGPURGE           | OPT          | FDELG (REQ)    | Section    |
>    |                      |              |                | 18.5       |
>    | DELEGRETURN          | OPT          | FDELG,         | Section    |
>    |                      |              |                | 18.6       |
>    |                      |              | DDELG, pNFS    |            |
>    |                      |              | (REQ)          |            |
>    | DESTROY_CLIENTID     | REQ          |                | Section    |
>    |                      |              |                | 18.50      |
>    | DESTROY_SESSION      | REQ          |                | Section    |
>    |                      |              |                | 18.37      |
>    | EXCHANGE_ID          | REQ          |                | Section    |
>    |                      |              |                | 18.35      |
>    | FREE_STATEID         | REQ          |                | Section    |
>    |                      |              |                | 18.38      |
>    | GETATTR              | REQ          |                | Section    |
>    |                      |              |                | 18.7       |
>    | GETDEVICEINFO        | OPT          | pNFS (REQ)     | Section    |
>    |                      |              |                | 18.40      |
>    | GETDEVICELIST        | OPT          | pNFS (OPT)     | Section    |
>    |                      |              |                | 18.41      |
>    | GETFH                | REQ          |                | Section    |
>    |                      |              |                | 18.8       |
>    | GET_DIR_DELEGATION   | OPT          | DDELG (REQ)    | Section    |
>    |                      |              |                | 18.39      |
>    | LAYOUTCOMMIT         | OPT          | pNFS (REQ)     | Section    |
>    |                      |              |                | 18.42      |
>    | LAYOUTGET            | OPT          | pNFS (REQ)     | Section    |
>    |                      |              |                | 18.43      |
>    | LAYOUTRETURN         | OPT          | pNFS (REQ)     | Section    |
>    |                      |              |                | 18.44      |
>    | LINK                 | OPT          |                | Section    |
>    |                      |              |                | 18.9       |
>    | LOCK                 | REQ          |                | Section    |
>    |                      |              |                | 18.10      |
>    | LOCKT                | REQ          |                | Section    |
>    |                      |              |                | 18.11      |
>    | LOCKU                | REQ          |                | Section    |
>    |                      |              |                | 18.12      |
>    | LOOKUP               | REQ          |                | Section    |
>    |                      |              |                | 18.13      |
>    | LOOKUPP              | REQ          |                | Section    |
>    |                      |              |                | 18.14      |
>    | NVERIFY              | REQ          |                | Section    |
>    |                      |              |                | 18.15      |
>    | OPEN                 | REQ          |                | Section    |
>    |                      |              |                | 18.16      |
>    | OPENATTR             | OPT          |                | Section    |
>    |                      |              |                | 18.17      |
>    | OPEN_CONFIRM         | MNI          |                | N/A        |
>    | OPEN_DOWNGRADE       | REQ          |                | Section    |
>    |                      |              |                | 18.18      |
>    | PUTFH                | REQ          |                | Section    |
>    |                      |              |                | 18.19      |
>    | PUTPUBFH             | REQ          |                | Section    |
>    |                      |              |                | 18.20      |
>    | PUTROOTFH            | REQ          |                | Section    |
>    |                      |              |                | 18.21      |
>    | READ                 | REQ          |                | Section    |
>    |                      |              |                | 18.22      |
>    | READDIR              | REQ          |                | Section    |
>    |                      |              |                | 18.23      |
>    | READLINK             | OPT          |                | Section    |
>    |                      |              |                | 18.24      |
>    | RECLAIM_COMPLETE     | REQ          |                | Section    |
>    |                      |              |                | 18.51      |
>    | RELEASE_LOCKOWNER    | MNI          |                | N/A        |
>    | REMOVE               | REQ          |                | Section    |
>    |                      |              |                | 18.25      |
>    | RENAME               | REQ          |                | Section    |
>    |                      |              |                | 18.26      |
>    | RENEW                | MNI          |                | N/A        |
>    | RESTOREFH            | REQ          |                | Section    |
>    |                      |              |                | 18.27      |
>    | SAVEFH               | REQ          |                | Section    |
>    |                      |              |                | 18.28      |
>    | SECINFO              | REQ          |                | Section    |
>    |                      |              |                | 18.29      |
>    | SECINFO_NO_NAME      | REC          | pNFS file      | Section    |
>    |                      |              |                | 18.45,     |
>    |                      |              | layout (REQ)   | Section    |
>    |                      |              |                | 13.12      |
>    | SEQUENCE             | REQ          |                | Section    |
>    |                      |              |                | 18.46      |
>    | SETATTR              | REQ          |                | Section    |
>    |                      |              |                | 18.30      |
>    | SETCLIENTID          | MNI          |                | N/A        |
>    | SETCLIENTID_CONFIRM  | MNI          |                | N/A        |
>    | SET_SSV              | REQ          |                | Section    |
>    |                      |              |                | 18.47      |
>    | TEST_STATEID         | REQ          |                | Section    |
>    |                      |              |                | 18.48      |
>    | VERIFY               | REQ          |                | Section    |
>    |                      |              |                | 18.31      |
>    | WANT_DELEGATION      | OPT          | FDELG (OPT)    | Section    |
>    |                      |              |                | 18.49      |
>    | WRITE                | REQ          |                | Section    |
>    |                      |              |                | 18.32      |
>    |                      |              |                |            |
>    +----------------------+--------------+----------------+------------+
18680,18707c18743,18782
< 
<    +-------------------------+-----------+-------------+---------------+
<    | Operation               | REQ, REC, | Feature     | Definition    |
<    |                         | OPT, or   | (REQ, REC,  |               |
<    |                         | MNI       | or OPT)     |               |
<    +-------------------------+-----------+-------------+---------------+
<    | CB_GETATTR              | OPT       | FDELG (REQ) | Section 20.1  |
<    | CB_LAYOUTRECALL         | OPT       | pNFS (REQ)  | Section 20.3  |
<    | CB_NOTIFY               | OPT       | DDELG (REQ) | Section 20.4  |
<    | CB_NOTIFY_DEVICEID      | OPT       | pNFS (OPT)  | Section 20.12 |
<    | CB_NOTIFY_LOCK          | OPT       |             | Section 20.11 |
<    | CB_PUSH_DELEG           | OPT       | FDELG (OPT) | Section 20.5  |
<    | CB_RECALL               | OPT       | FDELG,      | Section 20.2  |
<    |                         |           | DDELG, pNFS |               |
<    |                         |           | (REQ)       |               |
<    | CB_RECALL_ANY           | OPT       | FDELG,      | Section 20.6  |
<    |                         |           | DDELG, pNFS |               |
<    |                         |           | (REQ)       |               |
<    | CB_RECALL_SLOT          | REQ       |             | Section 20.8  |
<    | CB_RECALLABLE_OBJ_AVAIL | OPT       | DDELG, pNFS | Section 20.7  |
<    |                         |           | (REQ)       |               |
<    | CB_SEQUENCE             | OPT       | FDELG,      | Section 20.9  |
<    |                         |           | DDELG, pNFS |               |
<    |                         |           | (REQ)       |               |
<    | CB_WANTS_CANCELLED      | OPT       | FDELG,      | Section 20.10 |
<    |                         |           | DDELG, pNFS |               |
<    |                         |           | (REQ)       |               |
<    +-------------------------+-----------+-------------+---------------+
---
>    +-------------------------+------------+---------------+------------+
>    | Operation               | REQ, REC,  | Feature (REQ, | Definition |
>    |                         | OPT, or    | REC, or OPT)  |            |
>    |                         | MNI        |               |            |
>    +-------------------------+------------+---------------+------------+
>    | CB_GETATTR              | OPT        | FDELG (REQ)   | Section    |
>    |                         |            |               | 20.1       |
>    | CB_LAYOUTRECALL         | OPT        | pNFS (REQ)    | Section    |
>    |                         |            |               | 20.3       |
>    | CB_NOTIFY               | OPT        | DDELG (REQ)   | Section    |
>    |                         |            |               | 20.4       |
>    | CB_NOTIFY_DEVICEID      | OPT        | pNFS (OPT)    | Section    |
>    |                         |            |               | 20.12      |
>    | CB_NOTIFY_LOCK          | OPT        |               | Section    |
>    |                         |            |               | 20.11      |
>    | CB_PUSH_DELEG           | OPT        | FDELG (OPT)   | Section    |
>    |                         |            |               | 20.5       |
>    | CB_RECALL               | OPT        | FDELG,        | Section    |
>    |                         |            |               | 20.2       |
>    |                         |            | DDELG, pNFS   |            |
>    |                         |            | (REQ)         |            |
>    | CB_RECALL_ANY           | OPT        | FDELG,        | Section    |
>    |                         |            |               | 20.6       |
>    |                         |            | DDELG, pNFS   |            |
>    |                         |            | (REQ)         |            |
>    | CB_RECALL_SLOT          | REQ        |               | Section    |
>    |                         |            |               | 20.8       |
>    | CB_RECALLABLE_OBJ_AVAIL | OPT        | DDELG, pNFS   | Section    |
>    |                         |            |               | 20.7       |
>    |                         |            | (REQ)         |            |
>    | CB_SEQUENCE             | OPT        | FDELG,        | Section    |
>    |                         |            |               | 20.9       |
>    |                         |            | DDELG, pNFS   |            |
>    |                         |            | (REQ)         |            |
>    | CB_WANTS_CANCELLED      | OPT        | FDELG,        | Section    |
>    |                         |            |               | 20.10      |
>    |                         |            | DDELG, pNFS   |            |
>    |                         |            | (REQ)         |            |
>    |                         |            |               |            |
>    +-------------------------+------------+---------------+------------+
19963,19969c20038,20039
<          PUTFH  (directory filehandle)
<          LOOKUP "pub"
<          GETFH
<          LOOKUP "foo"
<          GETFH
<          LOOKUP "bar"
<          GETFH
---
>       PUTFH  (directory filehandle)
>          LOOKUP "pub" GETFH LOOKUP "foo" GETFH LOOKUP "bar" GETFH
20193,20194c20263
<     OPEN4_SHARE_ACCESS_WANT_SIGNAL_DELEG_WHEN_RESRC_AVAIL
<     = 0x10000;
---
>     OPEN4_SHARE_ACCESS_WANT_SIGNAL_DELEG_WHEN_RESRC_AVAIL = 0x10000;
20197,20198c20266
<     OPEN4_SHARE_ACCESS_WANT_PUSH_DELEG_WHEN_UNCONTENDED
<     = 0x20000;
---
>     OPEN4_SHARE_ACCESS_WANT_PUSH_DELEG_WHEN_UNCONTENDED = 0x20000;
20338,20344c20406,20409
<     nfs_space_limit4
<               space_limit; /* Defines condition that
<                               the client must check to
<                               determine whether the
<                               file needs to be flushed
<                               to the server on close.  */
< 
---
>       nfs_space_limit4
>                 space_limit; /* Defines condition that the client must
>                 check to determine whether the file needs to be flushed
>                 to the server on close.  */
20373,20375c20438,20440
<    switch (open_delegation_type4 delegation_type) {
<            case OPEN_DELEGATE_NONE:
<                    void;
---
>            switch (open_delegation_type4 delegation_type) { case
>            OPEN_DELEGATE_NONE: void;
> 
20377a20443
> 
20379a20446
> 
20382d20448
<    };
20383a20450
>    };
20501,20513c20568,20581
<    +----------------+-----------+---------------+----------------------+
<    | Persistent     | Server    | Server        | Client Allowed       |
<    | Reply Cache    | Supports  | REQUIRED      |                      |
<    | Enabled        | pNFS      |               |                      |
<    +----------------+-----------+---------------+----------------------+
<    | no             | no        | EXCLUSIVE4_1  | EXCLUSIVE4_1         |
<    |                |           | and           | (SHOULD) or          |
<    |                |           | EXCLUSIVE4    | EXCLUSIVE4 (SHOULD   |
<    |                |           |               | NOT)                 |
<    | no             | yes       | EXCLUSIVE4_1  | EXCLUSIVE4_1         |
<    | yes            | no        | GUARDED4      | GUARDED4             |
<    | yes            | yes       | GUARDED4      | GUARDED4             |
<    +----------------+-----------+---------------+----------------------+
---
>    +-------------------+----------------+--------------+---------------+
>    | Persistent Reply  | Server         | Server       | Client        |
>    | Cache Enabled     | Supports pNFS  | REQUIRED     | Allowed       |
>    +-------------------+----------------+--------------+---------------+
>    | no                | no             | EXCLUSIVE4_1 | EXCLUSIVE4_1  |
>    |                   |                | and          | (SHOULD) or   |
>    |                   |                | EXCLUSIVE4   | EXCLUSIVE4    |
>    |                   |                |              | (SHOULD       |
>    |                   |                |              | NOT)          |
>    | no                | yes            | EXCLUSIVE4_1 | EXCLUSIVE4_1  |
>    | yes               | no             | GUARDED4     | GUARDED4      |
>    | yes               | yes            | GUARDED4     | GUARDED4      |
>    |                   |                |              |               |
>    +-------------------+----------------+--------------+---------------+
20515c20583
<                                  Table 10
---
>                                   Table 9
20599a20668
>    |                      |                                            |
20707,20709c20776
<    OPEN4_SHARE_ACCESS_WANT_WRITE_DELEG
<    OPEN4_SHARE_ACCESS_WANT_ANY_DELEG
< 
---
>    OPEN4_SHARE_ACCESS_WANT_WRITE_DELEG OPEN4_SHARE_ACCESS_WANT_ANY_DELEG
21466a21534
> 
21514a21583
> 
22154,22156c22223,22227
<       to reconstruct the parent of the original filehandle and the
<       component name of the original filehandle.  The introduction in
<       NFSv4.1 of SECINFO_NO_NAME obviates the need for reconstruction.
---
> 
>          to reconstruct the parent of the original filehandle and the
>          component name of the original filehandle.  The introduction in
>          NFSv4.1 of SECINFO_NO_NAME obviates the need for
>          reconstruction.
22433,22434c22504,22506
<    Valid combinations of the fields stable in the request and committed
<                                in the reply.
---
>       Valid combinations of the fields stable in the request and
>       committed
>                                   in the reply.
22441a22514
>             |            |                                   |
22444c22517
<                                  Table 11
---
>                                  Table 10
22640,22641c22713,22714
<     channel_dir_from_client4
<                    bctsa_dir;
---
>       channel_dir_from_client4
>                      bctsa_dir;
22657,22658c22730,22731
<     channel_dir_from_server4
<                    bctsr_dir;
---
>       channel_dir_from_server4
>                      bctsr_dir;
22667,22668c22740
<      BIND_CONN_TO_SESSION4resok
<                    bctsr_resok4;
---
>      BIND_CONN_TO_SESSION4resok bctsr_resok4;
22774,22775c22846,22847
<    const EXCHGID4_FLAG_SUPP_MOVED_REFER    = 0x00000001;
<    const EXCHGID4_FLAG_SUPP_MOVED_MIGR     = 0x00000002;
---
>    const EXCHGID4_FLAG_SUPP_MOVED_REFER  = 0x00000001;
>       const EXCHGID4_FLAG_SUPP_MOVED_MIGR = 0x00000002;
22783c22855
<    const EXCHGID4_FLAG_MASK_PNFS           = 0x00070000;
---
>    const EXCHGID4_FLAG_MASK_PNFS  = 0x00070000;
22786,22790c22858,22860
<    const EXCHGID4_FLAG_CONFIRMED_R         = 0x80000000;
<    struct state_protect_ops4 {
<            bitmap4 spo_must_enforce;
<            bitmap4 spo_must_allow;
<    };
---
>       const EXCHGID4_FLAG_CONFIRMED_R = 0x80000000; struct
>       state_protect_ops4 { bitmap4 spo_must_enforce; bitmap4
>       spo_must_allow; };
22931,22933c23001,23004
<       These properties may be updated by subsequent EXCHANGE_ID requests
<       on confirmed client IDs though the server MAY refuse to change
<       them.
---
>          These properties may be updated by subsequent EXCHANGE_ID
>          requests
>             on confirmed client IDs though the server MAY refuse to
>             change them.
22950,22951c23021,23022
<       Once the client ID is confirmed, these properties cannot be
<       updated by subsequent EXCHANGE_ID requests.
---
>          Once the client ID is confirmed, these properties cannot be
>             updated by subsequent EXCHANGE_ID requests.
22972,22997c23043,23068
<          length of the key of the encryption algorithm ("key length"),
<          the length of the output of hash algorithm ("hash length"), and
<          the length of the SSV ("SSV length").
< 
<          +  key length MUST be <= hash length.  This is because the keys
<             used for the encryption algorithm are actually subkeys
<             derived from the SSV, and the derivation is via the hash
<             algorithm.  The selection of an encryption algorithm with a
<             key length that exceeded the length of the output of the
<             hash algorithm would require padding, and thus weaken the
<             use of the encryption algorithm.
< 
<          +  hash length SHOULD be <= SSV length.  This is because the
<             SSV is a key used to derive subkeys via an HMAC, and it is
<             recommended that the key used as input to an HMAC be at
<             least as long as the length of the HMAC's hash algorithm's
<             output (see Section 3 of RFC2104 [11]).
< 
<          +  key length SHOULD be <= SSV length.  This is a transitive
<             result of the above two invariants.
< 
<          +  key length SHOULD be >= hash length / 2.  This is because
<             the subkey derivation is via an HMAC and it is recommended
<             that if the HMAC has to be truncated, it should not be
<             truncated to less than half the hash length (see Section 4
<             of RFC2104 [11]).
---
>             length of the key of the encryption algorithm ("key
>             length"), the length of the output of hash algorithm ("hash
>             length"), and the length of the SSV ("SSV length").
> 
>             -  key length MUST be <= hash length.  This is because the
>                keys used for the encryption algorithm are actually
>                subkeys derived from the SSV, and the derivation is via
>                the hash algorithm.  The selection of an encryption
>                algorithm with a key length that exceeded the length of
>                the output of the hash algorithm would require padding,
>                and thus weaken the use of the encryption algorithm.
> 
>             -  hash length SHOULD be <= SSV length.  This is because the
>                SSV is a key used to derive subkeys via an HMAC, and it
>                is recommended that the key used as input to an HMAC be
>                at least as long as the length of the HMAC's hash
>                algorithm's output (see Section 3 of RFC2104 [11]).
> 
>             -  key length SHOULD be <= SSV length.  This is a transitive
>                result of the above two invariants.
> 
>             -  key length SHOULD be >= hash length / 2.  This is because
>                the subkey derivation is via an HMAC and it is
>                recommended that if the HMAC has to be truncated, it
>                should not be truncated to less than half the hash length
>                (see Section 4 of RFC2104 [11]).
23127,23132c23198,23204
<       with the client ID is unexpired, a subsequent EXCHANGE_ID
<       operation that uses the same eia_clientowner.co_owner as the first
<       EXCHANGE_ID MUST also use the same machine credential as the first
<       EXCHANGE_ID.  The server returns the same client ID for the
<       subsequent EXCHANGE_ID as that returned from the first
<       EXCHANGE_ID.
---
> 
>          with the client ID is unexpired, a subsequent EXCHANGE_ID
>          operation that uses the same eia_clientowner.co_owner as the
>          first EXCHANGE_ID MUST also use the same machine credential as
>          the first EXCHANGE_ID.  The server returns the same client ID
>          for the subsequent EXCHANGE_ID as that returned from the first
>          EXCHANGE_ID.
23252a23325
> 
23263,23269c23336,23343
<       to a server sharing the same eir_server_owner.so_major_id, the
<       RPCSEC_GSS handles returned in spi_handles can only be used on
<       connections connected to a server that returns the same the
<       eir_server_owner.so_major_id and eir_server_owner.so_minor_id on
<       each connection.  It is permissible for the client to set
<       ssp_num_gss_handles to zero; the client can create more handles
<       with another EXCHANGE_ID call.
---
> 
>          to a server sharing the same eir_server_owner.so_major_id, the
>          RPCSEC_GSS handles returned in spi_handles can only be used on
>          connections connected to a server that returns the same the
>          eir_server_owner.so_major_id and eir_server_owner.so_minor_id
>          on each connection.  It is permissible for the client to set
>          ssp_num_gss_handles to zero; the client can create more handles
>          with another EXCHANGE_ID call.
23272,23273c23346,23347
<       context, there are security considerations specific to this
<       situation discussed in Section 2.10.10.
---
>          context, there are security considerations specific to this
>          situation discussed in Section 2.10.10.
23276,23278c23350,23352
<       RPCSEC_GSS handle in spi_handle MUST be the same as the seq_window
<       of the RPCSEC_GSS handle used for the credential of the RPC
<       request that the EXCHANGE_ID request was sent with.
---
>          RPCSEC_GSS handle in spi_handle MUST be the same as the
>          seq_window of the RPCSEC_GSS handle used for the credential of
>          the RPC request that the EXCHANGE_ID request was sent with.
23286a23361
>    |                   |                      |                        |
23289c23364
<                                  Table 12
---
>                                  Table 11
23320c23395,23396
<    1.  co_ownerid
---
>    1.  co_ownerid The client identifier string, from the eia_clientowner
>        structure of the EXCHANGE_ID4args structure.
23322,23350c23398,23417
<           The client identifier string, from the eia_clientowner
<           structure of the EXCHANGE_ID4args structure.
< 
<    2.  co_verifier:
< 
<           A client-specific value used to indicate incarnations (where a
<           client restart represents a new incarnation), from the
<           eia_clientowner structure of the EXCHANGE_ID4args structure.
< 
<    3.  principal:
< 
<           The principal that was defined in the RPC header's credential
<           and/or verifier at the time the client record was established.
< 
<    4.  client ID:
< 
<           The shorthand client identifier, generated by the server and
<           returned via the eir_clientid field in the EXCHANGE_ID4resok
<           structure.
< 
<    5.  confirmed:
< 
<           A private field on the server indicating whether or not a
<           client record has been confirmed.  A client record is
<           confirmed if there has been a successful CREATE_SESSION
<           operation to confirm it.  Otherwise, it is unconfirmed.  An
<           unconfirmed record is established by an EXCHANGE_ID call.  Any
<           unconfirmed record that is not confirmed within a lease period
<           SHOULD be removed.
---
>    2.  co_verifier: A client-specific value used to indicate
>        incarnations (where a client restart represents a new
>        incarnation), from the eia_clientowner structure of the
>        EXCHANGE_ID4args structure.
> 
>    3.  principal: The principal that was defined in the RPC header's
>        credential and/or verifier at the time the client record was
>        established.
> 
>    4.  client ID: The shorthand client identifier, generated by the
>        server and returned via the eir_clientid field in the
>        EXCHANGE_ID4resok structure.
> 
>    5.  confirmed: A private field on the server indicating whether or
>        not a client record has been confirmed.  A client record is
>        confirmed if there has been a successful CREATE_SESSION operation
>        to confirm it.  Otherwise, it is unconfirmed.  An unconfirmed
>        record is established by an EXCHANGE_ID call.  Any unconfirmed
>        record that is not confirmed within a lease period SHOULD be
>        removed.
23414,23421c23481,23486
<    1.  New Owner ID
< 
<           If the server has no client records with
<           eia_clientowner.co_ownerid matching ownerid_arg, and
<           EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is not set in the
<           EXCHANGE_ID, then a new shorthand client ID (let us call it
<           clientid_ret) is generated, and the following unconfirmed
<           record is added to the server's state.
---
>    1.  New Owner ID If the server has no client records with
>        eia_clientowner.co_ownerid matching ownerid_arg, and
>        EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is not set in the EXCHANGE_ID,
>        then a new shorthand client ID (let us call it clientid_ret) is
>        generated, and the following unconfirmed record is added to the
>        server's state.
23423c23488
<           { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
---
>        { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
23426c23491
<           Subsequently, the server returns clientid_ret.
---
>        Subsequently, the server returns clientid_ret.
23430c23495
<           If the server has the following confirmed record, and the
---
>        If the server has the following confirmed record, and the
23436c23501
<           { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
---
>        { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
23439c23504
<           Since the record has been confirmed, the client must have
---
>        Since the record has been confirmed, the client must have
23448,23454c23513,23517
<    3.  Client Collision
< 
<           If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is not set, and if the
<           server has the following confirmed record, then this request
<           is likely the result of a chance collision between the values
<           of the eia_clientowner.co_ownerid subfield of EXCHANGE_ID4args
<           for two different clients.
---
>    3.  Client Collision If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is not set,
>        and if the server has the following confirmed record, then this
>        request is likely the result of a chance collision between the
>        values of the eia_clientowner.co_ownerid subfield of
>        EXCHANGE_ID4args for two different clients.
23456c23519
<           { ownerid_arg, *, old_principal_arg, old_clientid_ret,
---
>        { ownerid_arg, *, old_principal_arg, old_clientid_ret,
23459c23522
<           If there is currently no state associated with
---
>        If there is currently no state associated with
23467c23530
<           { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
---
>        { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
23470c23533
<           Subsequently, the server returns clientid_ret.
---
>        Subsequently, the server returns clientid_ret.
23472c23535
<           If old_clientid_ret has an unexpired lease with state, then no
---
>        If old_clientid_ret has an unexpired lease with state, then no
23497,23499c23560,23561
<           { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
<           unconfirmed }
<    5.  Client Restart
---
>        { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
>           unconfirmed } 5.  Client Restart
23546c23608
<    6.  Update
---
>    5.  Update
23548c23610
<           If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is set, and the server
---
>        If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is set, and the server
23552c23614
<           { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
---
>        { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
23555c23617
<           Since the record has been confirmed, the client must have
---
>        Since the record has been confirmed, the client must have
23560,23572c23622,23630
<    7.  Update but No Confirmed Record
< 
<           If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is set, and the server
<           has no confirmed record corresponding ownerid_arg, then the
<           server returns NFS4ERR_NOENT and leaves any unconfirmed record
<           intact.
< 
<    8.  Update but Wrong Verifier
< 
<           If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is set, and the server
<           has the following confirmed record, then this request is an
<           illegal attempt at an update, perhaps because of a retry from
<           a previous client incarnation.
---
>    6.  Update but No Confirmed Record If
>        EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is set, and the server has no
>        confirmed record corresponding ownerid_arg, then the server
>        returns NFS4ERR_NOENT and leaves any unconfirmed record intact.
> 
>    7.  Update but Wrong Verifier If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is
>        set, and the server has the following confirmed record, then this
>        request is an illegal attempt at an update, perhaps because of a
>        retry from a previous client incarnation.
23574c23632
<           { ownerid_arg, old_verifier_arg, *, clientid_ret, confirmed }
---
>        { ownerid_arg, old_verifier_arg, *, clientid_ret, confirmed }
23576c23634
<           The server returns NFS4ERR_NOT_SAME and leaves the client
---
>        The server returns NFS4ERR_NOT_SAME and leaves the client
23579c23637
<    9.  Update but Wrong Principal
---
>    8.  Update but Wrong Principal
23581c23639
<           If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is set, and the server
---
>        If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is set, and the server
23585c23643
<           { ownerid_arg, verifier_arg, old_principal_arg, clientid_ret,
---
>        { ownerid_arg, verifier_arg, old_principal_arg, clientid_ret,
23588c23646
<           The server returns NFS4ERR_PERM and leaves the client record
---
>        The server returns NFS4ERR_PERM and leaves the client record
23614c23672
<            uint32_t                csa_flags;
---
>       uint32_t csa_flags;
23616,23617c23674,23675
<            channel_attrs4          csa_fore_chan_attrs;
<            channel_attrs4          csa_back_chan_attrs;
---
>       channel_attrs4 csa_fore_chan_attrs; channel_attrs4
>       csa_back_chan_attrs;
23619,23621c23677,23678
<            uint32_t                csa_cb_program;
<            callback_sec_parms4     csa_sec_parms<>;
<    };
---
>    uint32_t  csa_cb_program;
>       callback_sec_parms4 csa_sec_parms<>; };
23629c23686
<            uint32_t                csr_flags;
---
>       uint32_t  csr_flags;
23703,23705c23760,23763
<          in Section 12.5.2 it SHOULD support
<          CREATE_SESSION4_FLAG_PERSIST if it supports the layout_hint
<          (Section 5.12.4) attribute.
---
> 
>             in Section 12.5.2 it SHOULD support
>             CREATE_SESSION4_FLAG_PERSIST if it supports the layout_hint
>             (Section 5.12.4) attribute.
23759,23769c23817,23828
<          be sent.  This size represents the XDR encoded size of the
<          request, including the RPC headers (including security flavor
<          credentials and verifiers) but excludes any RPC transport
<          framing headers.  Imagine a request coming over a non-RDMA
<          TCP/IP connection, and that it has a single Record Marking
<          header preceding it.  The maximum allowable count encoded in
<          the header will be ca_maxrequestsize.  If a requester sends a
<          request that exceeds ca_maxrequestsize, the error
<          NFS4ERR_REQ_TOO_BIG will be returned per the description in
<          Section 2.10.6.4.  For each channel, the server MAY decrease
<          this value but MUST NOT increase it.
---
> 
>             be sent.  This size represents the XDR encoded size of the
>             request, including the RPC headers (including security
>             flavor credentials and verifiers) but excludes any RPC
>             transport framing headers.  Imagine a request coming over a
>             non-RDMA TCP/IP connection, and that it has a single Record
>             Marking header preceding it.  The maximum allowable count
>             encoded in the header will be ca_maxrequestsize.  If a
>             requester sends a request that exceeds ca_maxrequestsize,
>             the error NFS4ERR_REQ_TOO_BIG will be returned per the
>             description in Section 2.10.6.4.  For each channel, the
>             server MAY decrease this value but MUST NOT increase it.
23859,23863c23918,23923
<       of values of data type gsshandle4_t.  The data type gsshandle4_t
<       represents an RPCSEC_GSS handle, and is precisely the same as the
<       data type of the "handle" field of the rpc_gss_init_res data type
<       defined in Section 5.2.3.1, "Context Creation Response -
<       Successful Acceptance", of [4].
---
> 
>          of values of data type gsshandle4_t.  The data type
>          gsshandle4_t represents an RPCSEC_GSS handle, and is precisely
>          the same as the data type of the "handle" field of the
>          rpc_gss_init_res data type defined in Section 5.2.3.1, "Context
>          Creation Response -Successful Acceptance", of [4].
23866,23880c23926,23942
<       handle the server returned to the client (either in the handle
<       field of data type rpc_gss_init_res or as one of the elements of
<       the spi_handles field returned in the reply to EXCHANGE_ID) when
<       the RPCSEC_GSS context was created on the server.  The second
<       handle, gcbp_handle_from_client, is the back handle to which the
<       client will map the RPCSEC_GSS context.  The server can
<       immediately use the value of gcbp_handle_from_client in the
<       RPCSEC_GSS credential in callback RPCs.  That is, the value in
<       gcbp_handle_from_client can be used as the value of the field
<       "handle" in data type rpc_gss_cred_t (see Section 5, "Elements of
<       the RPCSEC_GSS Security Protocol", of [4]) in callback RPCs.  The
<       server MUST use the RPCSEC_GSS security service specified in
<       gcbp_service, i.e., it MUST set the "service" field of the
<       rpc_gss_cred_t data type in RPCSEC_GSS credential to the value of
<       gcbp_service (see Section 5.3.1, "RPC Request Header", of [4]).
---
> 
>          handle the server returned to the client (either in the handle
>          field of data type rpc_gss_init_res or as one of the elements
>          of the spi_handles field returned in the reply to EXCHANGE_ID)
>          when the RPCSEC_GSS context was created on the server.  The
>          second handle, gcbp_handle_from_client, is the back handle to
>          which the client will map the RPCSEC_GSS context.  The server
>          can immediately use the value of gcbp_handle_from_client in the
>          RPCSEC_GSS credential in callback RPCs.  That is, the value in
>          gcbp_handle_from_client can be used as the value of the field
>          "handle" in data type rpc_gss_cred_t (see Section 5, "Elements
>          of the RPCSEC_GSS Security Protocol", of [4]) in callback RPCs.
>          The server MUST use the RPCSEC_GSS security service specified
>          in gcbp_service, i.e., it MUST set the "service" field of the
>          rpc_gss_cred_t data type in RPCSEC_GSS credential to the value
>          of gcbp_service (see Section 5.3.1, "RPC Request Header", of
>          [4]).
23883,23884c23945,23946
<       does not exist on the server, the server will return
<       NFS4ERR_NOENT.
---
>          does not exist on the server, the server will return
>          NFS4ERR_NOENT.
23887,23891c23949,23954
<       contexts MUST share the same GSS context and MUST have the same
<       seq_window (see Section 5.2.3.1 of RFC2203 [4]).  The fore and
<       back RPCSEC_GSS context state are independent of each other as far
<       as the RPCSEC_GSS sequence number (see the seq_num field in the
<       rpc_gss_cred_t data type of Sections 5 and 5.3.1 of [4]).
---
> 
>          contexts MUST share the same GSS context and MUST have the same
>          seq_window (see Section 5.2.3.1 of RFC2203 [4]).  The fore and
>          back RPCSEC_GSS context state are independent of each other as
>          far as the RPCSEC_GSS sequence number (see the seq_num field in
>          the rpc_gss_cred_t data type of Sections 5 and 5.3.1 of [4]).
23894,23896c23957,23959
<       Section 2.10.9), then because each SSV RPCSEC_GSS handle shares a
<       common SSV GSS context, there are security considerations specific
<       to this situation discussed in Section 2.10.10.
---
>          Section 2.10.9), then because each SSV RPCSEC_GSS handle shares
>          a common SSV GSS context, there are security considerations
>          specific to this situation discussed in Section 2.10.10.
23989,23992c24052,24054
<        *  Successful Confirmation
< 
<              If the server has the following unconfirmed record, then
<              this is the expected confirmation of an unconfirmed record.
---
>        *  Successful Confirmation If the server has the following
>           unconfirmed record, then this is the expected confirmation of
>           an unconfirmed record.
23994c24056
<              { ownerid, verifier, principal_arg, clientid_arg,
---
>           { ownerid, verifier, principal_arg, clientid_arg,
23997c24059
<              As noted in Section 18.35.4, the server might also have the
---
>           As noted in Section 18.35.4, the server might also have the
24000c24062
<              { ownerid, old_verifier, principal_arg, old_clientid,
---
>           { ownerid, old_verifier, principal_arg, old_clientid,
24003c24065
<              The server schedules the replacement of both records with:
---
>           The server schedules the replacement of both records with:
24005c24067
<              { ownerid, verifier, principal_arg, clientid_arg, confirmed
---
>           { ownerid, verifier, principal_arg, clientid_arg, confirmed
24008c24070
<              The processing of CREATE_SESSION continues on to session
---
>           The processing of CREATE_SESSION continues on to session
24016c24078
<              If the server has the following record, then the client has
---
>           If the server has the following record, then the client has
24021c24083
<              { *, *, old_principal_arg, clientid_arg, * }
---
>           { *, *, old_principal_arg, clientid_arg, * }
24023c24085
<              Neither of these cases is permissible.  Processing stops
---
>           Neither of these cases is permissible.  Processing stops
24033,24044c24095,24108
<        used (including whether the CREATE_SESSION4_FLAG_PERSIST flag is
<        set and has been accepted by the server) and allocating space for
<        the session reply cache (if there is not enough space, the server
<        returns NFS4ERR_NOSPC).  For each slot in the reply cache, the
<        server sets the sequence ID to zero, and records an entry
<        containing a COMPOUND reply with zero operations and the error
<        NFS4ERR_SEQ_MISORDERED.  This way, if the first SEQUENCE request
<        sent has a sequence ID equal to zero, the server can simply
<        return what is in the reply cache: NFS4ERR_SEQ_MISORDERED.  The
<        client initializes its reply cache for receiving callbacks in the
<        same way, and similarly, the first CB_SEQUENCE operation on a
<        slot after session creation MUST have a sequence ID of one.
---
> 
>           used (including whether the CREATE_SESSION4_FLAG_PERSIST flag
>           is set and has been accepted by the server) and allocating
>           space for the session reply cache (if there is not enough
>           space, the server returns NFS4ERR_NOSPC).  For each slot in
>           the reply cache, the server sets the sequence ID to zero, and
>           records an entry containing a COMPOUND reply with zero
>           operations and the error NFS4ERR_SEQ_MISORDERED.  This way, if
>           the first SEQUENCE request sent has a sequence ID equal to
>           zero, the server can simply return what is in the reply cache:
>           NFS4ERR_SEQ_MISORDERED.  The client initializes its reply
>           cache for receiving callbacks in the same way, and similarly,
>           the first CB_SEQUENCE operation on a slot after session
>           creation MUST have a sequence ID of one.
24047c24111,24112
<        associates the session with the client ID provided by the client.
---
>           associates the session with the client ID provided by the
>           client.
24050,24055c24115,24121
<        to be retried, the retry MUST be done on a new connection that is
<        in non-RDMA mode.  If properties of the new connection are
<        different enough that the arguments to CREATE_SESSION need to
<        change, then a non-retry MUST be sent.  The server will
<        eventually dispose of any session that was created on the
<        original connection.
---
> 
>           to be retried, the retry MUST be done on a new connection that
>           is in non-RDMA mode.  If properties of the new connection are
>           different enough that the arguments to CREATE_SESSION need to
>           change, then a non-retry MUST be sent.  The server will
>           eventually dispose of any session that was created on the
>           original connection.
24198d24263
< 
24480,24484c24545,24551
<       the client assumes the server is faulty and recovers by sending an
<       EXCHANGE_ID operation.  If GETDEVICEINFO indicates that the device
<       ID does exist, then while the server is faulty for sending an
<       erroneous device ID deletion notification, the degree to which it
<       is faulty does not require the client to create a new client ID.
---
> 
>          the client assumes the server is faulty and recovers by sending
>          an EXCHANGE_ID operation.  If GETDEVICEINFO indicates that the
>          device ID does exist, then while the server is faulty for
>          sending an erroneous device ID deletion notification, the
>          degree to which it is faulty does not require the client to
>          create a new client ID.
24487,24490c24554,24558
<       no harm is done.  The client should mark the device ID as deleted,
<       and when GETDEVICEINFO or GETDEVICELIST results are received that
<       indicate that the device ID has been in fact deleted, the device
<       ID should be removed from the client's cache.
---
>          no harm is done.  The client should mark the device ID as
>          deleted, and when GETDEVICEINFO or GETDEVICELIST results are
>          received that indicate that the device ID has been in fact
>          deleted, the device ID should be removed from the client's
>          cache.
24510,24512c24578,24580
<            nfs_cookie4     gdla_cookie;
<            verifier4       gdla_cookieverf;
<    };
---
>       nfs_cookie4 gdla_cookie; verifier4 gdla_cookieverf;
> 
>       };
24835c24903,24905
<      NFS4_UINT64_MAX; a_off = loga_offset; a_minlen = loga_minlength.
---
> 
>          NFS4_UINT64_MAX; a_off = loga_offset; a_minlen =
>          loga_minlength.
24879a24950
> 
24881c24952
<                            a_len = loga_length.
---
>     a_len = loga_length.
25115,25120c25186,25191
<    o  This strategy is as above, but the client is not using buffered
<       I/O, and instead all internal I/O requests are sent directly to
<       the server.  The LAYOUTGET request has loga_offset equal to 10000
<       and loga_minlength set to 50000.  The value of loga_length is set
<       to the length of the file.  The metadata server is free to return
<       a layout that fully overlaps the requested range, with a starting
---
>    o  This strategy is as above, but the client is not using buffered I/
>       O, and instead all internal I/O requests are sent directly to the
>       server.  The LAYOUTGET request has loga_offset equal to 10000 and
>       loga_minlength set to 50000.  The value of loga_length is set to
>       the length of the file.  The metadata server is free to return a
>       layout that fully overlaps the requested range, with a starting
26279a26351
> 
26321c26393
<     case OP_CB_NOTIFY:     CB_NOTIFY4res   opcbnotify;
---
>       case OP_CB_NOTIFY: CB_NOTIFY4res opcbnotify;
26323,26324c26395
<     case OP_CB_PUSH_DELEG: CB_PUSH_DELEG4res
<                                            opcbpush_deleg;
---
>       case OP_CB_PUSH_DELEG: CB_PUSH_DELEG4res opcbpush_deleg;
26326,26327c26397,26399
<     case OP_CB_RECALL_ANY: CB_RECALL_ANY4res
<                                            opcbrecall_any;
---
>       case OP_CB_RECALL_ANY: CB_RECALL_ANY4res opcbrecall_any;
>       case OP_CB_RECALLABLE_OBJ_AVAIL: CB_RECALLABLE_OBJ_AVAIL4res
>       opcbrecallable_obj_avail;
26329,26331c26401
<     case OP_CB_RECALLABLE_OBJ_AVAIL:
<                            CB_RECALLABLE_OBJ_AVAIL4res
<                                    opcbrecallable_obj_avail;
---
>       case OP_CB_RECALL_SLOT: CB_RECALL_SLOT4res opcbrecall_slot;
26333,26335c26403
<     case OP_CB_RECALL_SLOT:
<                            CB_RECALL_SLOT4res
<                                            opcbrecall_slot;
---
>       case OP_CB_SEQUENCE: CB_SEQUENCE4res opcbsequence;
26337c26405,26406
<     case OP_CB_SEQUENCE:   CB_SEQUENCE4res opcbsequence;
---
>       case OP_CB_WANTS_CANCELLED: CB_WANTS_CANCELLED4res
>       opcbwants_cancelled;
26339,26341c26408
<     case OP_CB_WANTS_CANCELLED:
<                            CB_WANTS_CANCELLED4res
<                                    opcbwants_cancelled;
---
>       case OP_CB_NOTIFY_LOCK: CB_NOTIFY_LOCK4res opcbnotify_lock;
26343,26352c26410,26412
<     case OP_CB_NOTIFY_LOCK:
<                            CB_NOTIFY_LOCK4res
<                                            opcbnotify_lock;
< 
<     case OP_CB_NOTIFY_DEVICEID:
<                            CB_NOTIFY_DEVICEID4res
<                                            opcbnotify_deviceid;
<     /* Not new operation */
<     case OP_CB_ILLEGAL:    CB_ILLEGAL4res  opcbillegal;
<    };
---
>    case OP_CB_NOTIFY_DEVICEID:
>       CB_NOTIFY_DEVICEID4res opcbnotify_deviceid; /* Not new operation
>       */ case OP_CB_ILLEGAL: CB_ILLEGAL4res opcbillegal; };
26409,26424c26469,26485
<    +------------------------------+------------------------------------+
<    | Error                        | Notes                              |
<    +------------------------------+------------------------------------+
<    | NFS4ERR_BADCHAR              | The tag argument has a character   |
<    |                              | the replier does not support.      |
<    | NFS4ERR_BADXDR               |                                    |
<    | NFS4ERR_DELAY                |                                    |
<    | NFS4ERR_INVAL                | The tag argument is not in UTF-8   |
<    |                              | encoding.                          |
<    | NFS4ERR_MINOR_VERS_MISMATCH  |                                    |
<    | NFS4ERR_SERVERFAULT          |                                    |
<    | NFS4ERR_TOO_MANY_OPS         |                                    |
<    | NFS4ERR_REP_TOO_BIG          |                                    |
<    | NFS4ERR_REP_TOO_BIG_TO_CACHE |                                    |
<    | NFS4ERR_REQ_TOO_BIG          |                                    |
<    +------------------------------+------------------------------------+
---
>     +------------------------------+----------------------------------+
>     | Error                        | Notes                            |
>     +------------------------------+----------------------------------+
>     | NFS4ERR_BADCHAR              | The tag argument has a character |
>     |                              | the replier does not support.    |
>     | NFS4ERR_BADXDR               |                                  |
>     | NFS4ERR_DELAY                |                                  |
>     | NFS4ERR_INVAL                | The tag argument is not in UTF-8 |
>     |                              | encoding.                        |
>     | NFS4ERR_MINOR_VERS_MISMATCH  |                                  |
>     | NFS4ERR_SERVERFAULT          |                                  |
>     | NFS4ERR_TOO_MANY_OPS         |                                  |
>     | NFS4ERR_REP_TOO_BIG          |                                  |
>     | NFS4ERR_REP_TOO_BIG_TO_CACHE |                                  |
>     | NFS4ERR_REQ_TOO_BIG          |                                  |
>     |                              |                                  |
>     +------------------------------+----------------------------------+
26426c26487
<                                  Table 15
---
>                                  Table 12
26585,26587c26646,26648
<       client does not hold layouts for the file or if the client does
<       not have any overlapping layouts for the specification in the
<       layout recall.
---
>          client does not hold layouts for the file or if the client does
>          not have any overlapping layouts for the specification in the
>          layout recall.
26603,26604c26664,26665
<       client does not hold layouts and does not have valid deviceid
<       mappings.
---
>          client does not hold layouts and does not have valid deviceid
>          mappings.
27419,27420c27480,27481
<       the new device-ID-to-device-address mappings before sending new
<       I/O requests to the storage devices addressed by the device ID.
---
>       the new device-ID-to-device-address mappings before sending new I/
>       O requests to the storage devices addressed by the device ID.
27436,27439c27497,27500
<       The notification is encoded in a value of data type
<       notify_deviceid_delete4.  After a server deletes a device ID, it
<       MUST NOT reuse that device ID for the same layout type until the
<       client ID is deleted.
---
>          The notification is encoded in a value of data type
>             notify_deviceid_delete4.  After a server deletes a device
>             ID, it MUST NOT reuse that device ID for the same layout
>             type until the client ID is deleted.
27670a27732
>    |                         |       |         |     |                |
27673c27735
<            Table 16: Initial Device ID Notification Assignments
---
>            Table 13: Initial Device ID Notification Assignments
27737,27755c27799,27818
<    +-------------------------------+-------+--------+-----+------------+
<    | Recallable Object Type Name   | Value | RFC    | How | Minor      |
<    |                               |       |        |     | Versions   |
<    +-------------------------------+-------+--------+-----+------------+
<    | RCA4_TYPE_MASK_RDATA_DLG      | 0     | RFC    | N   | 1          |
<    |                               |       | 5661   |     |            |
<    | RCA4_TYPE_MASK_WDATA_DLG      | 1     | RFC    | N   | 1          |
<    |                               |       | 5661   |     |            |
<    | RCA4_TYPE_MASK_DIR_DLG        | 2     | RFC    | N   | 1          |
<    |                               |       | 5661   |     |            |
<    | RCA4_TYPE_MASK_FILE_LAYOUT    | 3     | RFC    | N   | 1          |
<    |                               |       | 5661   |     |            |
<    | RCA4_TYPE_MASK_BLK_LAYOUT     | 4     | RFC    | L   | 1          |
<    |                               |       | 5661   |     |            |
<    | RCA4_TYPE_MASK_OBJ_LAYOUT_MIN | 8     | RFC    | L   | 1          |
<    |                               |       | 5661   |     |            |
<    | RCA4_TYPE_MASK_OBJ_LAYOUT_MAX | 9     | RFC    | L   | 1          |
<    |                               |       | 5661   |     |            |
<    +-------------------------------+-------+--------+-----+------------+
---
>    +-------------------------------+--------+------+------+------------+
>    | Recallable Object Type Name   | Value  | RFC  | How  | Minor      |
>    |                               |        |      |      | Versions   |
>    +-------------------------------+--------+------+------+------------+
>    | RCA4_TYPE_MASK_RDATA_DLG      | 0      | RFC  | N    | 1          |
>    |                               |        | 5661 |      |            |
>    | RCA4_TYPE_MASK_WDATA_DLG      | 1      | RFC  | N    | 1          |
>    |                               |        | 5661 |      |            |
>    | RCA4_TYPE_MASK_DIR_DLG        | 2      | RFC  | N    | 1          |
>    |                               |        | 5661 |      |            |
>    | RCA4_TYPE_MASK_FILE_LAYOUT    | 3      | RFC  | N    | 1          |
>    |                               |        | 5661 |      |            |
>    | RCA4_TYPE_MASK_BLK_LAYOUT     | 4      | RFC  | L    | 1          |
>    |                               |        | 5661 |      |            |
>    | RCA4_TYPE_MASK_OBJ_LAYOUT_MIN | 8      | RFC  | L    | 1          |
>    |                               |        | 5661 |      |            |
>    | RCA4_TYPE_MASK_OBJ_LAYOUT_MAX | 9      | RFC  | L    | 1          |
>    |                               |        | 5661 |      |            |
>    |                               |        |      |      |            |
>    +-------------------------------+--------+------+------+------------+
27757c27820
<            Table 17: Initial Recallable Object Type Assignments
---
>            Table 14: Initial Recallable Object Type Assignments
27817a27881
>     |                       |       |          |     |                |
27820c27884
<                  Table 18: Initial Layout Type Assignments
---
>                  Table 15: Initial Layout Type Assignments
27963a28028
>          |                        |          |                  |
27966c28031
<                  Table 19: Initial List of Path Variables
---
>                  Table 16: Initial List of Path Variables
28051,28052c28116,28117
<    [1]   Bradner, S., "Key words for use in RFCs to Indicate Requirement
<          Levels", BCP 14, RFC 2119, March 1997.
---
>    [1]        Bradner, S., "Key words for use in RFCs to Indicate
>               Requirement Levels", BCP 14, RFC 2119, March 1997.
28054,28055c28119,28120
<    [2]   Eisler, M., Ed., "XDR: External Data Representation Standard",
<          STD 67, RFC 4506, May 2006.
---
>    [2]        Eisler, M., Ed., "XDR: External Data Representation
>               Standard", STD 67, RFC 4506, May 2006.
28057,28058c28122,28123
<    [3]   Thurlow, R., "RPC: Remote Procedure Call Protocol Specification
<          Version 2", RFC 5531, May 2009.
---
>    [3]        Thurlow, R., "RPC: Remote Procedure Call Protocol
>               Specification Version 2", RFC 5531, May 2009.
28060,28167c28125,28238
<    [4]   Eisler, M., Chiu, A., and L. Ling, "RPCSEC_GSS Protocol
<          Specification", RFC 2203, September 1997.
< 
<    [5]   Zhu, L., Jaganathan, K., and S. Hartman, "The Kerberos Version
<          5 Generic Security Service Application Program Interface (GSS-
<          API) Mechanism Version 2", RFC 4121, July 2005.
< 
<    [6]   The Open Group, "Section 3.191 of Chapter 3 of Base Definitions
<          of The Open Group Base Specifications Issue 6 IEEE Std 1003.1,
<          2004 Edition, HTML Version (www.opengroup.org), ISBN
<          1931624232", 2004.
< 
<    [7]   Linn, J., "Generic Security Service Application Program
<          Interface Version 2, Update 1", RFC 2743, January 2000.
< 
<    [8]   Talpey, T. and B. Callaghan, "Remote Direct Memory Access
<          Transport for Remote Procedure Call", RFC 5666, January 2010.
< 
<    [9]   Talpey, T. and B. Callaghan, "Network File System (NFS) Direct
<          Data Placement", RFC 5667, January 2010.
< 
<    [10]  Recio, R., Metzler, B., Culley, P., Hilland, J., and D. Garcia,
<          "A Remote Direct Memory Access Protocol Specification",
<          RFC 5040, October 2007.
< 
<    [11]  Krawczyk, H., Bellare, M., and R. Canetti, "HMAC: Keyed-Hashing
<          for Message Authentication", RFC 2104, February 1997.
< 
<    [12]  Eisler, M., "RPCSEC_GSS Version 2", RFC 5403, February 2009.
< 
<    [13]  Shepler, S., Ed., Eisler, M., Ed., and D. Noveck, Ed., "Network
<          File System (NFS) Version 4 Minor Version 1 External Data
<          Representation Standard (XDR) Description", RFC 5662,
<          January 2010.
< 
<    [14]  The Open Group, "Section 3.372 of Chapter 3 of Base Definitions
<          of The Open Group Base Specifications Issue 6 IEEE Std 1003.1,
<          2004 Edition, HTML Version (www.opengroup.org), ISBN
<          1931624232", 2004.
< 
<    [15]  Eisler, M., "IANA Considerations for Remote Procedure Call
<          (RPC) Network Identifiers and Universal Address Formats",
<          RFC 5665, January 2010.
< 
<    [16]  The Open Group, "Section 'read()' of System Interfaces of The
<          Open Group Base Specifications Issue 6 IEEE Std 1003.1, 2004
<          Edition, HTML Version (www.opengroup.org), ISBN 1931624232",
<          2004.
< 
<    [17]  The Open Group, "Section 'readdir()' of System Interfaces of
<          The Open Group Base Specifications Issue 6 IEEE Std 1003.1,
<          2004 Edition, HTML Version (www.opengroup.org), ISBN
<          1931624232", 2004.
< 
<    [18]  The Open Group, "Section 'write()' of System Interfaces of The
<          Open Group Base Specifications Issue 6 IEEE Std 1003.1, 2004
<          Edition, HTML Version (www.opengroup.org), ISBN 1931624232",
<          2004.
< 
<    [19]  Hoffman, P. and M. Blanchet, "Preparation of Internationalized
<          Strings ("stringprep")", RFC 3454, December 2002.
< 
<    [20]  The Open Group, "Section 'chmod()' of System Interfaces of The
<          Open Group Base Specifications Issue 6 IEEE Std 1003.1, 2004
<          Edition, HTML Version (www.opengroup.org), ISBN 1931624232",
<          2004.
< 
<    [21]  International Organization for Standardization, "Information
<          Technology - Universal Multiple-octet coded Character Set (UCS)
<          - Part 1: Architecture and Basic Multilingual Plane",
<          ISO Standard 10646-1, May 1993.
< 
<    [22]  Alvestrand, H., "IETF Policy on Character Sets and Languages",
<          BCP 18, RFC 2277, January 1998.
< 
<    [23]  Hoffman, P. and M. Blanchet, "Nameprep: A Stringprep Profile
<          for Internationalized Domain Names (IDN)", RFC 3491,
<          March 2003.
< 
<    [24]  The Open Group, "Section 'fcntl()' of System Interfaces of The
<          Open Group Base Specifications Issue 6 IEEE Std 1003.1, 2004
<          Edition, HTML Version (www.opengroup.org), ISBN 1931624232",
<          2004.
< 
<    [25]  The Open Group, "Section 'fsync()' of System Interfaces of The
<          Open Group Base Specifications Issue 6 IEEE Std 1003.1, 2004
<          Edition, HTML Version (www.opengroup.org), ISBN 1931624232",
<          2004.
< 
<    [26]  The Open Group, "Section 'getpwnam()' of System Interfaces of
<          The Open Group Base Specifications Issue 6 IEEE Std 1003.1,
<          2004 Edition, HTML Version (www.opengroup.org), ISBN
<          1931624232", 2004.
< 
<    [27]  The Open Group, "Section 'unlink()' of System Interfaces of The
<          Open Group Base Specifications Issue 6 IEEE Std 1003.1, 2004
<          Edition, HTML Version (www.opengroup.org), ISBN 1931624232",
<          2004.
< 
<    [28]  Schaad, J., Kaliski, B., and R. Housley, "Additional Algorithms
<          and Identifiers for RSA Cryptography for use in the Internet
<          X.509 Public Key Infrastructure Certificate and Certificate
<          Revocation List (CRL) Profile", RFC 4055, June 2005.
< 
<    [29]  National Institute of Standards and Technology, "Cryptographic
<          Algorithm Object Registration", URL http://csrc.nist.gov/
<          groups/ST/crypto_apps_infra/csor/algorithms.html,
<          November 2007.
---
>    [4]        Eisler, M., Chiu, A., and L. Ling, "RPCSEC_GSS Protocol
>               Specification", RFC 2203, September 1997.
> 
>    [5]        Zhu, L., Jaganathan, K., and S. Hartman, "The Kerberos
>               Version 5 Generic Security Service Application Program
>               Interface (GSS-API) Mechanism Version 2", RFC 4121, July
>               2005.
> 
>    [6]        The Open Group, "Section 3.191 of Chapter 3 of Base
>               Definitions of The Open Group Base Specifications Issue 6
>               IEEE Std 1003.1, 2004 Edition, HTML Version
>               (www.opengroup.org), ISBN 1931624232", 2004.
> 
>    [7]        Linn, J., "Generic Security Service Application Program
>               Interface Version 2, Update 1", RFC 2743, January 2000.
> 
>    [8]        Talpey, T. and B. Callaghan, "Remote Direct Memory Access
>               Transport for Remote Procedure Call", RFC 5666, January
>               2010.
> 
>    [9]        Talpey, T. and B. Callaghan, "Network File System (NFS)
>               Direct Data Placement", RFC 5667, January 2010.
> 
>    [10]       Recio, R., Metzler, B., Culley, P., Hilland, J., and D.
>               Garcia, "A Remote Direct Memory Access Protocol
>               Specification", RFC 5040, October 2007.
> 
>    [11]       Krawczyk, H., Bellare, M., and R. Canetti, "HMAC: Keyed-
>               Hashing for Message Authentication", RFC 2104, February
>               1997.
> 
>    [12]       Eisler, M., "RPCSEC_GSS Version 2", RFC 5403, February
>               2009.
> 
>    [13]       Shepler, S., Ed., Eisler, M., Ed., and D. Noveck, Ed.,
>               "Network File System (NFS) Version 4 Minor Version 1
>               External Data Representation Standard (XDR) Description",
>               RFC 5662, January 2010.
> 
>    [14]       The Open Group, "Section 3.372 of Chapter 3 of Base
>               Definitions of The Open Group Base Specifications Issue 6
>               IEEE Std 1003.1, 2004 Edition, HTML Version
>               (www.opengroup.org), ISBN 1931624232", 2004.
> 
>    [15]       Eisler, M., "IANA Considerations for Remote Procedure Call
>               (RPC) Network Identifiers and Universal Address Formats",
>               RFC 5665, January 2010.
> 
>    [16]       The Open Group, "Section 'read()' of System Interfaces of
>               The Open Group Base Specifications Issue 6 IEEE Std
>               1003.1, 2004 Edition, HTML Version (www.opengroup.org),
>               ISBN 1931624232", 2004.
> 
>    [17]       The Open Group, "Section 'readdir()' of System Interfaces
>               of The Open Group Base Specifications Issue 6 IEEE Std
>               1003.1, 2004 Edition, HTML Version (www.opengroup.org),
>               ISBN 1931624232", 2004.
> 
>    [18]       The Open Group, "Section 'write()' of System Interfaces of
>               The Open Group Base Specifications Issue 6 IEEE Std
>               1003.1, 2004 Edition, HTML Version (www.opengroup.org),
>               ISBN 1931624232", 2004.
> 
>    [19]       Hoffman, P. and M. Blanchet, "Preparation of
>               Internationalized Strings ("stringprep")", RFC 3454,
>               December 2002.
> 
>    [20]       The Open Group, "Section 'chmod()' of System Interfaces of
>               The Open Group Base Specifications Issue 6 IEEE Std
>               1003.1, 2004 Edition, HTML Version (www.opengroup.org),
>               ISBN 1931624232", 2004.
> 
>    [21]       International Organization for Standardization,
>               "Information Technology - Universal Multiple-octet coded
>               Character Set (UCS) - Part 1: Architecture and Basic
>               Multilingual Plane", ISO Standard 10646-1, May 1993.
> 
>    [22]       Alvestrand, H., "IETF Policy on Character Sets and
>               Languages", BCP 18, RFC 2277, January 1998.
> 
>    [23]       Hoffman, P. and M. Blanchet, "Nameprep: A Stringprep
>               Profile for Internationalized Domain Names (IDN)",
>               RFC 3491, March 2003.
> 
>    [24]       The Open Group, "Section 'fcntl()' of System Interfaces of
>               The Open Group Base Specifications Issue 6 IEEE Std
>               1003.1, 2004 Edition, HTML Version (www.opengroup.org),
>               ISBN 1931624232", 2004.
> 
>    [25]       The Open Group, "Section 'fsync()' of System Interfaces of
>               The Open Group Base Specifications Issue 6 IEEE Std
>               1003.1, 2004 Edition, HTML Version (www.opengroup.org),
>               ISBN 1931624232", 2004.
> 
>    [26]       The Open Group, "Section 'getpwnam()' of System Interfaces
>               of The Open Group Base Specifications Issue 6 IEEE Std
>               1003.1, 2004 Edition, HTML Version (www.opengroup.org),
>               ISBN 1931624232", 2004.
> 
>    [27]       The Open Group, "Section 'unlink()' of System Interfaces
>               of The Open Group Base Specifications Issue 6 IEEE Std
>               1003.1, 2004 Edition, HTML Version (www.opengroup.org),
>               ISBN 1931624232", 2004.
> 
>    [28]       Schaad, J., Kaliski, B., and R. Housley, "Additional
>               Algorithms and Identifiers for RSA Cryptography for use in
>               the Internet X.509 Public Key Infrastructure Certificate
>               and Certificate Revocation List (CRL) Profile", RFC 4055,
>               June 2005.
> 
>    [29]       National Institute of Standards and Technology,
>               "Cryptographic Algorithm Object Registration", URL
>               http://csrc.nist.gov/groups/ST/crypto_apps_infra/csor/
>               algorithms.html, November 2007.
28171,28173c28242,28244
<    [30]  Shepler, S., Callaghan, B., Robinson, D., Thurlow, R., Beame,
<          C., Eisler, M., and D. Noveck, "Network File System (NFS)
<          version 4 Protocol", RFC 3530, April 2003.
---
>    [30]       Shepler, S., Callaghan, B., Robinson, D., Thurlow, R.,
>               Beame, C., Eisler, M., and D. Noveck, "Network File System
>               (NFS) version 4 Protocol", RFC 3530, April 2003.
28175,28176c28246,28247
<    [31]  Callaghan, B., Pawlowski, B., and P. Staubach, "NFS Version 3
<          Protocol Specification", RFC 1813, June 1995.
---
>    [31]       Callaghan, B., Pawlowski, B., and P. Staubach, "NFS
>               Version 3 Protocol Specification", RFC 1813, June 1995.
28178,28179c28249,28250
<    [32]  Eisler, M., "LIPKEY - A Low Infrastructure Public Key Mechanism
<          Using SPKM", RFC 2847, June 2000.
---
>    [32]       Eisler, M., "LIPKEY - A Low Infrastructure Public Key
>               Mechanism Using SPKM", RFC 2847, June 2000.
28181,28183c28252,28254
<    [33]  Eisler, M., "NFS Version 2 and Version 3 Security Issues and
<          the NFS Protocol's Use of RPCSEC_GSS and Kerberos V5",
<          RFC 2623, June 1999.
---
>    [33]       Eisler, M., "NFS Version 2 and Version 3 Security Issues
>               and the NFS Protocol's Use of RPCSEC_GSS and Kerberos V5",
>               RFC 2623, June 1999.
28185,28186c28256,28258
<    [34]  Juszczak, C., "Improving the Performance and Correctness of an
<          NFS Server", USENIX Conference Proceedings, June 1990.
---
>    [34]       Juszczak, C., "Improving the Performance and Correctness
>               of an NFS Server", USENIX Conference Proceedings, June
>               1990.
28188,28189c28260,28261
<    [35]  Reynolds, J., Ed., "Assigned Numbers: RFC 1700 is Replaced by
<          an On-line Database", RFC 3232, January 2002.
---
>    [35]       Reynolds, J., Ed., "Assigned Numbers: RFC 1700 is Replaced
>               by an On-line Database", RFC 3232, January 2002.
28191,28192c28263,28264
<    [36]  Srinivasan, R., "Binding Protocols for ONC RPC Version 2",
<          RFC 1833, August 1995.
---
>    [36]       Srinivasan, R., "Binding Protocols for ONC RPC Version 2",
>               RFC 1833, August 1995.
28194,28195c28266,28267
<    [37]  Werme, R., "RPC XID Issues", USENIX Conference Proceedings,
<          February 1996.
---
>    [37]       Werme, R., "RPC XID Issues", USENIX Conference
>               Proceedings, February 1996.
28197,28198c28269,28270
<    [38]  Nowicki, B., "NFS: Network File System Protocol specification",
<          RFC 1094, March 1989.
---
>    [38]       Nowicki, B., "NFS: Network File System Protocol
>               specification", RFC 1094, March 1989.
28200,28201c28272,28274
<    [39]  Bhide, A., Elnozahy, E., and S. Morgan, "A Highly Available
<          Network Server", USENIX Conference Proceedings, January 1991.
---
>    [39]       Bhide, A., Elnozahy, E., and S. Morgan, "A Highly
>               Available Network Server", USENIX Conference Proceedings,
>               January 1991.
28203,28204c28276,28277
<    [40]  Halevy, B., Welch, B., and J. Zelenka, "Object-Based Parallel
<          NFS (pNFS) Operations", RFC 5664, January 2010.
---
>    [40]       Halevy, B., Welch, B., and J. Zelenka, "Object-Based
>               Parallel NFS (pNFS) Operations", RFC 5664, January 2010.
28206,28207c28279,28280
<    [41]  Black, D., Glasgow, J., and S. Fridella, "Parallel NFS (pNFS)
<          Block/Volume Layout", RFC 5663, January 2010.
---
>    [41]       Black, D., Glasgow, J., and S. Fridella, "Parallel NFS
>               (pNFS) Block/Volume Layout", RFC 5663, January 2010.
28209,28210c28282,28283
<    [42]  Callaghan, B., "WebNFS Client Specification", RFC 2054,
<          October 1996.
---
>    [42]       Callaghan, B., "WebNFS Client Specification", RFC 2054,
>               October 1996.
28212,28213c28285,28286
<    [43]  Callaghan, B., "WebNFS Server Specification", RFC 2055,
<          October 1996.
---
>    [43]       Callaghan, B., "WebNFS Server Specification", RFC 2055,
>               October 1996.
28215,28216c28288,28289
<    [44]  IESG, "IESG Processing of RFC Errata for the IETF Stream",
<          July 2008.
---
>    [44]       IESG, "IESG Processing of RFC Errata for the IETF Stream",
>               July 2008.
28218,28219c28291,28292
<    [45]  Shepler, S., "NFS Version 4 Design Considerations", RFC 2624,
<          June 1999.
---
>    [45]       Shepler, S., "NFS Version 4 Design Considerations",
>               RFC 2624, June 1999.
28221,28222c28294,28295
<    [46]  The Open Group, "Protocols for Interworking: XNFS, Version 3W,
<          ISBN 1-85912-184-5", February 1998.
---
>    [46]       The Open Group, "Protocols for Interworking: XNFS, Version
>               3W, ISBN 1-85912-184-5", February 1998.
28224,28226c28297,28299
<    [47]  Floyd, S. and V. Jacobson, "The Synchronization of Periodic
<          Routing Messages", IEEE/ACM Transactions on Networking 2(2),
<          pp. 122-136, April 1994.
---
>    [47]       Floyd, S. and V. Jacobson, "The Synchronization of
>               Periodic Routing Messages", IEEE/ACM Transactions on
>               Networking 2(2), pp. 122-136, April 1994.
28228,28230c28301,28303
<    [48]  Satran, J., Meth, K., Sapuntzakis, C., Chadalapaka, M., and E.
<          Zeidner, "Internet Small Computer Systems Interface (iSCSI)",
<          RFC 3720, April 2004.
---
>    [48]       Satran, J., Meth, K., Sapuntzakis, C., Chadalapaka, M.,
>               and E. Zeidner, "Internet Small Computer Systems Interface
>               (iSCSI)", RFC 3720, April 2004.
28232,28233c28305,28306
<    [49]  Snively, R., "Fibre Channel Protocol for SCSI, 2nd Version
<          (FCP-2)", ANSI/INCITS 350-2003, Oct 2003.
---
>    [49]       Snively, R., "Fibre Channel Protocol for SCSI, 2nd Version
>               (FCP-2)", ANSI/INCITS 350-2003, Oct 2003.
28235,28237c28308,28310
<    [50]  Weber, R., "Object-Based Storage Device Commands (OSD)", ANSI/
<          INCITS 400-2004, July 2004,
<          <http://www.t10.org/ftp/t10/drafts/osd/osd-r10.pdf>.
---
>    [50]       Weber, R., "Object-Based Storage Device Commands (OSD)",
>               ANSI/INCITS 400-2004, July 2004,
>               <http://www.t10.org/ftp/t10/drafts/osd/osd-r10.pdf>.
28239,28241c28312,28315
<    [51]  Carns, P., Ligon III, W., Ross, R., and R. Thakur, "PVFS: A
<          Parallel File System for Linux Clusters.", Proceedings of the
<          4th Annual Linux Showcase and Conference, 2000.
---
>    [51]       Carns, P., Ligon III, W., Ross, R., and R. Thakur, "PVFS:
>               A Parallel File System for Linux Clusters.",
>               Proceedings of the 4th Annual Linux Showcase and
>               Conference, 2000.
28243,28244c28317,28318
<    [52]  The Open Group, "The Open Group Base Specifications Issue 6,
<          IEEE Std 1003.1, 2004 Edition", 2004.
---
>    [52]       The Open Group, "The Open Group Base Specifications Issue
>               6, IEEE Std 1003.1, 2004 Edition", 2004.
28246c28320
<    [53]  Callaghan, B., "NFS URL Scheme", RFC 2224, October 1997.
---
>    [53]       Callaghan, B., "NFS URL Scheme", RFC 2224, October 1997.
28248,28249c28322,28323
<    [54]  Chiu, A., Eisler, M., and B. Callaghan, "Security Negotiation
<          for WebNFS", RFC 2755, January 2000.
---
>    [54]       Chiu, A., Eisler, M., and B. Callaghan, "Security
>               Negotiation for WebNFS", RFC 2755, January 2000.
28251,28252c28325,28327
<    [55]  Narten, T. and H. Alvestrand, "Guidelines for Writing an IANA
<          Considerations Section in RFCs", BCP 26, RFC 5226, May 2008.
---
>    [55]       Narten, T. and H. Alvestrand, "Guidelines for Writing an
>               IANA Considerations Section in RFCs", BCP 26, RFC 5226,
>               May 2008.
28280c28355
<    parallel I/O. Garth Gibson and Peter Corbett started the pNFS effort
---
>    parallel I/O.  Garth Gibson and Peter Corbett started the pNFS effort
28360c28435
<    Finkelstein, Jason Goldschmidt, Vijay K. Gurbani, Sergey Klyushin,
---
>    Finkelstein, Jason Goldschmidt, Vijay K.  Gurbani, Sergey Klyushin,
28366d28440
< 
28374c28448
<    EMail: shepler@storspeed.com
---
>    Email: shepler@storspeed.com
28383c28457
<    EMail: mike@eisler.com
---
>    Email: mike@eisler.com
28393c28467
<    EMail: dnoveck@netapp.com
---
>    Email: dnoveck@netapp.com
