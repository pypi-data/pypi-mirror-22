# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pytspsa')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pytspsa')
    _pytspsa = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pytspsa', [dirname(__file__)])
        except ImportError:
            import _pytspsa
            return _pytspsa
        try:
            _mod = imp.load_module('_pytspsa', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pytspsa = swig_import_helper()
    del swig_import_helper
else:
    import _pytspsa
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Solution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solution, name)
    __repr__ = _swig_repr
    __swig_setmethods__["solution"] = _pytspsa.Solution_solution_set
    __swig_getmethods__["solution"] = _pytspsa.Solution_solution_get
    if _newclass:
        solution = _swig_property(_pytspsa.Solution_solution_get, _pytspsa.Solution_solution_set)
    __swig_setmethods__["p_dists_f"] = _pytspsa.Solution_p_dists_f_set
    __swig_getmethods__["p_dists_f"] = _pytspsa.Solution_p_dists_f_get
    if _newclass:
        p_dists_f = _swig_property(_pytspsa.Solution_p_dists_f_get, _pytspsa.Solution_p_dists_f_set)

    def __init__(self, *args):
        this = _pytspsa.new_Solution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def _init(self, n: 'int const', dists_f: 'float const **') -> "void":
        return _pytspsa.Solution__init(self, n, dists_f)

    def getlength(self) -> "float":
        return _pytspsa.Solution_getlength(self)

    def setlength(self) -> "void":
        return _pytspsa.Solution_setlength(self)

    def getRoute(self) -> "std::string":
        return _pytspsa.Solution_getRoute(self)

    def setInit(self) -> "void":
        return _pytspsa.Solution_setInit(self)

    def getNewSolution_br(self) -> "int":
        return _pytspsa.Solution_getNewSolution_br(self)

    def setNewSolution_br(self) -> "void":
        return _pytspsa.Solution_setNewSolution_br(self)

    def getNewSolution_vi(self) -> "int":
        return _pytspsa.Solution_getNewSolution_vi(self)

    def setNewSolution_vi(self) -> "void":
        return _pytspsa.Solution_setNewSolution_vi(self)

    def setNext(self) -> "void":
        return _pytspsa.Solution_setNext(self)

    def reverse(self, idx: 'int const') -> "void":
        return _pytspsa.Solution_reverse(self, idx)

    def localSearch(self) -> "void":
        return _pytspsa.Solution_localSearch(self)

    def copy(self, Other: 'Solution') -> "void":
        return _pytspsa.Solution_copy(self, Other)

    def setSolution(self, solution: 'int *') -> "void":
        return _pytspsa.Solution_setSolution(self, solution)

    def verify(self) -> "bool":
        return _pytspsa.Solution_verify(self)
    __swig_destroy__ = _pytspsa.delete_Solution
    __del__ = lambda self: None
Solution_swigregister = _pytspsa.Solution_swigregister
Solution_swigregister(Solution)
cvar = _pytspsa.cvar
BIGM = cvar.BIGM
NUMOPT = cvar.NUMOPT
NUMVI = cvar.NUMVI

class Tsp_sa(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tsp_sa, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tsp_sa, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pytspsa.delete_Tsp_sa
    __del__ = lambda self: None

    def set_num_nodes(self, size: 'int') -> "void":
        return _pytspsa.Tsp_sa_set_num_nodes(self, size)

    def add_by_coordinates(self, *args) -> "void":
        return _pytspsa.Tsp_sa_add_by_coordinates(self, *args)

    def add_by_distances(self, *args) -> "void":
        return _pytspsa.Tsp_sa_add_by_distances(self, *args)

    def init_random(self) -> "void":
        return _pytspsa.Tsp_sa_init_random(self)

    def get_alpha(self) -> "float":
        return _pytspsa.Tsp_sa_get_alpha(self)

    def set_alpha(self, alpha: 'float') -> "void":
        return _pytspsa.Tsp_sa_set_alpha(self, alpha)

    def get_beta(self) -> "float":
        return _pytspsa.Tsp_sa_get_beta(self)

    def set_beta(self, beta: 'float') -> "void":
        return _pytspsa.Tsp_sa_set_beta(self, beta)

    def set_current_temperature(self, t: 'double') -> "void":
        return _pytspsa.Tsp_sa_set_current_temperature(self, t)

    def set_cooling_rate(self, t: 'double') -> "void":
        return _pytspsa.Tsp_sa_set_cooling_rate(self, t)

    def set_end_temperatue(self, t: 'double') -> "void":
        return _pytspsa.Tsp_sa_set_end_temperatue(self, t)

    def set_temperature_greedy(self, t: 'double') -> "void":
        return _pytspsa.Tsp_sa_set_temperature_greedy(self, t)

    def set_t_v_factor(self, t: 'double') -> "void":
        return _pytspsa.Tsp_sa_set_t_v_factor(self, t)

    def get_distance_matrice(self) -> "float **":
        return _pytspsa.Tsp_sa_get_distance_matrice(self)

    def sa(self, *args) -> "void":
        return _pytspsa.Tsp_sa_sa(self, *args)

    def sa_auto_parameter(self, num_runover: 'int const') -> "void":
        return _pytspsa.Tsp_sa_sa_auto_parameter(self, num_runover)

    def getvalue(self) -> "float":
        return _pytspsa.Tsp_sa_getvalue(self)

    def getBestSolution(self) -> "Solution &":
        return _pytspsa.Tsp_sa_getBestSolution(self)

    def setBestSolution_init(self) -> "void":
        return _pytspsa.Tsp_sa_setBestSolution_init(self)

    def __init__(self):
        this = _pytspsa.new_Tsp_sa()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Tsp_sa_swigregister = _pytspsa.Tsp_sa_swigregister
Tsp_sa_swigregister(Tsp_sa)

debug = _pytspsa.debug
info = _pytspsa.info
warning = _pytspsa.warning
error = _pytspsa.error

def setLogLevel(l: 'LogLevel') -> "void":
    return _pytspsa.setLogLevel(l)
setLogLevel = _pytspsa.setLogLevel
# This file is compatible with both classic and new-style classes.


