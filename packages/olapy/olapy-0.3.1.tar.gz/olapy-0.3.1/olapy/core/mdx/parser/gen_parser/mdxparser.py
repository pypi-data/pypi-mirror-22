#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import (absolute_import, division, print_function,
                        unicode_literals)

from grako.buffering import Buffer
from grako.parsing import Parser, graken
from grako.util import RE_FLAGS, generic_main, re  # noqa

__all__ = ['MdxParserGen', 'UnknownSemantics', 'main']

KEYWORDS = {}


class UnknownBuffer(Buffer):
    """
    main class for parsing MDX query generated by grako
    """

    def __init__(self,
                 text,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 namechars='',
                 **kwargs):
        super(UnknownBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs)


class MdxParserGen(Parser):

    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 left_recursion=False,
                 parseinfo=True,
                 keywords=None,
                 namechars='',
                 buffer_class=UnknownBuffer,
                 **kwargs):
        if keywords is None:
            keywords = KEYWORDS
        super(MdxParserGen, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs)

    @graken()
    def _MDX_statement_(self):
        self._select_statement_()

    @graken('SelectStatement')
    def _select_statement_(self):
        self._token('SELECT')
        self.name_last_node('name')
        with self._optional():
            self._axis_specification_()
            self.name_last_node('axis_specification_columns')
        with self._optional():
            self._token(',')
            self._axis_specification_()
            self.name_last_node('axis_specification_rows')
        self._token('FROM')
        self._cube_specification_()
        self.name_last_node('cube_specification')
        with self._optional():
            self._token('WHERE')
            self._condition_specification_()
            self.name_last_node('condition_specification')
        self._check_eof()
        self.ast._define([
            'axis_specification_columns', 'axis_specification_rows',
            'condition_specification', 'cube_specification', 'name'
        ], [])

    @graken()
    def _axis_specification_(self):
        with self._optional():
            self._left_accolade_()
        with self._optional():
            self._fetch_form_()
        self._dim_props_place_()
        self.name_last_node('@')
        with self._optional():
            self._right_accolade_()
        self._token('ON')
        self._axis_name_()

    @graken()
    def _dim_props_place_(self):
        with self._optional():
            self._left_parentheses_()
        self._dim_props_type_()
        self.name_last_node('@')
        with self._optional():
            self._right_parentheses_()

    @graken()
    def _dim_props_type_(self):
        with self._optional():
            self._left_accolade_()
        with self._optional():
            self._fetch_type_()
        self._dim_props_op_l1_()
        self.name_last_node('@')
        with self._optional():
            self._right_accolade_()
        with self._optional():

            def block1():
                self._operator_()
                self.name_last_node('@')
                self._dim_props_type_()

            self._closure(block1)

    @graken()
    def _dim_props_op_l1_(self):
        with self._optional():
            self._left_parentheses_()
        self._dim_props_op_()
        self.name_last_node('@')
        with self._optional():
            self._right_parentheses_()

    @graken()
    def _dim_props_op_(self):
        with self._optional():
            self._left_accolade_()
        self._dim_props_ligne_()
        self.name_last_node('@')
        with self._optional():
            self._right_accolade_()
        with self._optional():

            def block1():
                self._comma_()
                self.name_last_node('@')
                self._dim_props_op_()

            self._closure(block1)

    @graken()
    def _dim_props_ligne_(self):
        with self._optional():
            self._left_parentheses_()
        self._dimension_place_()
        self.name_last_node('@')
        with self._optional():
            self._right_parentheses_()
        with self._optional():

            def block1():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._comma_()
                            self.name_last_node('@')
                        with self._option():
                            self._dpoint_()
                            self.name_last_node('@')
                        self._error('no available options')
                self._dim_props_ligne_()
                self.name_last_node('@')

            self._closure(block1)

    @graken()
    def _dimension_place_(self):
        with self._choice():
            with self._option():
                with self._optional():
                    self._left_accolade_()
                self._dim_props_()
                self.name_last_node('@')
                with self._optional():
                    self._point_()
                    self._laste_node_()
                    self.name_last_node('@')
                with self._optional():
                    self._comma_()
                    self.name_last_node('@')
                    self._dim_props_()
                    self.name_last_node('@')
                    with self._optional():
                        self._point_()
                        self._laste_node_()
                        self.name_last_node('@')
                with self._optional():
                    self._dpoint_()
                    self.name_last_node('@')
                    self._dim_props_()
                    self.name_last_node('@')
                    with self._optional():
                        self._point_()
                        self._laste_node_()
                        self.name_last_node('@')
                with self._optional():
                    self._right_accolade_()
            with self._option():
                self._dimension_shortcut_()
                self.name_last_node('@')
            self._error('no available options')

    @graken()
    def _dim_props_(self):

        def block0():
            with self._optional():
                self._point_()
            with self._optional():
                self._left_bracket_()
            self._dimension_()
            self.name_last_node('@')
            with self._optional():
                self._right_bracket_()

        self._closure(block0)

    @graken()
    def _laste_node_(self):
        with self._choice():
            with self._option():
                self._token('members')
            with self._option():
                self._token('children')
            with self._option():
                self._token('Members')
            with self._option():
                self._token('ALLMEMBERS')
            self._error('expecting one of: ALLMEMBERS Members children members')

    @graken()
    def _dimension_(self):
        self._pattern(r"[a-zA-Z0-9'_'' '',']*")
        self.name_last_node('@')

    @graken()
    def _axis_name_(self):
        with self._choice():
            with self._option():
                self._token('0')
            with self._option():
                self._token('1')
            with self._option():
                self._token('COLUMNS')
            with self._option():
                self._token('ROWS')
            with self._option():
                self._token('_ROWS')
            self._error('expecting one of: 0 1 COLUMNS ROWS _ROWS')

    @graken()
    def _cube_specification_(self):
        with self._optional():
            self._left_bracket_()
        self._dimension_()
        with self._optional():
            self._right_bracket_()

    @graken()
    def _condition_specification_(self):
        with self._optional():
            self._left_parentheses_()

        def block0():
            with self._optional():
                self._point_()
            with self._optional():
                self._left_bracket_()
            self._dimension_()
            self.name_last_node('@')
            with self._optional():
                self._right_bracket_()

        self._closure(block0)
        with self._optional():
            self._right_parentheses_()

    @graken()
    def _digit_(self):
        with self._choice():
            with self._option():
                self._token('0')
            with self._option():
                self._token('1')
            with self._option():
                self._token('2')
            with self._option():
                self._token('3')
            with self._option():
                self._token('4')
            with self._option():
                self._token('5')
            with self._option():
                self._token('6')
            with self._option():
                self._token('7')
            with self._option():
                self._token('8')
            with self._option():
                self._token('9')
            self._error('expecting one of: 0 1 2 3 4 5 6 7 8 9')

    @graken()
    def _fetch_type_(self):
        with self._choice():
            with self._option():
                self._token('CROSSJOIN')
            with self._option():
                self._token('NONEMPTY')
            with self._option():
                self._token('union')
            with self._option():
                self._token('except')
            with self._option():
                self._token('extract')
            self._error(
                'expecting one of: CROSSJOIN NONEMPTY except extract union')

    @graken()
    def _dimension_shortcut_(self):
        with self._choice():
            with self._option():
                self._token('all')
            with self._option():
                self._token('time')
            self._error('expecting one of: all time')

    @graken()
    def _fetch_form_(self):
        with self._choice():
            with self._option():
                self._token('NONEMPTY')
            with self._option():
                self._token('non_empty')
            with self._option():
                self._token('non empty')
            self._error('expecting one of: NONEMPTY non empty non_empty')

    @graken()
    def _left_bracket_(self):
        self._token('[')

    @graken()
    def _right_bracket_(self):
        self._token(']')

    @graken()
    def _left_parentheses_(self):
        self._token('(')

    @graken()
    def _right_parentheses_(self):
        self._token(')')

    @graken()
    def _left_accolade_(self):
        self._token('{')

    @graken()
    def _right_accolade_(self):
        self._token('}')

    @graken()
    def _point_(self):
        self._token('.')

    @graken()
    def _dpoint_(self):
        self._token(':')

    @graken()
    def _comma_(self):
        self._token(',')

    @graken()
    def _operator_(self):
        with self._choice():
            with self._option():
                self._token('+')
            with self._option():
                self._token('-')
            with self._option():
                self._token('/')
            with self._option():
                self._token('*')
            self._error('expecting one of: * + - /')


class UnknownSemantics(object):

    def mdx_statement(self, ast):
        return ast

    def select_statement(self, ast):
        return ast

    def axis_specification(self, ast):
        return ast

    def dim_props_place(self, ast):
        return ast

    def dim_props_type(self, ast):
        return ast

    def dim_props_op_l1(self, ast):
        return ast

    def dim_props_op(self, ast):
        return ast

    def dim_props_ligne(self, ast):
        return ast

    def dimension_place(self, ast):
        return ast

    def dim_props(self, ast):
        return ast

    def laste_node(self, ast):
        return ast

    def dimension(self, ast):
        return ast

    def axis_name(self, ast):
        return ast

    def cube_specification(self, ast):
        return ast

    def condition_specification(self, ast):
        return ast

    def digit(self, ast):
        return ast

    def fetch_type(self, ast):
        return ast

    def dimension_shortcut(self, ast):
        return ast

    def fetch_form(self, ast):
        return ast

    def left_bracket(self, ast):
        return ast

    def right_bracket(self, ast):
        return ast

    def left_parentheses(self, ast):
        return ast

    def right_parentheses(self, ast):
        return ast

    def left_accolade(self, ast):
        return ast

    def right_accolade(self, ast):
        return ast

    def point(self, ast):
        return ast

    def dpoint(self, ast):
        return ast

    def comma(self, ast):
        return ast

    def operator(self, ast):
        return ast


def main(filename, startrule, **kwargs):
    with open(filename) as f:
        text = f.read()
    parser = MdxParserGen(parseinfo=False)
    return parser.parse(text, startrule, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    ast = generic_main(main, MdxParserGen, name='Unknown')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()
