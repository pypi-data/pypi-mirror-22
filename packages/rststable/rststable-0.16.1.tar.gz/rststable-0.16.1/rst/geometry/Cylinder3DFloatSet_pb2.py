# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rst/geometry/Cylinder3DFloatSet.proto

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)


import rst.geometry.Cylinder3DFloat_pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='rst/geometry/Cylinder3DFloatSet.proto',
  package='rst.geometry',
  serialized_pb='\n%rst/geometry/Cylinder3DFloatSet.proto\x12\x0crst.geometry\x1a\"rst/geometry/Cylinder3DFloat.proto\"F\n\x12\x43ylinder3DFloatSet\x12\x30\n\tcylinders\x18\x01 \x03(\x0b\x32\x1d.rst.geometry.Cylinder3DFloatB\x18\x42\x16\x43ylinder3DFloatSetType')




_CYLINDER3DFLOATSET = _descriptor.Descriptor(
  name='Cylinder3DFloatSet',
  full_name='rst.geometry.Cylinder3DFloatSet',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='cylinders', full_name='rst.geometry.Cylinder3DFloatSet.cylinders', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=91,
  serialized_end=161,
)

_CYLINDER3DFLOATSET.fields_by_name['cylinders'].message_type = rst.geometry.Cylinder3DFloat_pb2._CYLINDER3DFLOAT
DESCRIPTOR.message_types_by_name['Cylinder3DFloatSet'] = _CYLINDER3DFLOATSET

class Cylinder3DFloatSet(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CYLINDER3DFLOATSET

  # @@protoc_insertion_point(class_scope:rst.geometry.Cylinder3DFloatSet)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), 'B\026Cylinder3DFloatSetType')
# @@protoc_insertion_point(module_scope)
