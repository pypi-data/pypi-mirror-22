# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rst/audition/SoundChunkCollection.proto

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)


import rst.audition.SoundChunk_pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='rst/audition/SoundChunkCollection.proto',
  package='rst.audition',
  serialized_pb='\n\'rst/audition/SoundChunkCollection.proto\x12\x0crst.audition\x1a\x1drst/audition/SoundChunk.proto\"A\n\x14SoundChunkCollection\x12)\n\x07\x65lement\x18\x01 \x03(\x0b\x32\x18.rst.audition.SoundChunkB\x1a\x42\x18SoundChunkCollectionType')




_SOUNDCHUNKCOLLECTION = _descriptor.Descriptor(
  name='SoundChunkCollection',
  full_name='rst.audition.SoundChunkCollection',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='element', full_name='rst.audition.SoundChunkCollection.element', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=88,
  serialized_end=153,
)

_SOUNDCHUNKCOLLECTION.fields_by_name['element'].message_type = rst.audition.SoundChunk_pb2._SOUNDCHUNK
DESCRIPTOR.message_types_by_name['SoundChunkCollection'] = _SOUNDCHUNKCOLLECTION

class SoundChunkCollection(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _SOUNDCHUNKCOLLECTION

  # @@protoc_insertion_point(class_scope:rst.audition.SoundChunkCollection)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), 'B\030SoundChunkCollectionType')
# @@protoc_insertion_point(module_scope)
