# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rst/audition/Phoneme.proto

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)




DESCRIPTOR = _descriptor.FileDescriptor(
  name='rst/audition/Phoneme.proto',
  package='rst.audition',
  serialized_pb='\n\x1arst/audition/Phoneme.proto\x12\x0crst.audition\"+\n\x07Phoneme\x12\x0e\n\x06symbol\x18\x01 \x02(\t\x12\x10\n\x08\x64uration\x18\x02 \x02(\rB\rB\x0bPhonemeType')




_PHONEME = _descriptor.Descriptor(
  name='Phoneme',
  full_name='rst.audition.Phoneme',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='symbol', full_name='rst.audition.Phoneme.symbol', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='duration', full_name='rst.audition.Phoneme.duration', index=1,
      number=2, type=13, cpp_type=3, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=44,
  serialized_end=87,
)

DESCRIPTOR.message_types_by_name['Phoneme'] = _PHONEME

class Phoneme(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _PHONEME

  # @@protoc_insertion_point(class_scope:rst.audition.Phoneme)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), 'B\013PhonemeType')
# @@protoc_insertion_point(module_scope)
