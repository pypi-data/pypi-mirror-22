# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rst/vision/LaserScan.proto

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)




DESCRIPTOR = _descriptor.FileDescriptor(
  name='rst/vision/LaserScan.proto',
  package='rst.vision',
  serialized_pb='\n\x1arst/vision/LaserScan.proto\x12\nrst.vision\"4\n\tLaserScan\x12\x13\n\x0bscan_values\x18\x01 \x03(\x02\x12\x12\n\nscan_angle\x18\x02 \x02(\x02\x42\x0f\x42\rLaserScanType')




_LASERSCAN = _descriptor.Descriptor(
  name='LaserScan',
  full_name='rst.vision.LaserScan',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='scan_values', full_name='rst.vision.LaserScan.scan_values', index=0,
      number=1, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='scan_angle', full_name='rst.vision.LaserScan.scan_angle', index=1,
      number=2, type=2, cpp_type=6, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=42,
  serialized_end=94,
)

DESCRIPTOR.message_types_by_name['LaserScan'] = _LASERSCAN

class LaserScan(_message.Message):
  __metaclass__ = _reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _LASERSCAN

  # @@protoc_insertion_point(class_scope:rst.vision.LaserScan)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), 'B\rLaserScanType')
# @@protoc_insertion_point(module_scope)
