#!/usr/bin/env python
import os
import shutil
import glob
import argparse

import numpy as np
from matplotlib.pyplot import rcParams

def check_logfiles(fns):
    """
    Make sure that you analyze log files from the same run.
    All logfiles from the same run have the same id in 2nd position
    in the filename (which is the starting time).

    Parameters
    -----------
        * fns: list of strings, contain the names of the log files to analyze.
    """
    id_ = [fn.split('_')[1] for fn in fns]
    assert len(np.unique(id_)) == 1, \
    'You are trying to analyze log files from different runs!'

## TODO: I reckon the interface is a bit rude and ugly. If time permits
## I need to write a better interface.
class Analyze_Output():
    """ Analyze log files produced by InsideMe """
    def __init__(self, output):
        """
        Create the output folder to store outputs.
        Extract duration and memory consumption per processor.

        Parameters
        -----------
            * output: string, the name of the output folder.
        """
        self.output = output
        self.input_header = [
            'Processor', 'Number of Processors',
            'Function', 'Time Input (s)', 'Time Output (s)',
            'Memory Input (Mb)', 'Memory Output (Mb)',
            'Field']

        self.output_header = [
            'Field', 'Number of calls', 'Time spent (s)', 'Time (s)',
            'Memory consumption (Mb)']

        if not os.path.isdir(self.output):
            fns = glob.glob('logproc_*.log')
            check_logfiles(fns)

            os.makedirs(self.output)
            for fn in fns:
                shutil.move(fn, self.output)

        self.full_stats = self.full_stats_per_processors()
        self.dic_time_per_processor = self.time_per_processor(self.full_stats)
        self.dic_memory_per_processor = self.memory_per_processor(self.full_stats)

    def full_stats_per_processors(self):
        """
        Extract data from the log files into a dictionary.
        """
        fns = glob.glob(os.path.join(self.output, '*.log'))
        dic = {}
        for fn in fns:
            data = np.loadtxt(fn, dtype=str, delimiter='//').T
            proc = data[0][1]
            dic[proc] = {}
            for pos, k in enumerate(self.input_header):
                dic[proc][k] = data[pos]
        return dic

    def time_per_processor(self, input_dic):
        """
        Extract the duration times, and group it per field.
        Structure of the output:
            Processor
                |-- Field
                    |-- Number of calls
                    |-- Time spent (s)

        Parameters
        -----------
            * input_dic: dictionary, data from the log files.
        """
        output_dic = {k:{} for k in input_dic.keys()}

        for proc in input_dic.keys():
            ## Dictionary containing the duration
            ## per call for all fields, and total number of calls.
            output_dic[proc] = {
                k:{i:j for i,j in zip(
                        ['Number of calls', 'Time spent (s)'], [0, []])}
                        for k in np.unique(input_dic[proc]['Field'])}

            ## Group all times spent per field
            for pos, field in enumerate(input_dic[proc]['Field']):
                output_dic[proc][field]['Number of calls'] += 1

                time_out = float(input_dic[proc]['Time Output (s)'][pos])
                time_in = float(input_dic[proc]['Time Input (s)'][pos])
                output_dic[proc][field]['Time spent (s)'].append(
                    time_out - time_in)

            ## Sum time values per field
            for pos, field in enumerate(output_dic[proc].keys()):
                output_dic[proc][field]['Time spent (s)'] = np.sum(
                    output_dic[proc][field]['Time spent (s)'])

            ## Compute the total amount of time between
            ## the first call and the last call
            total_time_recorded = 0.
            for pos, field in enumerate(output_dic[proc].keys()):
                total_time_recorded += output_dic[
                    proc][field]['Time spent (s)']

            ## Find the leftover: total_time - total_time_recorded
            output_dic[proc]['Others'] = {
                'Time spent (s)': 0., 'Number of calls': 1.}
            output_dic[proc]['Others']['Time spent (s)'] = float(
                input_dic[proc]['Time Output (s)'][-1]) - float(
                    input_dic[proc]['Time Input (s)'][0]) - total_time_recorded

        return output_dic

    def memory_per_processor(self, input_dic):
        """
        Extract the memory consumption, and group it per field.
        Structure of the output:
            Processor
                |-- Function name (in/out)
                |-- Field (in/out)
                |-- Memory consumption [Mb] (in/out)
                |-- Time [s] (in/out)

        Parameters
        -----------
            * input_dic: dictionary, data from the log files.
        """
        output_dic = {k:{} for k in input_dic.keys()}
        for proc in input_dic.keys():
            ## Dictionary containing the memory consumption
            ## per call for all fields, as a function of time
            output_dic[proc] = {i:j for i,j in zip(
                        ['Function',
                        'Field',
                        'Memory consumption (Mb)',
                        'Time (s)'], [[], [], [], []])}

            ## Group all times spent per field
            for pos, function in enumerate(input_dic[proc]['Function']):
                output_dic[proc]['Function'].append(function + ' (in)')
                output_dic[proc]['Function'].append(function + ' (out)')
                output_dic[proc]['Field'].append(input_dic[proc]['Field'][pos])
                output_dic[proc]['Field'].append(input_dic[proc]['Field'][pos])

                output_dic[proc]['Memory consumption (Mb)'].append(
                    float(input_dic[proc]['Memory Input (Mb)'][pos]))
                output_dic[proc]['Memory consumption (Mb)'].append(
                    float(input_dic[proc]['Memory Output (Mb)'][pos]))

                output_dic[proc]['Time (s)'].append(
                    float(input_dic[proc]['Time Input (s)'][pos]))
                output_dic[proc]['Time (s)'].append(
                    float(input_dic[proc]['Time Output (s)'][pos]))

        return output_dic

class Plot_Data():
    """
    Plot the data from the log files.
    The plots are done directly in javascript (using plotly-1.27.0.min.js),
    because python API for plotly requires login credentials...
    Et je n'ai pas envie d'ouvrir un compte ;-)
    The output is a html document.
    """
    def __init__(self, processor_data):
        """ Grab data from Analyze_Output and output html file with the data """
        self.data_time = processor_data.dic_time_per_processor
        self.data_memory = processor_data.dic_memory_per_processor
        self.output = processor_data.output
        self.htmlfile()

    def format_data_piechart_js_allproc(self, div='MyDiv'):
        """
        If more than one processor has to be analyzed,
        we include a summary (time and memory) of all processors.
        The plot is done in javascript.

        Parameters
        -----------
            * div: string, tag defining a division or a section
                in the HTML document where the data will be plotted.
                Should be unique.

        Output:
        -----------
            * js: string, contain the data of the processor <proc> to
                be plotted. The plot is done in javascript, so just insert
                <js> inside your html file, with the correct <div>.
        """
        prop_cycle = rcParams['axes.prop_cycle']
        colors = prop_cycle.by_key()['color']

        procs = self.data_time.keys()
        data_time_tot = {i:0 for i in procs}
        for proc in procs:
            for k in self.data_time[proc].keys():
                data_time_tot[proc] += self.data_time[proc][k]['Time spent (s)']

        ## Duration plot
        js = ''
        js += 'var data1 = {'
        js += 'values: ['
        for proc in procs:
            js += '%.3f, ' % data_time_tot[proc]
        js += '],'
        js += 'labels: ['
        for proc in procs:
            js += '"Time (s): proc %s", ' % proc
        js += '],'
        js += 'marker: { colors: ['
        for pos_proc, proc in enumerate(procs):
            js += '"%s", ' % colors[int(proc)]
        js += ']},'

        # style
        js += 'domain: {'
        js += 'x: [%.2f, %.2f],' % (0.0, 0.4)
        js += 'y: [0, 1.0],'
        js += '},'
        js += "type: 'pie',"
        js += "hoverinfo: 'label+percent+value',"
        js += 'opacity: 0.9,'
        js += 'hole: 0.2,'
        js += 'pull: 0.05};'
        js += '\n'

        ## Memory consumption plot
        start_time = np.min([
                np.min(
                    [self.data_memory[proc]['Time (s)'] for proc in procs])])

        for proc in procs:
            js += 'var data_proc%s = ' % proc
            js += '{'

            # data
            js += 'x: ['
            for k in self.data_memory[proc]['Time (s)']:
                js += '%.3f, ' % (k - start_time)
            js += '],'
            js += 'y: ['
            for k in self.data_memory[proc]['Memory consumption (Mb)']:
                js += '%.3f, ' % k
            js += '],'

            # style
            js += "type: 'scatter',"
            js += "mode: 'lines',"
            js += 'line: { color: "%s"},' % colors[int(proc)]
            js += "name: 'Memory (Mb): proc %s'," % proc
            js += "xaxis: 'x2',"
            js += "yaxis: 'y2',"
            js += "hoverinfo: 'name+x+y'"
            js += '};\n'

        ## Add all procs
        js += 'var data = [data1, '
        for proc in procs:
            js += 'data_proc%s,' % proc
        js += '];'

        ## Layout for the two subplots
        js += 'var layout = {'
        js += 'title: "Summary all processors (%s)",' % (
            len(self.data_time.keys()))
        js += 'xaxis: {domain: [0.0, 0.4],'
        js += 'zeroline: false, '
        js += 'showticklabels: false, '
        js += 'showgrid: false, '
        js += 'showline: false},'
        js += 'yaxis: {domain: [0.0, 1.0], title: "Time spent (s)",'
        js += 'zeroline: false, '
        js += 'showticklabels: false, '
        js += 'showgrid: false, '
        js += 'showline: false},'
        js += "yaxis2: {anchor: 'x2', title: 'Memory consumption (Mb)'},"
        js += 'xaxis2: {domain: [0.6, 1.0], title: "Time (s)"},'
        js += 'height: 450,'
        js += 'width: 1200};'
        js += '\n'
        js += "Plotly.newPlot('%s', data, layout);" % div

        return js

    def format_data_piechart_js_perproc(self, div='MyDiv', proc='0'):
        """
        Plot the details for a given processor.

        Parameters
        -----------
            * div: string, tag defining a division or a section
                in the HTML document where the data will be plotted.
                Should be different for different processors.
            * proc: string, the rank of the processor analyzed.

        Output:
        -----------
            * js: string, contain the data of the processor <proc> to
                be plotted. The plot is done in javascript, so just insert
                <js> inside your html file, with the correct <div>.

        """
        prop_cycle = rcParams['axes.prop_cycle']
        colors = prop_cycle.by_key()['color']

        ## Duration plot
        js = ''
        js += 'var data1 = {'
        js += 'values: ['
        for k in self.data_time[proc].keys():
            js += '%.3f, ' % self.data_time[proc][k]['Time spent (s)']
        js += '],'
        js += 'labels: ['
        for k in self.data_time[proc].keys():
            js += '"%s", ' % k
        js += '],'
        js += 'marker: { colors: ['
        for pos_k, k in enumerate(self.data_time[proc].keys()):
            js += '"%s", ' % colors[pos_k]
        js += ']},'
        js += 'domain: {'
        js += 'x: [%.2f, %.2f],' % (0.0, 0.4)
        js += 'y: [0, 1.0],'
        js += '},'
        js += "type: 'pie',"
        js += "hoverinfo: 'label+percent+value',"
        js += 'opacity: 0.9,'
        js += 'hole: 0.2,'
        js += 'pull: 0.05};'
        js += '\n'

        ## Memory consumption plot
        start_time = np.min([
                np.min(
                    [self.data_memory[k]['Time (s)'] for k in self.data_memory.keys()])])

        stop_time = np.max([
                np.max(
                    [self.data_memory[k]['Time (s)'] for k in self.data_memory.keys()])])

        js += 'var data2 = {'
        js += "type: 'scatter',"
        js += "mode: 'lines+markers',"
        js += 'x: ['
        for k in self.data_memory[proc]['Time (s)']:
            js += '%.3f, ' % (k - start_time)
        js += '],'
        js += 'y: ['
        for k in self.data_memory[proc]['Memory consumption (Mb)']:
            js += '%.3f, ' % k
        js += '],'
        js += 'text: ['
        for pos_k, k in enumerate(
            self.data_memory[proc]['Function']):
            js += '"%s (%s)", ' % (k, self.data_memory[proc]['Field'][pos_k])
        js += '],'
        js += 'line: { color: "%s"},' % colors[-1]
        js += "name: 'Memory consumption (Mb)',"
        js += "xaxis: 'x2',"
        js += "yaxis: 'y2',"
        js += "hoverinfo: 'text+x+y'"
        js += '};\n'

        js += 'var data = [data1, data2];'

        js += 'var layout = {'
        js += 'title: "Processor %d",' % (int(proc))
        js += 'xaxis: {domain: [0.0, 0.4],'
        js += 'zeroline: false, '
        js += 'showticklabels: false, '
        js += 'showgrid: false, '
        js += 'showline: false},'
        js += 'yaxis: {domain: [0.0, 1.0], title: "Time spent (s)",'
        js += 'zeroline: false, '
        js += 'showticklabels: false, '
        js += 'showgrid: false, '
        js += 'showline: false},'
        js += "yaxis2: {anchor: 'x2', title: 'Memory consumption (Mb)'},"
        js += 'xaxis2: {domain: [0.6, 1.0], title: "Time (s)",'

        ## Add 10% for the range of time for visualisation
        js += 'range: [0., %.3f]},' % (1.1*(stop_time - start_time))
        js += 'height: 450,'
        js += 'width: 1200};'
        js += '\n'
        js += "Plotly.newPlot('%s', data, layout);" % div

        return js

    def htmlfile(self):
        """
        Write the data into a html document.
        """
        sorted_proc = np.sort(self.data_time.keys())
        nproc = len(sorted_proc)
        divs = ''
        js = ''

        ## If more than 1 processor, output a summary on top
        if nproc > 1:
            js += self.format_data_piechart_js_allproc(div='allprocs')
            divs += '<div id="allprocs"'
            divs += 'style="width: 950px; height: 450px;"></div>'

        ## Divide as many times as processors
        for proc in sorted_proc:
            js += self.format_data_piechart_js_perproc(
                div='proc%s' % proc, proc=proc)
            divs += '<div id="proc%s"' % proc
            divs += 'style="width: 950px; height: 450px;"></div>'

        ## Write output in html file
        with open(os.path.join(self.output, 'profiling.html'), 'a') as f:
            f.write("""
            <html>
                <head>
                    <!-- Plotly.js -->
                    <script type="text/javascript" src="https://cdn.plot.ly/plotly-1.27.0.min.js"></script>
                </head>
                <body>
                    %s

                    <script>
                    %s
                    </script>

                </body>
            </html>""" % (divs, js))

def time_units(val, output='s'):
    """
    Change units for time. By default time is measured in seconds.
    Available options: hour, min, s (default), ms, us.

    Parameters
    -----------
        * val: float, input time value in seconds.
        * output: string, desired units.
            Available options: hour, min, s (default), ms, us.
    """
    units = {'hour': 1./3600,'min': 1./60, 's': 1, 'ms': 1e3, 'us': 1e6}

    return val * units(output)

def addargs(parser):
    """ Parse command line arguments """
    parser.add_argument(
        '--output', dest='output',
        help='Folder to store outputs', required=True)

def grabargs(args_param=None):
    """ Parse command line arguments """
    parser = argparse.ArgumentParser(description='Analyze logs from InsideMe')
    addargs(parser)
    args = parser.parse_args(args_param)
    return args

if __name__ == "__main__":
    args_param = None
    args = grabargs(args_param)

    processor_data = Analyze_Output(args.output)
    Plot_Data(processor_data)
