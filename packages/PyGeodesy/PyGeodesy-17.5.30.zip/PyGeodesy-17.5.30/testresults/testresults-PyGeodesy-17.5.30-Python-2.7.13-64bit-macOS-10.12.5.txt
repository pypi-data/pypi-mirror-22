tests/run.py typical test results (PyGeodesy 17.5.30 Python 2.7.13 64bit macOS 10.12.5)

running /Library/Framewo...nts/MacOS/Python tests/testBases.py

    testing module pygeodesy.bases version 17.05.25
    test 1 lat, lon: 50.06632°N, 005.71475°W
    test 2 lat, lon: 50.066389°N, 005.714722°W
    test 3 equals: True
    test 4 toStr: 51°28′40″N, 000°00′06″W
    test 5 toStr: 51.4778°N, 000.0016°W
    test 6 precision: 0
    test 7 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    all pygeodesy.bases tests passed (PyGeodesy 17.5.30 Python 2.7.13 64bit) 360.012 us

running /Library/Framewo...nts/MacOS/Python tests/testDatum.py

    testing module pygeodesy.datum version 17.05.26
    test 1 ellipsoid: True
    test 2 transform: True
    test 3 datum: True
    test 4 ED50.inverse().inverse(): True
    test 5 meanR: 6371008.7714
    test 6 WGS84: name='WGS84', a=6378137.0, b=6356752.3142499998, f_=298.257223563, f=0.0033528107, e2=0.00669438, e22=0.0067394967, R=6371008.7714166669, Rm=6367435.6797186071, R2=6371007.180920884, R3=6371000.7900107643, Rr=6367449.1458250266
    test 7 WGS84: A=6367449.1458234154, e=0.0818191908, f_=298.2572235630, n=0.0016792204(-3.7914875232e-13)
    test 8 WGS84: Alpha6=(0, 8.377318206245e-04, 7.608527773572e-07, 1.197645503329e-09, 2.429170607201e-12, 5.711757677866e-15, 1.491117731258e-17)
    test 9 WGS84: Beta6=(0, 8.377321640579e-04, 5.905870152220e-08, 1.673482665284e-1, 2.164798040063e-13, 3.787978046169e-16, 7.248748890694e-19)
    all pygeodesy.datum tests passed (PyGeodesy 17.5.30 Python 2.7.13 64bit) 1.213 ms

running /Library/Framewo...nts/MacOS/Python tests/testDms.py

    testing module pygeodesy.dms version 17.05.29
    test 1 parseDMS: 0.0
    test 2 parseDMS: 0.0
    test 3 parseDMS: 0.0
    test 4 parseDMS: 0.0
    test 5 parseDMS: 0.0
    test 6 parseDMS: 0.0
    test 7 parse3llh: 51.477811, -0.001475, 0.000000
    test 8 toDMS: 45°45′45.36″
    test 9 toDMS: 45.7626°
    test 10 toDMS: 45°45.756′
    test 11 toDMS: 45°45′45.36″
    test 12 toDMS: 45.7626
    test 13 toDMS: 0.79871
    test 14 toDMS: 45.7626°
    test 15 toDMS: 45°45.7560′
    test 16 toDMS: 45°45′45.36″
    test 17 toDMS: 45.762600
    test 18 toDMS: 0.798708
    test 19 compassPoint: N
    test 20 compassPoint: N
    test 21 compassPoint: N
    test 22 compassPoint: N
    test 23 compassPoint: NNE
    test 24 compassPoint: N
    test 25 compassPoint: NE
    test 26 compassPoint: NNE
    test 27 compassPoint: SW
    test 28 compassPoint: W
    test 29 compassPoint: SW
    test 30 compassPoint: SW
    test 31 compassPoint: WSW
    test 32 compassPoint: W
    test 33 compassPoint: SW
    test 34 compassPoint: WSW
    all pygeodesy.dms tests passed (PyGeodesy 17.5.30 Python 2.7.13 64bit) 1.036 ms

running /Library/Framewo...nts/MacOS/Python tests/testEllipsoidal.py

    testing module pygeodesy.ellipsoidalNvector version 17.05.26
    test 1 isellipsoidal: True
    test 2 isspherical: False
    test 3 lat/lonDMS: 52.20472°N, 000.14056°E
    test 4 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 5 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 6 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 7 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 8 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 9 equals: True
    test 10 equals: False
    test 11 copy: True
    test 12 intermediateTo: 51.372294°N, 000.707192°E
    test 13 intermediateTo: True
    test 14 intermediateTo+5: 35.560239°N, 008.833512°E
    test 15 intermediateTo-4: 64.570387°N, 013.156352°W
    test 16 isclockwise: False
    test 17 isclockwise: True
    test 18 isclockwise: too few points: 2
    test 19 toLatLon: 44.995674°N, 045.0°E
    test 20 toNvector: (0.50004, 0.50004, 0.70705)
    test 21 equals: False
    test 22 equals: True
    test 23 length: 0.99992449715
    test 24 length: 1.0
    test 25 sumOf: (52.70504, 0.61904, 0.70705)
    test 26 sumOf: Nv
    test 27 length: 52.7134151513
    test 28 copy: True
    test 29 length: 52.2051356286
    test 30 length: 52.2051356286
    test 31 isellipsoidal: True
    test 32 isspherical: False
    test 33 isellipsoidal: True
    test 34 isspherical: False
    test 35 convertDatum: 51.477284°N, 000.00002°E, -45.91m
    test 36 convertDatum: 51.4773°N, 000.0°E, -45.91m
    test 37 toNVector: (0.6228, 0.0, 0.7824, +0.24)
    test 38 toNvector: True
    test 39 toCartesian: [3980581, 97, 4966825]
    test 40 toCartesian: True
    test 41 toCartesian: [3194434.411, 3194434.411, 4487326.82]
    test 42 toCartesian: True
    test 43 toLatLon: 45.0°N, 045.0°E, +0.00m
    test 44 toLatLon: True
    test 45 Nvector: (0.5, 0.5, 0.7071)
    test 46 Nvector: (0.5, 0.5, 0.707, +1.00)
    all pygeodesy.ellipsoidalNvector tests passed (PyGeodesy 17.5.30 Python 2.7.13 64bit) 3.338 ms

    testing module pygeodesy.ellipsoidalVincenty version 17.05.26
    test 1 isellipsoidal: True
    test 2 isspherical: False
    test 3 lat/lonDMS: 52.20472°N, 000.14056°E
    test 4 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 5 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 6 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 7 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 8 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 9 equals: True
    test 10 equals: False
    test 11 initialBearingTo: 156.1106
    test 12 finalBearingTo: 157.8345
    test 13 initialBearingTo: 65.9335
    test 14 copy: True
    test 15 distanceTo: 404607.805988
    test 16 distanceTo: 404607.805988
    test 17 distanceTo: 3981601
    test 18 destination: 51.513526°N, 000.098038°W
    test 19 destination: 51°30′49″N, 000°05′53″W
    test 20 destination: 33°57′N, 118°24′W
    test 21 destination: 33.950367°N, 118.399012°W
    test 22 isclockwise: False
    test 23 isclockwise: True
    test 24 isclockwise: too few points: 2
    test 25 distanceTo (WGS84): 866455.43292
    test 26 VincentyError (WGS84): LatLon(41°29′24.29″N, 071°18′46.07″W) coincident with LatLon(41°29′24.29″N, 071°18′46.07″W)
    test 27 ValueError (WGS84): other Ellipsoid mistmatch: Ellipsoids.Airy1830 vs Ellipsoids.WGS84
    test 28 isellipsoidal: True
    test 29 isspherical: False
    test 30 copy: True
    test 31 isellipsoidal: True
    test 32 isspherical: False
    test 33 copy: 37°57′03.7203″S, 144°25′29.5244″E
    test 34 destination (WGS84): 37.6528°S, 143.9265°E
    test 35 destination (WGS84): True
    test 36 destination2 (WGS84): 37.652821°S, 143.926496°E, 307.1736°NW
    test 37 destination2 (WGS84): True
    test 38 finalBearingOn (WGS84): 307.1736°, 307°10′25.07″NW
    test 39 distanceTo (WGS84): 969954.166
    test 40 distanceTo3 (WGS84): 969954.166314, 9.141877, 11.29722
    test 41 initialBearingTo (WGS84): 9.1419°, 9°08′30.76″N
    test 42 finalBearingTo (WGS84): 11.2972°, 11°17′49.99″NNE
    test 43 distanceTo (WGS84): 404607.806
    test 44 distanceTo3 (WGS84): 404607.805988, 156.11064, 157.8345
    test 45 initialBearingTo (WGS84): 156.1106°, 156°06′38.31″SSE
    test 46 finalBearingTo (WGS84): 157.8345°, 157°50′04.2″SSE
    test 47 distanceTo (WGS84): 54973.295
    test 48 distanceTo3 (WGS84): 54973.29527, 233.13008, 232.82461
    test 49 initialBearingTo (WGS84): 233.1301°, 233°07′48.28″SW
    test 50 finalBearingTo (WGS84): 232.8246°, 232°49′28.59″SW
    test 51 distanceToMP (WGS84): 298396.057
    test 52 distanceToMP (WGS84): 111319.491
    test 53 distanceToMP (WGS84): 110574.389
    test 54 distanceToKW (WGS84): 222638.982
    test 55 distanceToKW (WGS84): 111319.491
    test 56 distanceTo (NAD83): 866455.43292
    test 57 VincentyError (NAD83): LatLon(41°29′24.29″N, 071°18′46.07″W) coincident with LatLon(41°29′24.29″N, 071°18′46.07″W)
    test 58 ValueError (NAD83): other Ellipsoid mistmatch: Ellipsoids.Airy1830 vs Ellipsoids.GRS80
    test 59 isellipsoidal: True
    test 60 isspherical: False
    test 61 copy: True
    test 62 isellipsoidal: True
    test 63 isspherical: False
    test 64 copy: 37°57′03.7203″S, 144°25′29.5244″E
    test 65 destination (NAD83): 37.6528°S, 143.9265°E
    test 66 destination (NAD83): True
    test 67 destination2 (NAD83): 37.652821°S, 143.926496°E, 307.1736°NW
    test 68 destination2 (NAD83): True
    test 69 finalBearingOn (NAD83): 307.1736°, 307°10′25.07″NW
    test 70 distanceTo (NAD83): 969954.166
    test 71 distanceTo3 (NAD83): 969954.166314, 9.141877, 11.29722
    test 72 initialBearingTo (NAD83): 9.1419°, 9°08′30.76″N
    test 73 finalBearingTo (NAD83): 11.2972°, 11°17′49.99″NNE
    test 74 distanceTo (NAD83): 404607.806
    test 75 distanceTo3 (NAD83): 404607.805988, 156.11064, 157.8345
    test 76 initialBearingTo (NAD83): 156.1106°, 156°06′38.31″SSE
    test 77 finalBearingTo (NAD83): 157.8345°, 157°50′04.2″SSE
    test 78 distanceTo (NAD83): 54973.295
    test 79 distanceTo3 (NAD83): 54973.29527, 233.13008, 232.82461
    test 80 initialBearingTo (NAD83): 233.1301°, 233°07′48.28″SW
    test 81 finalBearingTo (NAD83): 232.8246°, 232°49′28.59″SW
    test 82 distanceToMP (NAD83): 298396.057
    test 83 distanceToMP (NAD83): 111319.491
    test 84 distanceToMP (NAD83): 110574.389
    test 85 distanceToKW (NAD83): 222638.982
    test 86 distanceToKW (NAD83): 111319.491
    test 87 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 88 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 89 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 90 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566
    all pygeodesy.ellipsoidalVincenty tests passed (PyGeodesy 17.5.30 Python 2.7.13 64bit) 6.912 ms

running /Library/Framewo...nts/MacOS/Python tests/testGeohash.py

    testing module pygeodesy.geohash version 17.05.27
    test 1 Geohash: Geohash('geek')
    test 2 Geohash: geek
    test 3 Geohash: geek
    test 4 bounds: (LatLon(65°23′26.25″N, 017°55′46.88″W), LatLon(65°33′59.06″N, 017°34′41.25″W))
    test 5 toLatLon: 65.478516°N, 017.753906°W
    test 6 latlon: (65.478515625, -17.75390625)
    test 7 Geohash: geehpbpbp
    test 8 latlon: (65.390625, -17.929689)
    test 9 toLatLon: 65.390625°N, 017.929689°W
    test 10 decode: ('65.390646', '-17.929709')
    test 11 decode_error: (2.1457672119140625e-05, 2.1457672119140625e-05)
    test 12 distance1: 2758.887
    test 13 distance2: 676.254
    test 14 distance3: 397.404
    test 15 encode-decode: u120fxw
    test 16 encode-decode: geek
    test 17 encode-decode: fur
    test 18 encode-decode: geehpbpbp
    test 19 encode-decode: u4pruydqqvj8
    test 20 encode-decode: bgr96qxvpd46
    test 21 encode-decode: 0123456789
    test 22 encode-decode: zzzzzz
    test 23 Geohash: u4pruydq
    test 24 N.E.S.W: True
    test 25 E.S.W.N: True
    test 26 S.W.N.E: True
    test 27 W.N.E.S: True
    test 28 N.E.S.S.W.W.N.N.E.S: True
    test 29 Geohash: u4pruydqq
    test 30 N.E.S.W: True
    test 31 E.S.W.N: True
    test 32 S.W.N.E: True
    test 33 W.N.E.S: True
    test 34 N.E.S.S.W.W.N.N.E.S: True
    test 35 Geohash: u4pruydqqv
    test 36 N.E.S.W: True
    test 37 E.S.W.N: True
    test 38 S.W.N.E: True
    test 39 W.N.E.S: True
    test 40 N.E.S.S.W.W.N.N.E.S: True
    test 41 Geohash: u4pruydqqvj
    test 42 N.E.S.W: True
    test 43 E.S.W.N: True
    test 44 S.W.N.E: True
    test 45 W.N.E.S: True
    test 46 N.E.S.S.W.W.N.N.E.S: True
    test 47 Geohash: u4pruydqqvj8
    test 48 N.E.S.W: True
    test 49 E.S.W.N: True
    test 50 S.W.N.E: True
    test 51 W.N.E.S: True
    test 52 N.E.S.S.W.W.N.N.E.S: True
    test 53 encode: u120fxw
    test 54 decode: ('52.205', '0.1188')
    test 55 decode_error: (0.0006866455078125, 0.0006866455078125)
    test 56 distance1: 486.71
    test 57 distance2: 3.374
    test 58 distance3: 2.798
    test 59 encode: fur
    test 60 decode: ('69.6', '-45.7')
    test 61 decode: ('70.3', '-51')
    test 62 decode: ('68', '-68')
    test 63 decode_error: (0.703125, 0.703125)
    test 64 decode_error: (2.8125, 5.625)
    test 65 decode_error: (22.5, 22.5)
    all pygeodesy.geohash tests passed (PyGeodesy 17.5.30 Python 2.7.13 64bit) 9.943 ms

running /Library/Framewo...nts/MacOS/Python tests/testGreatCircle.py

    testing module pygeodesy.sphericalNvector version 17.05.26
    test 1 InitialBearingSameLocations: 0.0
    test 2 InitialBearingEqualLocations: 0.0
    test 3 FinalBearingSameLocations: 180.0
    test 4 FinalBearingEqualLocations: 180.0
    test 5 DistanceSameLocations: 0.0
    test 6 DistanceEqualLocations: 0.0
    test 7 DistanceEiffelToVersailles: 14084.3001  FAILED, KNOWN, expected 14084.2807
    test 8 DistanceVersaillesToEiffel: 14084.3001  FAILED, KNOWN, expected 14084.2807
    test 9 InitialBearingEiffelToVersailles: 245.13460297
    test 10 InitialBearingEiffelToVersailles(DMS): 245°08′04.5707″
    test 11 InitialBearingVersaillesToEiffel: 65.003253951
    test 12 InitialBearingVersaillesToEiffel(DMS): 65°00′11.7142″
    test 13 FinalBearingEiffelToVersailles: 245.00325395
    test 14 FinalBearingEiffelToVersailles(DMS): 245°00′11.7142″
    test 15 FinalBearingVersaillesToEiffel: 65.134602969
    test 16 FinalBearingVersaillesToEiffel(DMS): 65°08′04.5707″
    test 17 GenerateLocationVersailles: 48.804766°N, 002.120339°E
    test 18 GenerateLocationEiffel: 48.858158°N, 002.294825°E
    test 19 MidpointEiffelToVersailles: 48.831495°N, 002.207536°E
    test 20 MidpointEiffelToVersailles(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 21 MidpointEiffelToVersailles(m): 7042.15004788  FAILED, KNOWN, expected 7042.1597433
    test 22 MidpointVersaillesToEiffel: 48.831495°N, 002.207536°E  FAILED, KNOWN, expected 48.831495°N, 002.207535°E
    test 23 MidpointVersaillesToEiffel(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 24 MidpointVersaillesToEiffel(m): 7042.15004788  FAILED, KNOWN, expected 7042.1597433
    test 25 Intersection: 48.83569095°N, 002.221252031°E
    test 26 Intersection: 48.8356909498836°N, 002.2212520313074°E
    test 27 CrossTrackDistance90Degrees200Meters: 200.0
    test 28 CrossTrackDistance270Degrees200Meters: -200.0
    test 29 CrossTrackDistanceThatShouldBeVeryCloseToZero: 0.00000000
    5 pygeodesy.sphericalNvector tests (17.2%) FAILED, incl. 5 KNOWN (PyGeodesy 17.5.30 Python 2.7.13 64bit) 2.988 ms

    testing module pygeodesy.sphericalTrigonometry version 17.05.25
    test 1 InitialBearingSameLocations: 0.0
    test 2 InitialBearingEqualLocations: 0.0
    test 3 FinalBearingSameLocations: 180.0
    test 4 FinalBearingEqualLocations: 180.0
    test 5 DistanceSameLocations: 0.0
    test 6 DistanceEqualLocations: 0.0
    test 7 DistanceEiffelToVersailles: 14084.3001  FAILED, KNOWN, expected 14084.2807
    test 8 DistanceVersaillesToEiffel: 14084.3001  FAILED, KNOWN, expected 14084.2807
    test 9 InitialBearingEiffelToVersailles: 245.13460297
    test 10 InitialBearingEiffelToVersailles(DMS): 245°08′04.5707″
    test 11 InitialBearingVersaillesToEiffel: 65.003253951
    test 12 InitialBearingVersaillesToEiffel(DMS): 65°00′11.7142″
    test 13 FinalBearingEiffelToVersailles: 245.00325395
    test 14 FinalBearingEiffelToVersailles(DMS): 245°00′11.7142″
    test 15 FinalBearingVersaillesToEiffel: 65.134602969
    test 16 FinalBearingVersaillesToEiffel(DMS): 65°08′04.5707″
    test 17 GenerateLocationVersailles: 48.804766°N, 002.120339°E
    test 18 GenerateLocationEiffel: 48.858158°N, 002.294825°E
    test 19 MidpointEiffelToVersailles: 48.831495°N, 002.207536°E
    test 20 MidpointEiffelToVersailles(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 21 MidpointEiffelToVersailles(m): 7042.15004788  FAILED, KNOWN, expected 7042.1597433
    test 22 MidpointVersaillesToEiffel: 48.831495°N, 002.207536°E  FAILED, KNOWN, expected 48.831495°N, 002.207535°E
    test 23 MidpointVersaillesToEiffel(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 24 MidpointVersaillesToEiffel(m): 7042.15004788  FAILED, KNOWN, expected 7042.1597433
    test 25 Intersection: 48.83569095°N, 002.221252031°E
    test 26 Intersection: 48.8356909498836°N, 002.2212520313074°E
    test 27 CrossTrackDistance90Degrees200Meters: 200.0
    test 28 CrossTrackDistance270Degrees200Meters: -200.0
    test 29 CrossTrackDistanceThatShouldBeVeryCloseToZero: 0.00000000
    5 pygeodesy.sphericalTrigonometry tests (17.2%) FAILED, incl. 5 KNOWN (PyGeodesy 17.5.30 Python 2.7.13 64bit) 1.659 ms

running /Library/Framewo...nts/MacOS/Python tests/testLcc.py

    testing module pygeodesy.lcc version 17.05.26
    test 1 lb1: 448251.0 5411932.0001
    test 2 lb1: 448251, 5411932
    test 3 lb1: WRF_Lb.WGS84
    test 4 LatLon: 46.5°N, 003.0°E
    test 5 LatLon: 46°30′00.0″N, 003°00′00.0″E
    test 6 toLcc1: 700000 6600000
    test 7 toLcc1: 46.5°N, 003.0°E
    test 8 lb2: 1894411 1564650
    test 9 lb2: Clarke1866
    test 10 toLatLon2: 35.0°N, 075.0°W
    test 11 toLatLon2: 35°00′00.0007″N, 074°59′59.9997″W
    test 12 toLatLon2: NAD27
    test 13 toLcc2: 1894410.9 1564649.5
    test 14 toLcc2: Snyder.NAD27
    test 15 Be08Lb: 49.833333°N, 003.025882°E
    test 16 Be08Lb: GRS80
    test 17 Be08Lb: 49.833333°N, 004.359216°E
    test 18 Be08Lb: GRS80
    test 19 Be08Lb: 49.833333°N, 005.69255°E
    test 20 Be08Lb: GRS80
    test 21 Be08Lb: 51.166667°N, 003.025882°E
    test 22 Be08Lb: GRS80
    test 23 Be08Lb: 51.166667°N, 004.359216°E
    test 24 Be08Lb: GRS80
    test 25 Be08Lb: 51.166667°N, 005.69255°E
    test 26 Be08Lb: GRS80
    test 27 Be72Lb: 49.833334°N, 003.034153°E
    test 28 Be72Lb: NAD83
    test 29 Be72Lb: 49.833334°N, 004.367487°E
    test 30 Be72Lb: NAD83
    test 31 Be72Lb: 49.833334°N, 005.70082°E
    test 32 Be72Lb: NAD83
    test 33 Be72Lb: 51.166667°N, 003.034153°E
    test 34 Be72Lb: NAD83
    test 35 Be72Lb: 51.166667°N, 004.367487°E
    test 36 Be72Lb: NAD83
    test 37 Be72Lb: 51.166667°N, 005.70082°E
    test 38 Be72Lb: NAD83
    test 39 Fr93Lb: 49.0°N, 002.0°W
    test 40 Fr93Lb: WGS84
    test 41 Fr93Lb: 49.0°N, 003.0°E
    test 42 Fr93Lb: WGS84
    test 43 Fr93Lb: 49.0°N, 008.0°E
    test 44 Fr93Lb: WGS84
    test 45 Fr93Lb: 44.0°N, 002.0°W
    test 46 Fr93Lb: WGS84
    test 47 Fr93Lb: 44.0°N, 003.0°E
    test 48 Fr93Lb: WGS84
    test 49 Fr93Lb: 44.0°N, 008.0°E
    test 50 Fr93Lb: WGS84
    test 51 MaNLb: 31.73°N, 008.54°W
    test 52 MaNLb: NTF
    test 53 MaNLb: 31.73°N, 005.4°W
    test 54 MaNLb: NTF
    test 55 MaNLb: 31.73°N, 002.26°W
    test 56 MaNLb: NTF
    test 57 MaNLb: 34.87°N, 008.54°W
    test 58 MaNLb: NTF
    test 59 MaNLb: 34.87°N, 005.4°W
    test 60 MaNLb: NTF
    test 61 MaNLb: 34.87°N, 002.26°W
    test 62 MaNLb: NTF
    test 63 MxLb: 17.5°N, 114.0°W
    test 64 MxLb: WGS84
    test 65 MxLb: 17.5°N, 102.0°W
    test 66 MxLb: WGS84
    test 67 MxLb: 17.5°N, 090.0°W
    test 68 MxLb: WGS84
    test 69 MxLb: 29.5°N, 114.0°W
    test 70 MxLb: WGS84
    test 71 MxLb: 29.5°N, 102.0°W
    test 72 MxLb: WGS84
    test 73 MxLb: 29.5°N, 090.0°W
    test 74 MxLb: WGS84
    test 75 PyT_Lb: 45.898939°N, 000.540154°E
    test 76 PyT_Lb: NTF
    test 77 PyT_Lb: 45.898939°N, 002.337229°E
    test 78 PyT_Lb: NTF
    test 79 PyT_Lb: 45.898939°N, 004.134305°E
    test 80 PyT_Lb: NTF
    test 81 PyT_Lb: 47.696014°N, 000.540154°E
    test 82 PyT_Lb: NTF
    test 83 PyT_Lb: 47.696014°N, 002.337229°E
    test 84 PyT_Lb: NTF
    test 85 PyT_Lb: 47.696014°N, 004.134305°E
    test 86 PyT_Lb: NTF
    test 87 Snyder: 33.0°N, 108.0°W
    test 88 Snyder: NAD27
    test 89 Snyder: 33.0°N, 096.0°W
    test 90 Snyder: NAD27
    test 91 Snyder: 33.0°N, 084.0°W
    test 92 Snyder: NAD27
    test 93 Snyder: 45.0°N, 108.0°W
    test 94 Snyder: NAD27
    test 95 Snyder: 45.0°N, 096.0°W
    test 96 Snyder: NAD27
    test 97 Snyder: 45.0°N, 084.0°W
    test 98 Snyder: NAD27
    test 99 USA_Lb: 33.0°N, 108.0°W
    test 100 USA_Lb: WGS84
    test 101 USA_Lb: 33.0°N, 096.0°W
    test 102 USA_Lb: WGS84
    test 103 USA_Lb: 33.0°N, 084.0°W
    test 104 USA_Lb: WGS84
    test 105 USA_Lb: 45.0°N, 108.0°W
    test 106 USA_Lb: WGS84
    test 107 USA_Lb: 45.0°N, 096.0°W
    test 108 USA_Lb: WGS84
    test 109 USA_Lb: 45.0°N, 084.0°W
    test 110 USA_Lb: WGS84
    test 111 WRF_Lb: 33.0°N, 109.0°W
    test 112 WRF_Lb: WGS84
    test 113 WRF_Lb: 33.0°N, 097.0°W
    test 114 WRF_Lb: WGS84
    test 115 WRF_Lb: 33.0°N, 085.0°W
    test 116 WRF_Lb: WGS84
    test 117 WRF_Lb: 45.0°N, 109.0°W
    test 118 WRF_Lb: WGS84
    test 119 WRF_Lb: 45.0°N, 097.0°W
    test 120 WRF_Lb: WGS84
    test 121 WRF_Lb: 45.0°N, 085.0°W
    test 122 WRF_Lb: WGS84
    test 123 lb1: 448251.0 5411932.0001
    test 124 lb1: 448251, 5411932
    test 125 lb1: WRF_Lb.WGS84
    test 126 LatLon: 46.5°N, 003.0°E
    test 127 LatLon: 46°30′00.0″N, 003°00′00.0″E
    test 128 toLcc1: 700000 6600000
    test 129 toLcc1: 46.5°N, 003.0°E
    test 130 lb2: 1894411 1564650
    test 131 lb2: Clarke1866
    test 132 toLatLon2: 35.0°N, 075.0°W
    test 133 toLatLon2: 35°00′00.0007″N, 074°59′59.9997″W
    test 134 toLatLon2: NAD27
    test 135 toLcc2: 1894410.9 1564649.5
    test 136 toLcc2: Snyder.NAD27
    test 137 Be08Lb: 49.833333°N, 003.025882°E
    test 138 Be08Lb: GRS80
    test 139 Be08Lb: 49.833333°N, 004.359216°E
    test 140 Be08Lb: GRS80
    test 141 Be08Lb: 49.833333°N, 005.69255°E
    test 142 Be08Lb: GRS80
    test 143 Be08Lb: 51.166667°N, 003.025882°E
    test 144 Be08Lb: GRS80
    test 145 Be08Lb: 51.166667°N, 004.359216°E
    test 146 Be08Lb: GRS80
    test 147 Be08Lb: 51.166667°N, 005.69255°E
    test 148 Be08Lb: GRS80
    test 149 Be72Lb: 49.833334°N, 003.034153°E
    test 150 Be72Lb: NAD83
    test 151 Be72Lb: 49.833334°N, 004.367487°E
    test 152 Be72Lb: NAD83
    test 153 Be72Lb: 49.833334°N, 005.70082°E
    test 154 Be72Lb: NAD83
    test 155 Be72Lb: 51.166667°N, 003.034153°E
    test 156 Be72Lb: NAD83
    test 157 Be72Lb: 51.166667°N, 004.367487°E
    test 158 Be72Lb: NAD83
    test 159 Be72Lb: 51.166667°N, 005.70082°E
    test 160 Be72Lb: NAD83
    test 161 Fr93Lb: 49.0°N, 002.0°W
    test 162 Fr93Lb: WGS84
    test 163 Fr93Lb: 49.0°N, 003.0°E
    test 164 Fr93Lb: WGS84
    test 165 Fr93Lb: 49.0°N, 008.0°E
    test 166 Fr93Lb: WGS84
    test 167 Fr93Lb: 44.0°N, 002.0°W
    test 168 Fr93Lb: WGS84
    test 169 Fr93Lb: 44.0°N, 003.0°E
    test 170 Fr93Lb: WGS84
    test 171 Fr93Lb: 44.0°N, 008.0°E
    test 172 Fr93Lb: WGS84
    test 173 MaNLb: 31.73°N, 008.54°W
    test 174 MaNLb: NTF
    test 175 MaNLb: 31.73°N, 005.4°W
    test 176 MaNLb: NTF
    test 177 MaNLb: 31.73°N, 002.26°W
    test 178 MaNLb: NTF
    test 179 MaNLb: 34.87°N, 008.54°W
    test 180 MaNLb: NTF
    test 181 MaNLb: 34.87°N, 005.4°W
    test 182 MaNLb: NTF
    test 183 MaNLb: 34.87°N, 002.26°W
    test 184 MaNLb: NTF
    test 185 MxLb: 17.5°N, 114.0°W
    test 186 MxLb: WGS84
    test 187 MxLb: 17.5°N, 102.0°W
    test 188 MxLb: WGS84
    test 189 MxLb: 17.5°N, 090.0°W
    test 190 MxLb: WGS84
    test 191 MxLb: 29.5°N, 114.0°W
    test 192 MxLb: WGS84
    test 193 MxLb: 29.5°N, 102.0°W
    test 194 MxLb: WGS84
    test 195 MxLb: 29.5°N, 090.0°W
    test 196 MxLb: WGS84
    test 197 PyT_Lb: 45.898939°N, 000.540154°E
    test 198 PyT_Lb: NTF
    test 199 PyT_Lb: 45.898939°N, 002.337229°E
    test 200 PyT_Lb: NTF
    test 201 PyT_Lb: 45.898939°N, 004.134305°E
    test 202 PyT_Lb: NTF
    test 203 PyT_Lb: 47.696014°N, 000.540154°E
    test 204 PyT_Lb: NTF
    test 205 PyT_Lb: 47.696014°N, 002.337229°E
    test 206 PyT_Lb: NTF
    test 207 PyT_Lb: 47.696014°N, 004.134305°E
    test 208 PyT_Lb: NTF
    test 209 Snyder: 33.0°N, 108.0°W
    test 210 Snyder: NAD27
    test 211 Snyder: 33.0°N, 096.0°W
    test 212 Snyder: NAD27
    test 213 Snyder: 33.0°N, 084.0°W
    test 214 Snyder: NAD27
    test 215 Snyder: 45.0°N, 108.0°W
    test 216 Snyder: NAD27
    test 217 Snyder: 45.0°N, 096.0°W
    test 218 Snyder: NAD27
    test 219 Snyder: 45.0°N, 084.0°W
    test 220 Snyder: NAD27
    test 221 USA_Lb: 33.0°N, 108.0°W
    test 222 USA_Lb: WGS84
    test 223 USA_Lb: 33.0°N, 096.0°W
    test 224 USA_Lb: WGS84
    test 225 USA_Lb: 33.0°N, 084.0°W
    test 226 USA_Lb: WGS84
    test 227 USA_Lb: 45.0°N, 108.0°W
    test 228 USA_Lb: WGS84
    test 229 USA_Lb: 45.0°N, 096.0°W
    test 230 USA_Lb: WGS84
    test 231 USA_Lb: 45.0°N, 084.0°W
    test 232 USA_Lb: WGS84
    test 233 WRF_Lb: 33.0°N, 109.0°W
    test 234 WRF_Lb: WGS84
    test 235 WRF_Lb: 33.0°N, 097.0°W
    test 236 WRF_Lb: WGS84
    test 237 WRF_Lb: 33.0°N, 085.0°W
    test 238 WRF_Lb: WGS84
    test 239 WRF_Lb: 45.0°N, 109.0°W
    test 240 WRF_Lb: WGS84
    test 241 WRF_Lb: 45.0°N, 097.0°W
    test 242 WRF_Lb: WGS84
    test 243 WRF_Lb: 45.0°N, 085.0°W
    test 244 WRF_Lb: WGS84
    test 245 Snyder1: name='Snyder1', lat0=23.0, lon0=-96.0, par1=33.0, par2=45.0, E0=0, N0=0, k0=1, SP=2, datum=(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 246 Snyder2: name='Snyder2', lat0=23.0, lon0=-96.0, par1=33.0, par2=45.0, E0=0, N0=0, k0=1, SP=2, datum=(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    all pygeodesy.lcc tests passed (PyGeodesy 17.5.30 Python 2.7.13 64bit) 11.626 ms

running /Library/Framewo...nts/MacOS/Python tests/testMgrs.py

    testing module pygeodesy.mgrs version 17.05.26
    test 1 Mgrs1: 31U DQ 48251 11932
    test 2 Mgrs1: [Z:31U, G:DQ, E:48251, N:11932]
    test 3 Mgrs2: 31U DQ 48251 11932
    test 4 Mgrs2: [Z:31U, G:DQ, E:48251, N:11932]
    test 5 Mgrs3: 31U DQ 48251 11932
    test 6 Mgrs3: [Z:31U, G:DQ, E:48251, N:11932]
    test 7 toUtm1: 31 N 448251 5411932
    test 8 toUtm1: [Z:31, H:N, E:448251, N:5411932]
    test 9 toMgrs: 31U DQ 48251 11932
    test 10 toUtm(60.0°N, 001.0°E).toMgrs: 31V CG 88455 53097
    test 11 toUtm(60.0°N, 003.0°E).toMgrs: 32V JM 65640 66593
    test 12 toUtm(60.0°N, 009.0°E).toMgrs: 32V NM 00000 51411
    test 13 toUtm(76.0°N, 001.0°E).toMgrs: 31X DE 45999 36099
    test 14 toUtm(76.0°N, 013.0°E).toMgrs: 33X VE 45999 36099
    test 15 toUtm(76.0°N, 025.0°E).toMgrs: 35X ME 45999 36099
    test 16 toUtm(76.0°N, 037.0°E).toMgrs: 37X DE 45999 36099
    all pygeodesy.mgrs tests passed (PyGeodesy 17.5.30 Python 2.7.13 64bit) 1.905 ms

running /Library/Framewo...nts/MacOS/Python tests/testNavlabExamples.py

    testing module testNavlabExamples.py version 17.04.07
    test 1 Example 1 delta: [N:331730.863, E:332998.501, D:17398.304]
    test 2 Example 1 delta: [L:470357.384, B:45.109°, E:-2.12°]
    test 3 Example 1 elevation: -2.1198
    test 4 Example 1 bearing: 45.109
    test 5 Example 1 length: 470357.384
    test 6 Example 2 LatLon: 53.301°N, 063.435°E, +400.00m
    test 7 Example 2 toNvector: (0.267, 0.535, 0.802, +400.00)
    test 8 Example 2 delta: [N:3000.0, E:2000.0, D:100.0]
    test 9 Example 2 delta: [L:3606.938, B:33.69°, E:-1.589°]
    test 10 Example 2 destinationNed: 53.327726°N, 063.464965°E, +301.02m  FAILED, KNOWN, expected 53.327726°N, 063.464965°E, +299.138m
    test 11 Example 2 delta: [N:-86126, E:-78900, D:1069]
    test 12 Example 2 delta: [L:116807.681, B:222.493°, E:-0.524°]
    test 13 Example 2 destinationNed: 48.88667°N, 002.37472°E
    test 14 Example 3 toLatLon: 39.379°N, 048.013°W, +4702059.83m
    test 15 Example 4 toCartesian: [6373290.277, 222560.201, 110568.827]
    test 16 Example 5 distanceTo: 332457
    test 17 Example 6 intermediateChordTo: 89.799981°N, 180.0°E
    test 18 Example 6 intermediateTo: 89.8°N, 180.0°E
    test 19 Example 6 intermediateChordTo: 51.372294°N, 000.707192°E
    test 20 Example 6 intermediateTo: 51.372084°N, 000.707337°E
    test 21 Example 7 meanOf: 67.2362°N, 006.9175°W
    test 22 Example 8 destination(sphNv): 79.991549°N, 090.017698°W
    test 23 Example 8 destination(sphTy): 79.991549°N, 090.017698°W
    test 24 Example 8 destination(elVincenty): 79.991584°N, 090.017621°W
    test 25 Example 9 intersection: 40.318643°N, 055.901868°E
    test 26 Example 10 crossTrackDistance: 11118
    1 testNavlabExamples.py test (3.8%) FAILED, incl. 1 KNOWN (PyGeodesy 17.5.30 Python 2.7.13 64bit) 4.401 ms

running /Library/Framewo...nts/MacOS/Python tests/testOsgr.py

    testing module pygeodesy.osgr version 17.05.26
    test 1 WGS84: 51.4778°N, 000.0016°W
    test 2 OSGB36: 51.477284°N, 000.00002°E
    test 3 WGS84: 51.4778°N, 000.0016°W
    test 4 OSgr1: TG 51409 13177
    test 5 OSgr1: [G:TG, E:51409, N:13177]
    test 6 toLatLon1: 52°39′28.72″N, 001°43′00.63″E  FAILED, KNOWN, expected 52°39′28.72″N, 001°42′57.74″E
    test 7 toLatLon1: 52.657979°N, 001.716843°E  FAILED, KNOWN, expected 52.657977°N, 001.716038°E
    test 8 toOsgr1: 651463,313180  FAILED, KNOWN, expected 651409.903, 313177.270
    test 9 toLatLon2: 52°39′27.25″N, 001°43′07.37″E  FAILED, KNOWN, expected 52°39′27.25″N, 001°43′04.47″E
    test 10 toLatLon2: 52.65757°N, 001.718713°E  FAILED, KNOWN, expected 52.657568°N, 001.717908°E
    test 11 toOsgr2: 651463,313180  FAILED, KNOWN, expected 651409,313177
    test 12 toOsgr3: TG 51409 13177
    test 13 toOsgr4: TG 51409 13177
    test 14 OSGR1: TG 48251 11932
    test 15 OSGR1: [G:TG, E:48251, N:11932]
    test 16 OSGR2: TG 51409 13177
    test 17 OSGR2: [G:TG, E:51409, N:13177]
    test 18 OSGR3: TG 51409 13177
    test 19 OSGR3: [G:TG, E:51409, N:13177]
    test 20 OSGR4: TG 51409 13177
    test 21 OSGR4: [G:TG, E:51409, N:13177]
    test 22 OSGR5: 651409,313177
    test 23 OSGR5: [OSGR:651409.000,313177.000]
    test 24 OSGR6: 651409,313177
    6 pygeodesy.osgr tests (25.0%) FAILED, incl. 6 KNOWN (PyGeodesy 17.5.30 Python 2.7.13 64bit) 1.628 ms

running /Library/Framewo...nts/MacOS/Python tests/testRoutes.py

    testing module testRoutes.py version 17.05.26
    all testRoutes.py tests passed (PyGeodesy 17.5.30 Python 2.7.13 64bit) 5.007 us

running /Library/Framewo...nts/MacOS/Python tests/testSimplify.py

    testing module testSimplify.py version 17.05.26
    test 1 simplify1(16614, adjust=True) 1m (58.082 ms): 16597
    
    test 2 simplify2(16614, adjust=True, shortest=False) 1m (1.740 sec): 8239
    
    test 3 simplify2(16614, adjust=True, shortest=True) 1m (1.225 sec): 8247
    
    test 4 simplifyVWm(16614, adjust=True) 1m (162.487 ms): 16482
    
    test 5 simplifyVWm(16614, adjust=False) 1m (110.227 ms): 16488
    
    test 6 simplifyRDPm(16614, adjust=True, shortest=False) 1m (2.022 sec): 16196
    
    test 7 simplifyRDPm(16614, adjust=True, shortest=True) 1m (1.616 sec): 16201
    
    test 8 simplifyVW(1661, adjust=True) 1m (12.172 ms): 1657
    
    test 9 simplifyVW(1661, adjust=False) 1m (9.639 ms): 1657
    
    test 10 simplifyRDP(1661, adjust=True, shortest=False) 1m (3.730 sec): 1660
    
    test 11 simplifyRDP(1661, adjust=True, shortest=True) 1m (4.081 sec): 1661
    
    test 12 simplifyVW(69, adjust=False) 1m (389.099 us): 69
    
    test 13 simplifyRDP(69, adjust=False, shortest=False) 1m (2.731 ms): 68
    
    all testSimplify.py tests passed (PyGeodesy 17.5.30 Python 2.7.13 64bit) 14.771 sec

running /Library/Framewo...nts/MacOS/Python tests/testSpherical.py

    testing module pygeodesy.sphericalNvector version 17.05.26
    test 1 isellipsoidal: False
    test 2 isspherical: True
    test 3 lat/lonDMS: 52.20472°N, 000.14056°E
    test 4 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 5 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 6 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 7 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 8 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 9 equals: True
    test 10 equals: False
    test 11 initialBearingTo: 156.1666
    test 12 finalBearingTo: 157.8904
    test 13 initialBearingTo: 65.8921
    test 14 copy: True
    test 15 distanceTo: 404279.720589
    test 16 distanceTo: 404279.720589
    test 17 distanceTo: 2145
    test 18 intermediateTo: 51.372084°N, 000.707337°E
    test 19 intermediateTo: True
    test 20 intermediateTo: 404279.721
    test 21 intermediateTo+5: 35.160975°N, 008.989542°E
    test 22 intermediateTo+5: 5.000
    test 23 intermediateTo-4: 64.911647°N, 013.726301°W
    test 24 intermediateTo-4: 4.000
    test 25 intermediateChordTo: 51.372294°N, 000.707192°E
    test 26 intermediateChordTo: True
    test 27 midpointTo: 50.536327°N, 001.274614°E
    test 28 destination: 51.513546°N, 000.098345°W
    test 29 destination: 51°30′49″N, 000°05′54″W
    test 30 destination: 34°37′N, 116°33′W
    test 31 destination: 34.613647°N, 116.55116°W
    test 32 alongTrackDistanceTo: 62331.59
    test 33 alongTrackDistanceTo: 62331.58
    test 34 alongTrackDistanceTo: 99.588
    test 35 alongTrackDistanceTo: -7702.7
    test 36 alongTrackDistanceTo: 7587.6
    test 37 crossTrackDistanceTo: -305.67
    test 38 crossTrackDistanceTo: -307.55
    test 39 crossTrackDistanceTo: 7.4524
    test 40 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 41 greatCircleTo: (-0.79408, 0.12859, 0.59406)
    test 42 isclockwise: False
    test 43 isclockwise: True
    test 44 isclockwise: too few points: 2
    test 45 isspherical: True
    test 46 isellipsoidal: False
    test 47 isspherical: True
    test 48 isellipsoidal: False
    test 49 intersection: 50.907608°N, 004.508575°E
    test 50 intersection: 50°54′27.39″N, 004°30′30.87″E
    test 51 intersection: True
    test 52 intersection: 43.5719°N, 116.188757°W
    test 53 intersection: 43°34′18.84″N, 116°11′19.53″W
    test 54 intersection: True
    test 55 maxLat0: 90.0
    test 56 maxLat1: 89.0
    test 57 maxLat90: 0.0
    test 58 rhumbBearingTo: 116.722
    test 59 rhumbDestination: 50.964155°N, 001.853°E
    test 60 rhumbDestination: True
    test 61 rhumbDistanceTo: 40307.8
    test 62 rhumbMidpointo: 51.0455°N, 001.595727°E
    test 63 rhumbMidpointo: True
    test 64 areaOf: 8.6660587507e+09
    test 65 areaOf: 6.18e+09
    test 66 crossTrackDistanceTo: -305.67
    test 67 crossTrackDistanceTo: -307.55
    test 68 toLatLon: 44.995674°N, 045.0°E
    test 69 toNvector: (0.50004, 0.50004, 0.70705)
    test 70 equals: False
    test 71 equals: True
    test 72 length: 0.99992449715
    test 73 length: 1.0
    test 74 sumOf: (52.70504, 0.61904, 0.70705)
    test 75 sumOf: Nv
    test 76 length: 52.7134151513
    test 77 copy: True
    test 78 length: 52.2051356286
    test 79 length: 52.2051356286
    test 80 nearestOn: 51.0004°N, 001.9°E
    test 81 nearestOn: True
    test 82 distanceTo: 42.712
    test 83 nearestOn: 51.0°N, 002.0°E
    test 84 nearestOn: True
    test 85 nearestOn: 00.0°N, 000.0°E
    test 86 nearestOn: True
    test 87 nearestOn: 00.0°N, 020.0°E
    test 88 nearestOn: True
    test 89 BasseC: 47.3038°N, 002.5721°W
    test 90 BasseH: 47.311067°N, 002.528617°W
    test 91 triangulate: 47.323667°N, 002.568501°W
    test 92 triangulate: True
    all pygeodesy.sphericalNvector tests passed (PyGeodesy 17.5.30 Python 2.7.13 64bit) 5.256 ms

    testing module pygeodesy.sphericalTrigonometry version 17.05.25
    test 1 isellipsoidal: False
    test 2 isspherical: True
    test 3 lat/lonDMS: 52.20472°N, 000.14056°E
    test 4 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 5 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 6 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 7 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 8 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 9 equals: True
    test 10 equals: False
    test 11 initialBearingTo: 156.1666
    test 12 finalBearingTo: 157.8904
    test 13 initialBearingTo: 65.8921
    test 14 copy: True
    test 15 distanceTo: 404279.720589
    test 16 distanceTo: 404279.720589
    test 17 distanceTo: 2145
    test 18 intermediateTo: 51.372084°N, 000.707337°E
    test 19 intermediateTo: True
    test 20 intermediateTo: 404279.721
    test 21 intermediateTo+5: 35.160975°N, 008.989542°E
    test 22 intermediateTo+5: 5.000
    test 23 intermediateTo-4: 64.911647°N, 013.726301°W
    test 24 intermediateTo-4: 4.000
    test 25 midpointTo: 50.536327°N, 001.274614°E
    test 26 destination: 51.513546°N, 000.098345°W
    test 27 destination: 51°30′49″N, 000°05′54″W
    test 28 destination: 34°37′N, 116°33′W
    test 29 destination: 34.613647°N, 116.55116°W
    test 30 alongTrackDistanceTo: type(end) mismatch: int vs sphericalTrigonometry.LatLon
    test 31 alongTrackDistanceTo: 62331.58
    test 32 alongTrackDistanceTo: 99.588
    test 33 alongTrackDistanceTo: -7702.7
    test 34 alongTrackDistanceTo: 7587.6
    test 35 crossTrackDistanceTo: type(end) mismatch: int vs sphericalTrigonometry.LatLon
    test 36 crossTrackDistanceTo: -307.55
    test 37 crossTrackDistanceTo: 7.4524
    test 38 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 39 isclockwise: False
    test 40 isclockwise: True
    test 41 isclockwise: too few points: 2
    test 42 isspherical: True
    test 43 isellipsoidal: False
    test 44 isspherical: True
    test 45 isellipsoidal: False
    test 46 intersection: 50.907608°N, 004.508575°E
    test 47 intersection: 50°54′27.39″N, 004°30′30.87″E
    test 48 intersection: True
    test 49 intersection: 43.5719°N, 116.188757°W
    test 50 intersection: 43°34′18.84″N, 116°11′19.53″W
    test 51 intersection: True
    test 52 maxLat0: 90.0
    test 53 maxLat1: 89.0
    test 54 maxLat90: 0.0
    test 55 crossingParallels: 009°35′38.65″E, 170°24′21.35″E
    test 56 rhumbBearingTo: 116.722
    test 57 rhumbDestination: 50.964155°N, 001.853°E
    test 58 rhumbDestination: True
    test 59 rhumbDistanceTo: 40307.8
    test 60 rhumbMidpointo: 51.0455°N, 001.595727°E
    test 61 rhumbMidpointo: True
    test 62 areaOf: 8.6660587507e+09
    test 63 areaOf: 6.18e+09
    test 64 isPoleEnclosedBy: True
    test 65 isPoleEnclosedBy: False  FAILED, KNOWN, expected True
    1 pygeodesy.sphericalTrigonometry test (1.5%) FAILED, incl. 1 KNOWN (PyGeodesy 17.5.30 Python 2.7.13 64bit) 1.820 ms

running /Library/Framewo...nts/MacOS/Python tests/testUtm.py

    testing module pygeodesy.utm version 17.05.30
    test 1 Utm1: 03 N 448251.0 5411932.0001
    test 2 Utm2: 31 N 448252 5411933
    test 3 Utm2: 31 N 448251.795 5411932.678
    test 4 Utm2: 31 N 448251.8 5411932.7 n/a n/a
    test 5 Utm.toLatLon1: 48.8582°N, 002.2945°E
    test 6 Utm.toLatLon1: 48°51′29.52″N, 002°17′40.2″E
    test 7 toUtm1: 31 N 448252 5411933
    test 8 toUtm1: 31 N 448251.795 5411932.678
    test 9 toUtm2: [Z:31, H:N, E:448252, N:5411933, C:-000.53131221°, S:0.9996329]
    test 10 toUtm4: 48 N 377302 1483035
    test 11 toUtm5: 48P N 377302.354183 1483034.777084 -000.26291348° 0.99978623
    test 12 toUtm6: 13 S 622698 8516965
    test 13 toUtm7: 13L S 622697.645817 8516965.222916 -000.26291348° 0.99978623
    test 14 toMgrs1: 13L FF 22697 16965
    test 15 toMgrs2: 31U DQ 48251 11932
    test 16 Utm8: 18 N 516620 4574500
    test 17 Utm8.toLatLon: 41.321801°N, 074.801413°W
    test 18 Utm8.toLatLon: 41.321801N, 074.801413W
    test 19 toUtm(61.44°N, 025.4°E): 35V N 414668 6812845
    test 20 toUtm(47.04°S, 073.48°W): 18G S 615472 4789270
    test 21 toUtm(40.4°N, 074.7°W): 18T N 525458 4472198
    test 22 toUtm(44.5°N, 088.5°W): 16T N 380753 4928503
    test 23 toUtm(50.8694°N, 115.6508°W): 11U N 594937 5636169
    test 24 toUtm(00.0°N, 000.0°E): 31N N 166021 0
    test 25 toUtm(00.13°N, 000.2324°W): 30N N 808084 14386
    test 26 toUtm(45.6456°S, 023.3545°E): 34G S 683474 4942631
    test 27 toUtm(12.765°S, 033.8765°W): 25L S 404859 8588691
    test 28 toUtm(80.5434°S, 170.654°W): lat outside UTM: -80.5434
    test 29 toUtm(90.0°N, 177.0°E): lat outside UTM: 90.0
    test 30 toUtm(90.0°S, 177.0°W): lat outside UTM: -90.0
    test 31 toUtm(90.0°N, 003.0°E): lat outside UTM: 90.0
    test 32 toUtm(23.4578°N, 135.4545°W): 08Q N 453580 2594273
    test 33 toUtm(77.345°N, 156.9876°E): 57X N 450794 8586116
    test 34 toUtm(89.3454°S, 048.9306°W): lat outside UTM: -89.3454
    test 35 toUtm(60.0°N, 001.0°E): 31V N 388456 6653097
    test 36 toUtm(60.0°N, 003.0°E): 32V N 165640 6666594
    test 37 toUtm(60.0°N, 006.0°E): 32V N 332705 6655205
    test 38 toUtm(60.0°N, 009.0°E): 32V N 500000 6651411
    test 39 toUtm(60.0°N, 012.0°E): 33V N 332705 6655205
    test 40 toUtm(76.0°N, 001.0°E): 31X N 446000 8436100
    test 41 toUtm(76.0°N, 007.0°E): 31X N 607943 8438843
    test 42 toUtm(76.0°N, 013.0°E): 33X N 446000 8436100
    test 43 toUtm(76.0°N, 019.0°E): 33X N 607943 8438843
    test 44 toUtm(76.0°N, 025.0°E): 35X N 446000 8436100
    test 45 toUtm(76.0°N, 031.0°E): 35X N 607943 8438843
    test 46 toUtm(76.0°N, 037.0°E): 37X N 446000 8436100
    all pygeodesy.utm tests passed (PyGeodesy 17.5.30 Python 2.7.13 64bit) 4.695 ms

running /Library/Framewo...nts/MacOS/Python tests/tests.py

    testing module tests.py version 17.05.29

    testing module __init__.pyc version 17.05.30
    test 1 pygeodesy.Conic() class (pygeodesy.lcc): True
    test 2 pygeodesy.Conics attribute (pygeodesy.datum): True
    test 3 pygeodesy.Datum() class (pygeodesy.datum): True
    test 4 pygeodesy.Datums attribute (pygeodesy.datum): True
    test 5 pygeodesy.EPS float: True
    test 6 pygeodesy.EPS1 float: True
    test 7 pygeodesy.EPS2 float: True
    test 8 pygeodesy.Ellipsoid() class (pygeodesy.datum): True
    test 9 pygeodesy.Ellipsoids attribute (pygeodesy.datum): True
    test 10 pygeodesy.F_D str: True
    test 11 pygeodesy.F_DEG str: True
    test 12 pygeodesy.F_DM str: True
    test 13 pygeodesy.F_DMS str: True
    test 14 pygeodesy.F_RAD str: True
    test 15 pygeodesy.Geohash() class (pygeodesy.geohash): True
    test 16 pygeodesy.Lcc() class (pygeodesy.lcc): True
    test 17 pygeodesy.Mgrs() class (pygeodesy.mgrs): True
    test 18 pygeodesy.Osgr() class (pygeodesy.osgr): True
    test 19 pygeodesy.PI float: True
    test 20 pygeodesy.PI2 float: True
    test 21 pygeodesy.PI_2 float: True
    test 22 pygeodesy.R_KM float: True
    test 23 pygeodesy.R_M float: True
    test 24 pygeodesy.R_M float: True
    test 25 pygeodesy.R_NM float: True
    test 26 pygeodesy.R_SM float: True
    test 27 pygeodesy.S_DEG str: True
    test 28 pygeodesy.S_MIN str: True
    test 29 pygeodesy.S_RAD str: True
    test 30 pygeodesy.S_SEC str: True
    test 31 pygeodesy.S_SEP str: True
    test 32 pygeodesy.Transform() class (pygeodesy.datum): True
    test 33 pygeodesy.Transforms attribute (pygeodesy.datum): True
    test 34 pygeodesy.Utm() class (pygeodesy.utm): True
    test 35 pygeodesy.VincentyError() class (pygeodesy.ellipsoidalVincenty): True
    test 36 pygeodesy.bearingDMS() function (pygeodesy.dms): True
    test 37 pygeodesy.cbrt() function (pygeodesy.utils): True
    test 38 pygeodesy.cbrt2() function (pygeodesy.utils): True
    test 39 pygeodesy.compassDMS() function (pygeodesy.dms): True
    test 40 pygeodesy.compassPoint() function (pygeodesy.dms): True
    test 41 pygeodesy.datum module: True
    test 42 pygeodesy.degrees attribute (math): True
    test 43 pygeodesy.degrees180() function (pygeodesy.utils): True
    test 44 pygeodesy.degrees360() function (pygeodesy.utils): True
    test 45 pygeodesy.degrees90() function (pygeodesy.utils): True
    test 46 pygeodesy.dms module: True
    test 47 pygeodesy.ellipsoidalNvector module: True
    test 48 pygeodesy.ellipsoidalVincenty module: True
    test 49 pygeodesy.fStr() function (pygeodesy.utils): True
    test 50 pygeodesy.fStrzs() function (pygeodesy.utils): True
    test 51 pygeodesy.false2f() function (pygeodesy.utils): True
    test 52 pygeodesy.favg() function (pygeodesy.utils): True
    test 53 pygeodesy.fdot() function (pygeodesy.utils): True
    test 54 pygeodesy.fdot3() function (pygeodesy.utils): True
    test 55 pygeodesy.fsum attribute (math): True
    test 56 pygeodesy.ft2m() function (pygeodesy.utils): True
    test 57 pygeodesy.geohash module: True
    test 58 pygeodesy.halfs() function (pygeodesy.utils): True
    test 59 pygeodesy.hsin() function (pygeodesy.utils): True
    test 60 pygeodesy.hsin3() function (pygeodesy.utils): True
    test 61 pygeodesy.hypot attribute (math): True
    test 62 pygeodesy.hypot1() function (pygeodesy.utils): True
    test 63 pygeodesy.hypot3() function (pygeodesy.utils): True
    test 64 pygeodesy.isclockwise() function (pygeodesy.bases): True
    test 65 pygeodesy.isint() function (pygeodesy.utils): True
    test 66 pygeodesy.isscalar() function (pygeodesy.utils): True
    test 67 pygeodesy.latDMS() function (pygeodesy.dms): True
    test 68 pygeodesy.lcc module: True
    test 69 pygeodesy.len2() function (pygeodesy.utils): True
    test 70 pygeodesy.lonDMS() function (pygeodesy.dms): True
    test 71 pygeodesy.m2NM() function (pygeodesy.utils): True
    test 72 pygeodesy.m2SM() function (pygeodesy.utils): True
    test 73 pygeodesy.m2ft() function (pygeodesy.utils): True
    test 74 pygeodesy.m2km() function (pygeodesy.utils): True
    test 75 pygeodesy.map1() function (pygeodesy.utils): True
    test 76 pygeodesy.map2() function (pygeodesy.utils): True
    test 77 pygeodesy.mgrs module: True
    test 78 pygeodesy.normDMS() function (pygeodesy.dms): True
    test 79 pygeodesy.nvector module: True
    test 80 pygeodesy.osgr module: True
    test 81 pygeodesy.parse3llh() function (pygeodesy.dms): True
    test 82 pygeodesy.parseDMS() function (pygeodesy.dms): True
    test 83 pygeodesy.parseMGRS() function (pygeodesy.mgrs): True
    test 84 pygeodesy.parseOSGR() function (pygeodesy.osgr): True
    test 85 pygeodesy.parseUTM() function (pygeodesy.utm): True
    test 86 pygeodesy.precision() function (pygeodesy.dms): True
    test 87 pygeodesy.radians attribute (math): True
    test 88 pygeodesy.radiansPI() function (pygeodesy.utils): True
    test 89 pygeodesy.radiansPI2() function (pygeodesy.utils): True
    test 90 pygeodesy.radiansPI_2() function (pygeodesy.utils): True
    test 91 pygeodesy.simplify module: True
    test 92 pygeodesy.simplify1() function (pygeodesy.simplify): True
    test 93 pygeodesy.simplify2() function (pygeodesy.simplify): True
    test 94 pygeodesy.simplifyRDP() function (pygeodesy.simplify): True
    test 95 pygeodesy.simplifyRDPm() function (pygeodesy.simplify): True
    test 96 pygeodesy.simplifyVW() function (pygeodesy.simplify): True
    test 97 pygeodesy.simplifyVWm() function (pygeodesy.simplify): True
    test 98 pygeodesy.sphericalNvector module: True
    test 99 pygeodesy.sphericalTrigonometry module: True
    test 100 pygeodesy.tanPI_2_2() function (pygeodesy.utils): True
    test 101 pygeodesy.toDMS() function (pygeodesy.dms): True
    test 102 pygeodesy.toLcc() function (pygeodesy.lcc): True
    test 103 pygeodesy.toMgrs() function (pygeodesy.mgrs): True
    test 104 pygeodesy.toOsgr() function (pygeodesy.osgr): True
    test 105 pygeodesy.toUtm() function (pygeodesy.utm): True
    test 106 pygeodesy.utils module: True
    test 107 pygeodesy.utm module: True
    test 108 pygeodesy.vector3d module: True
    test 109 pygeodesy.version str: True
    test 110 pygeodesy.wrap180() function (pygeodesy.utils): True
    test 111 pygeodesy.wrap360() function (pygeodesy.utils): True
    test 112 pygeodesy.wrap90() function (pygeodesy.utils): True
    test 113 pygeodesy.wrapPI() function (pygeodesy.utils): True
    test 114 pygeodesy.wrapPI2() function (pygeodesy.utils): True
    test 115 pygeodesy.wrapPI_2() function (pygeodesy.utils): True

    testing module datum.pyc version 17.05.26
    test 116 datum.Datum() class: True
    test 117 datum.Datums attribute: True
    test 118 datum.Ellipsoid() class: True
    test 119 datum.Ellipsoids attribute: True
    test 120 datum.R_KM float: True
    test 121 datum.R_M float: True
    test 122 datum.R_NM float: True
    test 123 datum.R_SM float: True
    test 124 datum.Transform() class: True
    test 125 datum.Transforms attribute: True

    testing module dms.pyc version 17.05.29
    test 126 dms.F_D str: True
    test 127 dms.F_DEG str: True
    test 128 dms.F_DM str: True
    test 129 dms.F_DMS str: True
    test 130 dms.F_RAD str: True
    test 131 dms.S_DEG str: True
    test 132 dms.S_MIN str: True
    test 133 dms.S_RAD str: True
    test 134 dms.S_SEC str: True
    test 135 dms.S_SEP str: True
    test 136 dms.bearingDMS() function: True
    test 137 dms.compassDMS() function: True
    test 138 dms.compassPoint() function: True
    test 139 dms.latDMS() function: True
    test 140 dms.lonDMS() function: True
    test 141 dms.normDMS() function: True
    test 142 dms.parse3llh() function: True
    test 143 dms.parseDMS() function: True
    test 144 dms.precision() function: True
    test 145 dms.toDMS() function: True

    testing module ellipsoidalNvector.pyc version 17.05.26
    test 146 ellipsoidalNvector.Cartesian() class: True
    test 147 ellipsoidalNvector.LatLon() class: True
    test 148 ellipsoidalNvector.Ned() class: True
    test 149 ellipsoidalNvector.Nvector() class: True
    test 150 ellipsoidalNvector.meanOf() function: True
    test 151 ellipsoidalNvector.toNed() function: True

    testing module ellipsoidalVincenty.pyc version 17.05.26
    test 152 ellipsoidalVincenty.Cartesian() class: True
    test 153 ellipsoidalVincenty.LatLon() class: True
    test 154 ellipsoidalVincenty.VincentyError() class: True

    testing module lcc.pyc version 17.05.26
    test 155 lcc.Conic() class: True
    test 156 lcc.Conics attribute (pygeodesy.datum): True
    test 157 lcc.Lcc() class: True
    test 158 lcc.toLcc() function: True

    testing module mgrs.pyc version 17.05.26
    test 159 mgrs.Mgrs() class: True
    test 160 mgrs.parseMGRS() function: True
    test 161 mgrs.toMgrs() function: True

    testing module nvector.pyc version 17.05.26
    test 162 nvector.NorthPole attribute: True
    test 163 nvector.Nvector() class: True
    test 164 nvector.SouthPole attribute: True
    test 165 nvector.sumOf() function: True

    testing module osgr.pyc version 17.05.26
    test 166 osgr.Osgr() class: True
    test 167 osgr.parseOSGR() function: True
    test 168 osgr.toOsgr() function: True

    testing module simplify.pyc version 17.05.26
    test 169 simplify.simplify1() function: True
    test 170 simplify.simplify2() function: True
    test 171 simplify.simplifyRDP() function: True
    test 172 simplify.simplifyRDPm() function: True
    test 173 simplify.simplifyVW() function: True
    test 174 simplify.simplifyVWm() function: True

    testing module sphericalNvector.pyc version 17.05.26
    test 175 sphericalNvector.LatLon() class: True
    test 176 sphericalNvector.Nvector() class: True
    test 177 sphericalNvector.areaOf() function: True
    test 178 sphericalNvector.intersection() function: True
    test 179 sphericalNvector.meanOf() function: True
    test 180 sphericalNvector.triangulate() function: True
    test 181 sphericalNvector.trilaterate() function: True

    testing module sphericalTrigonometry.pyc version 17.05.25
    test 182 sphericalTrigonometry.LatLon() class: True
    test 183 sphericalTrigonometry.areaOf() function: True
    test 184 sphericalTrigonometry.intersection() function: True
    test 185 sphericalTrigonometry.isPoleEnclosedBy() function: True
    test 186 sphericalTrigonometry.meanOf() function: True

    testing module vector3d.pyc version 17.05.26
    test 187 vector3d.Vector3d() class: True
    test 188 vector3d.sumOf() function: True

    testing module utm.pyc version 17.05.30
    test 189 utm.Utm() class: True
    test 190 utm.parseUTM() function: True
    test 191 utm.toUtm() function: True

    testing module utils.pyc version 17.05.30
    test 192 utils.EPS float: True
    test 193 utils.EPS1 float: True
    test 194 utils.EPS2 float: True
    test 195 utils.PI float: True
    test 196 utils.PI2 float: True
    test 197 utils.PI_2 float: True
    test 198 utils.R_M float: True
    test 199 utils.cbrt() function: True
    test 200 utils.cbrt2() function: True
    test 201 utils.degrees attribute (math): True
    test 202 utils.degrees180() function: True
    test 203 utils.degrees360() function: True
    test 204 utils.degrees90() function: True
    test 205 utils.fStr() function: True
    test 206 utils.fStrzs() function: True
    test 207 utils.false2f() function: True
    test 208 utils.favg() function: True
    test 209 utils.fdot() function: True
    test 210 utils.fdot3() function: True
    test 211 utils.fsum attribute (math): True
    test 212 utils.ft2m() function: True
    test 213 utils.halfs() function: True
    test 214 utils.hsin() function: True
    test 215 utils.hsin3() function: True
    test 216 utils.hypot attribute (math): True
    test 217 utils.hypot1() function: True
    test 218 utils.hypot3() function: True
    test 219 utils.isint() function: True
    test 220 utils.isscalar() function: True
    test 221 utils.len2() function: True
    test 222 utils.m2NM() function: True
    test 223 utils.m2SM() function: True
    test 224 utils.m2ft() function: True
    test 225 utils.m2km() function: True
    test 226 utils.map1() function: True
    test 227 utils.map2() function: True
    test 228 utils.radians attribute (math): True
    test 229 utils.radiansPI() function: True
    test 230 utils.radiansPI2() function: True
    test 231 utils.radiansPI_2() function: True
    test 232 utils.tanPI_2_2() function: True
    test 233 utils.wrap180() function: True
    test 234 utils.wrap360() function: True
    test 235 utils.wrap90() function: True
    test 236 utils.wrapPI() function: True
    test 237 utils.wrapPI2() function: True
    test 238 utils.wrapPI_2() function: True

    testing module LatLon.attrs version 17.05.29
    test 239 _Nv attribute: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 240 _ab attribute: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 241 _datum attribute: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 242 _direct() method: pygeodesy.ellipsoidalVincenty
    test 243 _epsilon float: pygeodesy.ellipsoidalVincenty
    test 244 _gc3() method: pygeodesy.sphericalNvector
    test 245 _havg() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 246 _height int: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 247 _inverse() method: pygeodesy.ellipsoidalVincenty
    test 248 _iterations int: pygeodesy.ellipsoidalVincenty
    test 249 _lat int: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 250 _lon int: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 251 _osgr attribute: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 252 _r3 attribute: pygeodesy.ellipsoidalNvector
    test 253 _rhumb3() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 254 _rotation3() method: pygeodesy.ellipsoidalNvector
    test 255 _trackDistanceTo3() method: pygeodesy.sphericalTrigonometry
    test 256 _update() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 257 _utm attribute: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 258 _v3d attribute: pygeodesy.sphericalTrigonometry
    test 259 alongTrackDistanceTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 260 bearingTo() method: pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 261 bounds() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 262 classname() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 263 convertDatum() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 264 copy() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 265 crossTrackDistanceTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 266 crossingParallels() method: pygeodesy.sphericalTrigonometry
    test 267 datum property: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 268 deltaTo() method: pygeodesy.ellipsoidalNvector
    test 269 destination() method: pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 270 destination2() method: pygeodesy.ellipsoidalVincenty
    test 271 destinationNed() method: pygeodesy.ellipsoidalNvector
    test 272 distanceTo() method: pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 273 distanceTo3() method: pygeodesy.ellipsoidalVincenty
    test 274 ellipsoid() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 275 ellipsoids() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 276 epsilon property: pygeodesy.ellipsoidalVincenty
    test 277 equals() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 278 finalBearingOn() method: pygeodesy.ellipsoidalVincenty
    test 279 finalBearingTo() method: pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 280 greatCircle() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 281 greatCircleTo() method: pygeodesy.sphericalNvector
    test 282 height property: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 283 initialBearingTo() method: pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 284 intermediateChordTo() method: pygeodesy.sphericalNvector
    test 285 intermediateTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 286 intersection() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 287 isEnclosedBy() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 288 isWithin() method: pygeodesy.sphericalNvector
    test 289 isclockwise() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 290 isellipsoidal property: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 291 isspherical property: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 292 iterations property: pygeodesy.ellipsoidalVincenty
    test 293 lat property: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 294 lon property: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 295 maxLat() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 296 midpointTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 297 minLat() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 298 nearestOn() method: pygeodesy.sphericalNvector
    test 299 others() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 300 parse() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 301 points() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 302 rhumbBearingTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 303 rhumbDestination() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 304 rhumbDistanceTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 305 rhumbMidpointTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 306 to2ab() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 307 to3llh() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 308 to3xyz() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 309 to4xyzh() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 310 toCartesian() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 311 toNvector() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 312 toOsgr() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 313 toStr() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 314 toStr2() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 315 toUtm() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 316 toVector3d() method: pygeodesy.sphericalTrigonometry
    test 317 topsub() method: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 318 triangulate() method: pygeodesy.sphericalNvector
    test 319 trilaterate() method: pygeodesy.sphericalNvector

    testing module LatLon.mro version 17.05.29
    test 320 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.LatLon, pygeodesy.nvector.LatLonNvectorBase, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.bases.LatLonHeightBase, pygeodesy.bases.Base
    test 321 pygeodesy.ellipsoidalVincenty: pygeodesy.ellipsoidalVincenty.LatLon, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.bases.LatLonHeightBase, pygeodesy.bases.Base
    test 322 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.LatLon, pygeodesy.nvector.LatLonNvectorBase, pygeodesy.sphericalBase.LatLonSphericalBase, pygeodesy.bases.LatLonHeightBase, pygeodesy.bases.Base
    test 323 pygeodesy.sphericalTrigonometry: pygeodesy.sphericalTrigonometry.LatLon, pygeodesy.sphericalBase.LatLonSphericalBase, pygeodesy.bases.LatLonHeightBase, pygeodesy.bases.Base

    all tests.py tests passed (PyGeodesy 17.5.30 Python 2.7.13 64bit) 4.092 ms

tests/run.py /Library/Framewo...nts/MacOS/Python all OK (PyGeodesy 17.5.30 Python 2.7.13 64bit macOS 10.12.5) 16.666 sec
