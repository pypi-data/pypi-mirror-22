#line 2 "pmatch_lex.cc"

#line 4 "pmatch_lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer pmatch_create_buffer
#define yy_delete_buffer pmatch_delete_buffer
#define yy_flex_debug pmatch_flex_debug
#define yy_init_buffer pmatch_init_buffer
#define yy_flush_buffer pmatch_flush_buffer
#define yy_load_buffer_state pmatch_load_buffer_state
#define yy_switch_to_buffer pmatch_switch_to_buffer
#define yyin pmatchin
#define yyleng pmatchleng
#define yylex pmatchlex
#define yylineno pmatchlineno
#define yyout pmatchout
#define yyrestart pmatchrestart
#define yytext pmatchtext
#define yywrap pmatchwrap
#define yyalloc pmatchalloc
#define yyrealloc pmatchrealloc
#define yyfree pmatchfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pmatchrestart(pmatchin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t pmatchleng;

extern FILE *pmatchin, *pmatchout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE pmatchlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-pmatchlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < pmatchleng; ++yyl )\
                    if ( pmatchtext[yyl] == '\n' )\
                        --pmatchlineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --pmatchlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pmatchtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up pmatchtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pmatchrestart()), so that the user can continue scanning by
	 * just pointing pmatchin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when pmatchtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t pmatchleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow pmatchwrap()'s to do buffer switches
 * instead of setting up a fresh pmatchin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void pmatchrestart (FILE *input_file  );
void pmatch_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE pmatch_create_buffer (FILE *file,int size  );
void pmatch_delete_buffer (YY_BUFFER_STATE b  );
void pmatch_flush_buffer (YY_BUFFER_STATE b  );
void pmatchpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void pmatchpop_buffer_state (void );

static void pmatchensure_buffer_stack (void );
static void pmatch_load_buffer_state (void );
static void pmatch_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER pmatch_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE pmatch_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE pmatch_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE pmatch_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *pmatchalloc (yy_size_t  );
void *pmatchrealloc (void *,yy_size_t  );
void pmatchfree (void *  );

#define yy_new_buffer pmatch_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pmatchensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pmatch_create_buffer(pmatchin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pmatchensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pmatch_create_buffer(pmatchin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pmatchwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *pmatchin = (FILE *) 0, *pmatchout = (FILE *) 0;

typedef int yy_state_type;

extern int pmatchlineno;

int pmatchlineno = 1;

extern char *pmatchtext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr pmatchtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up pmatchtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	pmatchleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 140
#define YY_END_OF_BUFFER 141
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[987] =
    {   0,
      137,  137,  141,  139,  137,  137,  132,  132,   65,   55,
      139,   51,  132,  122,  123,   57,   56,  134,   52,  132,
       59,   63,  128,  136,   67,  132,   68,   64,  139,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  120,   50,  121,  139,   97,   78,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  139,   60,   49,
      139,  139,  139,  139,  139,  139,  139,  139,  128,  137,
      126,    0,  138,  132,    0,  117,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  132,   61,    0,  117,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  132,

        0,  117,    0,    0,    0,    0,    0,    0,    0,    0,
       53,   54,  132,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  133,   83,  132,    0,  132,    0,    0,
      132,  132,  119,  106,  108,  132,  132,  132,  105,  132,
      107,  132,   94,  127,    0,    0,  135,   85,   81,   66,
       82,   92,    0,    0,   90,    0,    0,    0,    0,    0,
        0,    0,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  118,   62,
        0,    0,   95,  104,  104,    0,    0,    0,   97,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,    0,
        0,   93,    0,    0,    0,    0,    0,    0,    0,  125,
      124,  132,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  131,    0,    0,
      132,  131,    0,  117,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  132,  131,  132,  132,    0,    0,    0,
        0,    0,    0,    0,    0,  131,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   91,   65,    0,    0,   98,   58,
        0,   70,   74,    0,   69,   75,   24,   73,  129,    0,

       87,   80,    0,   89,    0,    0,    0,    0,    0,    0,
        0,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,   18,  132,  132,  132,  132,  132,
      132,   37,   22,  132,  132,   19,  132,  132,  132,  132,
      132,   96,   79,   99,    0,  104,  103,  103,  102,  102,
        0,    0,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,    4,  132,  130,  130,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      131,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  132,  131,    0,
      117,    0,    0,    0,    0,    0,    0,    0,    0,  131,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   84,   86,    0,   77,   76,
      132,   72,   71,    0,  135,  109,    0,    0,    0,    0,
        0,    0,    0,   23,  132,  132,    9,  132,  132,  132,
      132,  132,  132,   26,  132,  132,    7,  132,  132,    6,
      132,   25,   20,   21,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  100,  100,  103,  102,    0,    0,  132,
      132,  132,    5,  132,  132,    0,  132,  132,  132,    0,

        0,    0,  116,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  116,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  116,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  116,  132,  116,    0,  117,    0,
        0,    0,    0,    0,    0,    0,    0,  132,  116,  132,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       88,  129,    0,    0,    0,    0,    0,    0,    0,   34,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,

       27,  132,  132,  132,  132,   38,  132,  132,  132,  132,
      132,  100,    0,    0,  132,  132,  132,  132,    0,    0,
        0,    0,    3,  132,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      132,    0,    0,    0,    0,    0,    0,    0,  132,  132,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  112,  114,    0,    0,    0,  132,
      132,    2,   33,    1,  132,  132,  132,  132,  132,  132,
      132,  132,  132,   30,  132,  132,  132,  132,  101,    0,

        0,  132,  132,  132,    0,    0,    0,    0,  132,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  132,    0,  117,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  132,  132,    0,    0,    0,
        0,    0,    0,    0,  110,  115,  132,  132,   32,  132,
        8,  132,  132,  132,  132,   10,  132,  132,   28,   12,
      132,  132,    0,    0,  132,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  132,  116,  132,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  132,  132,    0,  113,  111,

       15,   31,  132,   16,   17,  132,  132,  132,  132,  132,
      132,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  132,  132,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  132,  132,
        0,   11,  132,  132,  132,  132,  132,  132,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  132,  132,    0,    0,    0,  132,  132,    0,  132,
      132,  132,   13,  132,   39,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  132,  132,  132,
        0,  132,  132,  132,  132,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  132,  132,  132,
       29,  132,   14,  132,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  132,  132,  132,  132,
      132,    0,    0,    0,    0,   44,    0,   47,    0,    0,
        0,  132,  132,   36,   35,   40,    0,    0,    0,    0,
        0,    0,  132,   41,    0,   43,    0,   45,    0,  132,
       42,    0,    0,  132,    0,    0,   46,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   48,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   12,   31,   32,   33,   34,
       12,   12,   35,   12,   12,   36,   12,   37,   38,   39,
       12,   40,   41,   42,   43,   12,   44,   12,   12,   12,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   12,   67,   68,   69,   70,   71,   72,   73,
       74,   12,   75,   76,   77,   78,    1,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,    1,    1,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   83,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   85,   86,   86,   87,
       88,   88,   88,   89,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[90] =
    {   0,
        1,    1,    1,    1,    2,    3,    4,    3,    2,    3,
        2,    3,    3,    2,    2,    2,    2,    2,    3,    2,
        3,    3,    2,    2,    2,    3,    2,    2,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    2,    2,    2,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    2,    2,    5,    2,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_uint16_t yy_base[1008] =
    {   0,
        0, 2738, 2758, 4275,   88,   92,  115,  204,  284,   79,
       17, 4275,  292,  278, 4275, 4275, 4275, 2740, 2723,  374,
     2728,  318,  296,  302,  288,  398, 2718, 4275,  402,  413,
      271,  275,  279,  283,  295,  452,  324,  280,  352,  360,
      412,  453,  291,  309, 4275,  482,  456,  391,  469,  457,
      473,  486,  476,  492,  504,  505,  515, 2699, 2655, 4275,
       29, 2641,   33,  269,  351,  315,  386, 2638,  559,  569,
      581, 2713, 4275,    0,  586, 2681,  445,  310,  525,  355,
      529,  533,  536,  306,  445,  573,  675,  558,  764,  585,
      589,  548,  773,  776,  762,  779,  781,  784,  551,  538,

      554, 4275,  544, 2602,  565,  338,  568,  365,  571, 2601,
     4275, 4275,  596,  574, 2595,  582,  464,  693,  518,  696,
     2592, 2638, 2643, 4275, 2623,  759,  531,  762, 2623, 2578,
      770,  774, 4275,  733,  742,  775,  847,  848,  753,  855,
      832,  851, 4275, 4275,  590,  869,  779, 2596, 2595, 4275,
     4275, 4275,    0, 2593, 4275, 2559, 2557, 2543, 2534, 2515,
     2510, 2482,  840,  839,  844,  858,  861,  870,  877,  884,
      890,  891,  896,  922,  905,  899,  908,  931,  942,  938,
      968,  914,  945,  974,  951,  948,  959,  955, 4275, 4275,
     2497, 2490, 2468, 2495,  792,  635,  763,  807,  954,  983,

      987,  990,  994, 1002, 1003, 1013, 1023, 1009, 1026,  279,
      741, 4275,  799,  918,  954, 1002, 1012, 1015, 1018, 4275,
     4275,    0, 1023,  802, 1026, 1034, 1038, 1041, 1045,  348,
     1054, 1058, 1066, 1069, 1081, 1086, 1097, 4275,  785, 1178,
     2492, 1078, 1267,  787, 1109, 1105, 1113, 1122, 1124, 1129,
     1137,  943, 1145, 2490, 1090, 1356,  868, 1162, 1125, 1165,
     1193, 1205, 1167, 1208, 1177, 1149, 1229, 1269, 1231, 1248,
     1439, 1442, 1445, 1448, 1451, 1029, 1117, 1140, 1199, 1202,
     1216, 1219, 2493,  424, 4275, 1255, 2486, 2485, 1428, 4275,
     2475, 1268, 1269, 2458, 1272, 1277, 4275, 1281,  878,  908,

     4275, 4275, 2466, 4275, 2404, 2379, 2419, 2414, 2340, 2329,
     2337, 1437, 1411, 1420, 1440, 1417, 1452, 1431, 1434, 1443,
     1446, 1472, 1500, 1478, 4275, 1501, 1504, 1512, 1522, 1532,
     1533, 1511, 4275, 1540, 1545, 4275, 1516, 1544, 1548, 1556,
     1552, 4275, 4275, 4275, 1136, 1286, 4275, 1142, 4275, 1204,
     2371, 1442, 1551, 1563, 1564, 1568, 1580, 1586, 1592, 1606,
     1597, 1602, 1596, 1603, 4275,  870, 1381, 1471, 1511, 1628,
     1633, 1638, 1642, 1649, 1652, 1659, 1666, 1670, 1673, 1754,
     1680, 1843, 1656, 1639, 1696, 1631, 1727, 1679, 1734, 1460,
     1737, 1741, 1777, 1781, 1784, 1802, 1821, 1786, 1869, 1599,

     2302, 1602, 1173, 1609, 1221, 1612, 2296, 2361, 1954, 2043,
     1782, 2026, 1697, 2054, 1805, 2057, 2028, 2064, 1842, 2349,
     2068, 2071, 2074, 2094, 2111, 2114, 2132, 1764, 1889, 2135,
     2139, 2151, 1615, 1618, 1715, 4275, 4275, 2351, 4275, 4275,
     1762, 4275, 4275, 1316, 1522, 4275, 2350, 2301,    0,    0,
     2284, 2344, 2331, 4275, 1829, 1841, 4275, 2015, 2018, 1767,
     1842, 2023, 2032, 4275, 1872, 2028, 4275, 2049, 2143, 4275,
     2104, 4275, 4275, 4275, 2125, 2033, 2122, 2140, 2159, 2163,
     2171, 2180, 2191, 4275, 1533, 1536, 1539, 1653, 1684, 2192,
     2200, 2201, 2204, 2208, 2222,  820, 2230, 2212, 2234, 2200,

     2223, 2231, 2317, 2236, 1852, 2243, 1870, 2251, 2268, 2280,
     2283, 2315, 2310, 1876, 1722, 2228, 1774, 1636, 1977, 1717,
     1987, 2212, 2288, 2300, 2318, 2298, 2301, 2306, 2312, 2320,
     2330, 2338, 2343, 2348, 2356,  300, 2394, 2084, 2262, 2316,
     2324, 2327, 2351, 2359, 2396, 2407, 2416, 2402, 2270, 2362,
     2202, 2375, 1828, 2382, 1837, 2385, 2199,    0, 2433, 2250,
     2450, 2452, 2460, 2465, 2467, 2469, 2472, 2475, 2476, 2486,
     2492, 2496, 2512, 2516, 2528, 2536, 2552, 2556, 2592, 2603,
     4275, 1926,    0, 2266, 2253, 2244, 2229,    0,    0, 2438,
     2566, 2472, 2464, 2602, 2523, 2589, 2524, 2557, 2613, 2623,

     4275, 2626, 2631, 2632, 2641, 2542, 2649, 2636, 2637, 2665,
     2644, 2027, 2145, 2279, 2689, 2673, 2672, 2677, 2140, 2136,
     2124, 2104, 2678, 2682, 2675, 2713, 2716, 2723, 2726, 2731,
     2736, 2146, 2767, 2489, 2684, 2687, 2694, 2699, 2704, 2719,
     1765, 2806, 2745, 2763, 2794, 2140, 2812, 2750, 2756, 2766,
     2871, 2769, 2774, 2790, 2871, 2882, 2885, 2888,  344, 2952,
     2964, 2968, 2971, 2974, 2977, 2980, 2983, 2986, 2989, 2992,
     3067, 3078, 2112,    0, 4275, 4275,    0, 2108, 2105, 2777,
     2949, 2957, 2960, 2963, 2972, 2975, 3039, 3040, 3043, 3047,
     3073, 3050, 3088, 4275, 3078, 3079, 3107, 3089, 4275, 2503,

     2038, 3099, 3108, 3120, 2051, 2035, 2038, 2021, 3128, 3120,
     3140, 3147, 2052, 3152, 3002, 3099, 3108, 3188, 3208, 3195,
     3214,    0, 3191, 3206, 3143, 1978, 3152, 1983, 3176, 2089,
     3202, 1974, 3205, 3217, 3220,  560, 3284, 3264, 3280, 3296,
     3300, 2474, 2044, 2027, 4275, 4275, 3304, 3310, 4275, 3325,
     4275, 3320, 3321, 3119, 3326, 4275, 3333, 3334, 4275, 4275,
     3341, 3267, 1887, 1854, 3349, 1848, 1830, 1828, 1825, 1824,
     1819, 3370, 3378, 3394, 3420, 3430, 3436, 3375, 3399, 3459,
     3232, 1738, 3235, 2103, 3269, 2118, 3327, 1726, 3339, 3374,
     3388, 3399, 3414, 3418, 3424, 3488, 3494, 3506, 4275, 4275,

     4275, 4275, 3501, 4275, 4275, 3471, 3470, 3516, 3517, 3527,
     3531, 1723, 1739, 1716, 1728, 1705, 1715, 1660, 1673, 1641,
     3548, 3554, 3566, 2557, 3575, 3567, 3577, 3611, 3438, 3544,
     3555, 3563, 3566, 3578, 3589, 3597, 3600, 3603, 3667, 3673,
     3685, 4275, 3634, 3398, 3637, 3680, 3713, 3649, 1615, 1602,
     1596, 1518, 1492, 1439, 1435, 1433, 1415, 3711, 1454, 3727,
     3733, 3731, 3769, 3629, 3635, 3666, 3783,    0, 3795, 3790,
     3732, 3803, 4275, 3735, 3766, 1415, 1397, 1275, 1273, 1273,
     1266, 1267, 1265, 1245, 3821, 3848, 3835, 3858, 3884, 3875,
     2583, 3855, 3879, 3870, 3887, 1226, 1194, 1171, 1182, 1171,

     1204, 1149, 1138, 1137, 3933, 3945, 3951, 3957, 3993, 4007,
     4275, 3907, 4275, 3919, 1123, 1106, 1098, 1076, 1073, 1068,
     1064, 1058, 1060, 4013, 2717, 4010, 4049, 3956, 4021, 3896,
     3989, 1033, 1022, 1007,  978, 4275,  973, 4275,  927,  913,
      926, 4069,    0, 3861, 3990, 4275,  872,  873,  825,  825,
      814,  781, 4093, 4275,  767, 4275,  763, 4275,  747, 4113,
     4275,  734,  590, 4089,  576,  608, 4275,  555,  551,  500,
      493,  494,  477,  439,  420,  407,  378,  397,  354,  347,
      300,  258,  246,  228, 4275, 4275, 4175, 4178, 4183, 4187,
     4192, 4197, 4202, 4207, 4212, 4216, 4221, 4225, 4230, 4235,

     4240, 4245, 4250, 4255, 4260, 4265, 4269
    } ;

static yyconst flex_int16_t yy_def[1008] =
    {   0,
      986,    1,  986,  986,  986,  986,  986,  986,  987,  986,
      988,  986,  987,  986,  986,  986,  986,  986,  986,  987,
      986,  987,  986,  986,  986,  987,  986,  986,  986,  987,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  986,  986,  986,  986,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  989,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  990,  986,    7,  991,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  992,  992,  986,   30,  993,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,   30,

      988,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,   30,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,   30,  986,   30,  986,  986,
       30,   30,  986,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  994,  986,  986,  986,  986,  986,  986,  986,
      986,  986,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,  989,
      989,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,    7,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  986,  992,  995,
       87,   30,  993,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  996,   87,   30,  986,   87,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,   30,  986,  986,   30,  986,
      986,   30,   30,  986,   30,   30,  986,   30,  986,  986,

      986,  986,  994,  986,  986,  986,  986,  986,  986,  986,
      986,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,  986,   30,   30,   30,   30,   30,
       30,   30,  986,   30,   30,  986,   30,   30,   30,   30,
       30,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,  986,  989,  986,  986,  986,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  997,
      998,  997,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  998,  998,  986,

      986,  986,  986,  986,  986,  986,  986,    8,  986,  999,
      382,  992,  992,  992,  992,  992,  992,  992,  992,   87,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  986,  986,  986,  986,  986,  986,  986,  986,
       30,  986,  986,  986,  986,  986,  986,  986, 1000, 1001,
      986,  986,  986,  986,   30,   30,  986,   30,   30,   30,
       30,   30,   30,  986,   30,   30,  986,   30,   30,  986,
       30,  986,  986,  986,   30,   30,   30,   30,   30,   30,
       30,   30,   30,  986,  986,  986,  986,  986,  986,   30,
       30,   30,   30,   30,   30,  986,   30,   30,   30,  990,

      990,  990,  986,  992,  992,  992,  992,  992,  992,  992,
      992,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  986,  986,  986,  986,  986,
      986,  986,  986,  986,   30,   30,   30,  988,  986,  986,
      986,  986,  986,  986,  986,  986,  986,   87,   30,   87,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      986,  986, 1002,  986, 1000, 1001,  986, 1003, 1004,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

      986,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,  986,  986,  986,   30,   30,   30,   30,  986,  986,
      986,  986,   30,   30,  992,  992,  992,  992,  992,  992,
      992,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      992,  992,  992,  992,  992,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,   87,   87,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992, 1002, 1005,  986,  986, 1006, 1003, 1004,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,  986,   30,   30,   30,   30,  986,  986,

      986,   30,   30,   30,  986,  986,  986,  986,   30,  992,
      992,  992,  986,  986,  986,  986,  986,  992,  992,  986,
      986,  409, 1007,  998,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,   87,   87,  992,  992,  992,
      992,  992, 1005, 1006,  986,  986,   30,   30,  986,   30,
      986,   30,   30,   30,   30,  986,   30,   30,  986,  986,
       30,   30,  986,  986,   30,  986,  986,  986,  986,  986,
      986,  986,  986,  992,  992,  986,  986,   30,   30,   30,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,   87,   87,  992,  986,  986,

      986,  986,   30,  986,  986,   30,   30,   30,   30,   30,
       30,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  992,  382,  986,  998,   30,   30,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,   87,   87,
      992,  986,   30,   30,   30,   30,   30,   30,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  992,
      986,   30,   30,  986,  986,  986,   87,   87,  992,   30,
       30,   30,  986,   30,   30,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  992,  986,   30,   30,   87,
      992,   30,   30,   30,   30,  986,  986,  986,  986,  986,

      986,  986,  986,  986,  986,  992,  986,   30,   30,   87,
      986,   30,  986,   30,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  382,  998,   30,   30,   87,   30,
       30,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,   30,   87,   30,   30,  986,  986,  986,  986,  986,
      986,  986,   30,  986,  986,  986,  986,  986,  986,   30,
      986,  986,  986,   30,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,    0,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,

      986,  986,  986,  986,  986,  986,  986
    } ;

static yyconst flex_uint16_t yy_nxt[4365] =
    {   0,
        4,    5,    6,    5,    5,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   13,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   13,   34,   35,   36,   37,   38,   39,
       40,   13,   41,   42,   43,   44,   45,   46,   47,   48,
       13,   13,   49,   50,   51,   13,   13,   13,   13,   13,
       13,   52,   53,   54,   13,   13,   55,   56,   13,   13,
       57,   13,   13,   13,   58,   59,    4,   60,    4,    4,
        4,   61,   62,   63,   64,   65,   66,   67,   68,   70,
       70,   70,   70,   70,   70,   70,   70,  111,  114,  115,

      116,  117,  118,  119,  120,  121,  112,  100,  100,  100,
       71,  214,  214,  214,   71,   72,   72,   73,   72,   72,
       74,   74,   74,   72,   75,   72,   74,   76,   72,   72,
       72,   72,   72,   74,   72,   74,   74,   72,   72,   72,
       74,   72,   72,   72,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   72,
       72,   72,   72,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   72,
       72,   72,   72,   72,   72,   72,   77,   78,   79,   80,

       81,   82,   83,   84,   85,   85,   85,   85,   86,   87,
       88,   87,   86,   89,   86,   87,   90,   86,   86,   86,
       86,   86,   87,   86,   87,   87,   86,   86,   86,   87,
       86,   86,   86,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   86,   91,
       86,   86,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   86,   86,
       86,   86,   85,   85,   85,   92,   93,   94,   95,   96,
       97,   98,   99,  101,  985,  122,  102,  144,  144,  144,

      144,  101,  123,  146,  102,  148,  146,  100,   73,  189,
      984,  100,   73,  149,  150,  100,  100,  253,  145,  100,
      646,  166,  147,  147,  211,  174,  983,  101,  191,  168,
      102,  100,  100,  192,  100,  167,  100,  190,  100,  169,
      100,  100,  170,  100,  100,  172,  173,  215,  215,  183,
       73,  171,  982,  175,  193,  365,  100,   73,  100,  176,
      100,   85,  177,  181,  736,  103,  104,  105,  106,  107,
      108,  109,  110,  103,  104,  105,  106,  107,  108,  109,
      110,  126,  184,  101,  237,  100,  102,  100,  100,  182,
      231,  127,  128,  129,  217,  217,  100,  981,  130,  103,

      104,  105,  106,  107,  108,  109,  110,  101,  153,  980,
      102,  131,  132,  100,  979,  100,  215,  215,  185,  154,
      133,  100,  101,  100,  151,  102,  376,  100,  155,  216,
      216,  216,  134,  233,  233,  135,  136,  437,  137,  138,
      139,  978,  140,  141,  217,  217,  142,   73,  100,  163,
      438,  238,  100,  156,  100,  103,  104,  105,  106,  107,
      108,  109,  110,  157,  218,  218,  218,  158,  159,  160,
      161,  977,  162,  100,  164,  186,  165,  187,  976,  103,
      104,  105,  106,  107,  108,  109,  110,  178,  100,  100,
      239,  179,  100,  100,  103,  104,  105,  106,  107,  108,

      109,  110,  194,  195,  199,  100,  196,  975,  197,  100,
      188,  201,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  180,  100,   74,   74,   74,  205,   73,  100,  974,
      100,   73,  100,  200,  100,   73,  100,  100,   73,  100,
      100,  100,  278,  278,  203,  202,  206,  100,  973,  100,
      204,  100,  972,  100,  238,  100,  198,  238,  207,  208,
      144,  220,  144,  144,  971,  100,  100,  100,  100,  209,
       70,   70,   70,   70,  100,  253,  100,   85,  100,  238,
      796,  145,  221,  221,  221,  221,   72,   72,   73,   72,
      240,  238,  287,  239,  100,  266,  239,  280,  280,  100,

      288,  100,  240,  232,  232,  232,  240,  234,  234,  234,
      299,  299,  235,  235,  236,  236,  236,  970,  239,  100,
      969,  100,  100,  100,  100,  968,   87,   87,   87,  275,
      239,  267,  100,  967,  239,  114,  115,  116,  117,  118,
      119,  120,  121,  214,  214,  214,  216,  216,  216,  218,
      218,  218,  113,  113,  113,  347,  348,  100,  268,  100,
      277,  277,  277,  966,   72,   72,   72,  223,  224,  225,
      226,  227,  228,  229,  230,   85,   85,   85,   85,   85,
      241,  242,  241,   85,  243,   85,  241,  244,   85,   85,
       85,   85,  240,  241,   85,  241,  241,   85,   85,   85,

      241,   85,   85,   85,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,   85,
      239,   85,   85,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,   85,
       85,   85,   85,   85,   85,   85,  245,  246,  247,  248,
      249,  250,  251,  252,   85,   85,   85,   85,  238,  100,
      255,  279,  279,  279,  281,  281,  281,  286,  100,  238,
      289,  256,  238,  349,  350,  238,  211,  238,  292,  100,
      238,  266,  293,  238,  100,  100,  100,  300,  100,  147,

      147,  294,  965,  100,   73,  100,  100,  239,  345,  257,
      100,  100,  346,  346,  100,  963,  100,  366,  239,  962,
      100,  239,  100,  100,  239,  100,  239,  351,  352,  239,
      239,  100,  239,  100,  961,  100,  100,  100,  100,  959,
      271,  271,   85,   85,   85,  258,  259,  260,  261,  262,
      263,  264,  265,  269,  270,  270,  270,  272,  272,  272,
      273,  273,  274,  274,  274,  295,  296,  297,  100,  298,
      146,  312,  620,  146,  420,  100,  100,  100,  100,  100,
      100,  958,  370,  100,  100,   85,  621,  100,  957,  147,
      147,  100,  956,  100,  100,  100,  444,  100,  299,  299,

      100,  100,  100,  100,  313,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  211,  100,  314,  100,  100,
      100,  100,  100,  315,  100,  317,  100,  100,  445,  445,
      316,  100,  100,  100,  325,  100,  955,  319,  100,  954,
      100,  100,  320,  253,  100,  100,  365,  100,  318,  238,
      100,  100,  100,  100,  100,  321,  322,  100,  100,  100,
      100,  330,  100,  323,  324,  326,  100,  100,  100,  100,
      328,  100,  331,  327,  100,  100,  329,  100,  100,  952,
      333,  100,  334,  100,  100,  100,  336,  100,  239,  339,
      100,  100,  100,  951,  100,  100,  100,  100,  100,  100,

      332,  100,  199,  100,  100,  100,  100,  337,  335,  338,
      100,  100,  100,  341,  100,  100,  100,  100,  100,  100,
      100,  397,  100,  100,  340,   73,  100,  950,   73,  100,
      100,  100,  100,  100,  100,  100,   73,  100,  100,  100,
       73,  949,  354,   73,  100,  100,  100,   73,  355,  100,
      100,  100,  353,  100,  358,  100,   73,  100,  356,  100,
       73,  357,  100,  100,  100,  100,  100,  361,   73,  359,
      100,   73,  100,  948,  100,  360,  100,  363,  364,  362,
      100,  100,  100,   73,  100,  947,  100,  100,   73,  100,
      367,  367,  367,  368,  368,  368,  369,  369,  369,   73,

      946,  222,  222,  222,  371,  371,  371,  113,  113,  113,
      940,  238,  372,  372,  100,  238,  373,  373,  373,  238,
      374,  374,  939,  375,  375,  375,  100,  938,  238,  937,
      238,  238,   74,   74,   74,  238,   74,   74,   74,  100,
      936,  100,  935,  238,   74,   74,   74,   74,   74,   74,
      239,  100,  934,  100,  239,  238,  484,  485,  239,  377,
      377,  377,  486,  486,  378,  378,  378,  239,  238,  239,
      239,  238,  933,  238,  239,  379,  379,  379,   85,   85,
       85,   85,  239,  238,  381,  391,  932,  241,  241,  241,
      399,  392,  392,  392,  239,  113,  113,  113,  923,  238,

      393,  393,  394,  394,  394,  421,  922,  239,  395,  395,
      239,  238,  239,  921,  238,  396,  396,  396,  113,  113,
      113,  920,  239,  382,  487,  487,  400,  401,  402,  403,
      404,  405,  406,  407,  919,  238,  918,  238,  239,  917,
      254,  254,  254,  422,  422,  422,  425,  425,  916,  428,
      239,  540,  540,  239,  238,  427,   85,   85,   85,  383,
      384,  385,  386,  387,  388,  389,  390,   85,   85,   85,
       85,  423,  423,  255,  239,  238,  239,  113,  113,  113,
      433,  433,  433,  424,  424,  424,  426,  426,  426,  429,
      429,  100,  915,  239,  434,  434,  434,  435,  435,  435,

      542,  542,  345,  904,  100,  100,  346,  346,  100,   87,
       87,   87,  257,  100,  239,  903,  100,  100,  100,  429,
      429,  429,  429,  429,  429,  902,   87,   87,   87,  100,
      100,  100,  100,  100,  901,  100,  582,  582,  100,  900,
      100,  899,  100,  898,  100,   85,   85,   85,  258,  259,
      260,  261,  262,  263,  264,  265,   85,   85,   85,   85,
      380,  408,  409,  408,  380,  410,  380,  408,  411,  380,
      380,  380,  380,  380,  408,  380,  408,  408,  380,  380,
      380,  408,  380,  380,  380,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,

      380,  382,  380,  380,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      380,  380,  380,  380,   85,   85,   85,  412,  413,  414,
      415,  416,  417,  418,  419,  238,  441,  100,  238,  454,
      456,  238,  457,  100,  238,  464,  100,  238,  488,  100,
      100,  100,  489,  489,  100,  897,  238,  100,  455,  896,
      100,  253,  100,  100,  100,  463,  100,  884,  100,  100,
      458,  100,  100,  100,  239,  459,  460,  239,  100,  100,
      239,  100,  100,  239,  462,  100,  239,  100,  100,  883,

      100,  100,  882,  100,  100,  239,  100,  465,  100,  100,
      461,  881,  467,  100,  100,  100,  470,   87,   87,   87,
       87,   87,   87,  430,  430,  430,  431,  431,  431,  432,
      432,  432,  468,  466,  472,  100,  100,  100,  532,  100,
      100,  100,  445,  445,  473,  474,  880,  100,  100,  100,
      100,  100,  100,  612,  612,  469,  486,  486,  100,  487,
      487,  100,  100,  100,  100,  100,  471,  100,  100,  100,
      475,  476,  100,  100,  100,  100,  100,  100,  479,  100,
      100,  100,  477,  100,  100,  100,  879,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  478,  481,  100,

      100,  100,  480,  100,  100,  100,  100,  100,  100,  100,
      482,  100,  100,  100,  490,  100,  100,  100,  491,  100,
      483,  461,  100,  496,  100,  100,  100,  100,  100,  100,
       73,  100,  100,  100,  492,   73,  494,  238,  100,  100,
       73,  100,  100,  100,   73,  238,  878,  100,  493,  100,
      497,   73,  495,  100,   73,  100,  498,  100,  100,  100,
      100,   73,  238,  100,  100,  100,  100,  100,   73,  100,
      877,  499,   73,  613,  614,   73,  239,  398,  398,  398,
      539,  539,  539,  876,  239,  238,  513,  541,  541,  541,
      543,  543,  543,  113,  113,  113,  113,  113,  113,  857,

      488,  239,  238,  238,  489,  489,  222,  222,  222,  528,
      528,  222,  222,  222,  636,  636,  222,  222,  222,  526,
      222,  222,  222,  856,  239,  514,  855,  500,  500,  500,
      501,  501,  501,  238,  380,  380,  380,  502,  502,  502,
      238,  239,  239,  238,   74,   74,   74,  238,   74,   74,
       74,   74,   74,   74,   85,   85,   85,   85,  530,  530,
      503,  515,  516,  517,  518,  519,  520,  521,  522,  854,
      238,  238,  239,  853,  527,  527,  527,  569,  852,  239,
      128,  851,  239,  238,  579,  718,  239,  238,  503,  850,
      238,  849,  513,  113,  113,  113,  638,  638,  100,   91,

      512,  512,  512,  100,  835,  529,  529,  529,  238,  239,
      239,  238,  531,  531,  531,  241,  241,  241,  829,  241,
      241,  241,  239,  100,   86,  100,  239,  238,  100,  239,
      594,  514,   85,   85,   85,  504,  505,  506,  507,  508,
      509,  510,  511,   85,   85,   85,   85,  239,  238,  523,
      239,   86,  635,  635,  635,  241,  241,  241,  238,  241,
      241,  241,  533,  533,  533,  100,  239,  515,  516,  517,
      518,  519,  520,  521,  522,  513,  238,  100,  100,  590,
      534,  534,  534,  571,  571,  524,  820,  239,   91,  819,
      100,  591,  100,  253,  818,  238,  817,  239,  816,  535,

      535,  535,  100,  100,  100,  595,  654,  654,  100,  580,
      580,  536,  525,  815,  514,  239,  656,  656,  632,  813,
      575,   85,   85,   85,  504,  505,  506,  507,  508,  509,
      510,  511,  625,  100,  239,  100,  598,  812,  537,  580,
      580,  580,  580,  580,  580,  633,  582,  582,  627,  627,
      515,  516,  517,  518,  519,  520,  521,  522,  512,  546,
      547,  546,  512,  548,  512,  546,  549,  512,  512,  512,
      512,  512,  546,  512,  546,  546,  512,  512,  512,  546,
      512,  512,  512,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  512,  514,

      512,  512,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  512,  512,
      512,  512,  238,  800,  238,  550,  551,  552,  553,  554,
      555,  556,  557,   85,   85,   85,   85,  612,  612,  559,
      799,  100,  795,  596,  100,  637,  637,  637,  789,  100,
      238,  791,  791,  238,  100,  639,  639,  639,  100,  100,
      238,  239,  772,  239,  238,  770,  100,  238,  100,  100,
      238,  100,  597,  592,  100,  100,  100,  593,  560,  100,
      769,  100,  599,  100,  100,  100,  100,  604,  768,  239,

      238,  767,  239,  763,  408,  408,  408,  573,  573,  239,
      100,  746,  100,  239,  745,  600,  239,  238,  446,  239,
      238,   85,   85,   85,  561,  562,  563,  564,  565,  566,
      567,  568,  570,  570,  570,  572,  572,  572,  238,  239,
      100,  238,  574,  574,  574,  238,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  601,  239,  238,  100,  239,
      720,  100,  398,  398,  398,  100,  713,  100,  793,  793,
      602,  708,  254,  254,  254,  603,  100,  239,  707,  100,
      239,  831,  831,  100,  239,  100,  100,  605,  100,  576,
      576,  576,  577,  577,  577,  100,  239,  833,  833,  100,

      706,  100,   73,  100,  100,  705,  100,  100,  606,  607,
      578,  578,  578,   87,   87,   87,  100,   87,   87,   87,
      100,  699,  100,  608,  100,   73,  100,  100,  100,   87,
       87,   87,  100,   73,  100,  677,  100,  100,  609,  619,
      100,  100,  238,  100,  100,  611,  610,  622,  100,  238,
      676,  617,  100,  100,  100,  100,  420,  238,  100,  675,
      615,  100,  100,  100,  100,  100,  100,  100,  616,  100,
      100,  100,  674,  100,  238,  100,  618,  658,  222,  222,
      222,  239,  652,  100,  623,  100,  238,  253,  239,  238,
      640,  100,  659,  100,  238,  100,  239,  100,  624,  700,

      700,  222,  222,  222,  238,  240,  238,  238,  634,  222,
      222,  222,  238,  239,   86,   86,   86,  240,  238,  660,
      641,  626,  626,  626,  238,  239,  238,  253,  239,  628,
      628,  628,  253,  239,  253,  240,  238,  589,  642,  642,
      398,  398,  398,  239,  238,  239,  239,  629,  629,  238,
      588,  239,  587,  584,  238,  699,  583,  239,  630,  630,
      630,  631,  238,  239,  581,  239,   85,  545,  642,  642,
      642,  642,  642,  642,  544,  239,  380,  380,  380,  380,
      380,  380,  538,  239,  380,  380,  380,  488,  239,  453,
      380,  380,  380,  239,  398,  398,  398,  452,  643,  643,

      643,  239,  398,  398,  398,  648,  648,  648,  644,  644,
      644,  253,  451,  253,  647,  647,  645,  645,  645,  651,
      450,  241,  241,  241,  253,  449,  241,  241,  241,  649,
      649,  649,  100,  253,  241,  241,  241,  650,  650,  650,
      546,  546,  546,  100,  647,  647,  647,  647,  647,  647,
      253,  448,  100,  653,  653,  653,  238,  100,  238,  100,
      655,  655,  655,  657,  657,  657,  238,  447,  100,  100,
      100,  238,  446,  238,  100,  238,  443,  100,  238,  100,
      238,  238,  238,  114,  115,  116,  117,  118,  119,  120,
      121,  240,  238,  442,  100,  239,  100,  239,  238,  100,

      100,  100,  238,  440,  439,  239,  436,   85,  100,   85,
      239,  345,  239,  344,  239,  343,  342,  239,  238,  239,
      239,  239,  238,  700,  700,  100,  681,  682,  558,  558,
      558,  239,  661,  100,  238,  100,  311,  239,  662,  662,
      662,  239,  238,  663,  663,  664,  664,  664,  665,  665,
      666,  666,  666,  667,  408,  408,  408,  239,  238,  100,
      100,  239,  238,  503,  408,  408,  408,  512,  512,  512,
      408,  408,  408,  239,  408,  408,  408,  684,  100,  699,
      686,  239,  310,  309,  100,  100,  100,  100,  308,  238,
      668,  668,  668,  100,  669,  669,  669,  239,  238,   86,

      240,  239,  100,  100,  307,  100,  670,  670,  670,  238,
      687,  306,  671,  671,  254,  254,  254,  305,  100,  304,
      100,  302,  301,  672,  672,  100,   86,  100,  239,  100,
      254,  254,  254,  680,  254,  254,  254,  239,  100,  685,
      291,  290,  671,  671,  671,  671,  671,  671,  239,  100,
      100,  285,  100,  672,  672,  672,  672,  672,  672,  100,
      284,  694,  100,  100,  283,  100,  688,  100,  100,  683,
      282,  693,  100,  100,  100,  276,  100,  100,  690,  219,
      100,  238,  213,   73,  100,  100,  100,  100,  689,  100,
      695,  696,  100,  100,  100,  100,  691,  100,  100,  100,

      100,  100,  100,  692,  100,  100,  701,  100,  100,  100,
      100,  698,  100,  100,  100,   73,  219,  697,  100,  238,
      239,  213,  238,  503,  703,  100,  100,  702,  100,  238,
      212,  704,  238,  100,  100,  100,  100,  238,  100,  100,
      100,  100,  238,  100,  211,  100,  152,  143,  709,  125,
      100,  238,  100,   86,   86,   86,  124,  986,  239,   86,
       69,  239,  512,  512,  512,  512,  512,  512,  239,  238,
      986,  239,  512,  512,  512,  986,  239,  715,  715,  715,
      986,  239,  716,  716,  716,  986,   86,  714,  714,  986,
      239,   86,   86,   86,   86,   86,   86,  717,  717,  717,

      238,   86,   86,   86,  710,  710,  710,  986,  239,  711,
      711,  711,  238,  100,  712,  712,  712,  714,  714,  714,
      714,  714,  714,  380,  380,  380,  719,  719,  398,  398,
      398,  747,  721,  721,  398,  398,  398,  986,  100,  239,
      100,  380,  380,  380,  398,  398,  398,  546,  546,  546,
      986,  239,  546,  546,  546,  986,  719,  719,  719,  719,
      719,  719,  721,  721,  721,  721,  721,  721,  546,  546,
      546,  986,  380,  380,  380,  398,  722,  722,  722,  398,
      723,  398,  722,  724,  398,  398,  398,  398,  398,  722,
      398,  722,  722,  398,  398,  398,  722,  398,  398,  398,

      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  398,  399,  398,  398,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  398,  398,  398,  398,  546,
      546,  546,  725,  726,  727,  728,  729,  730,  731,  732,
      733,  733,  733,  734,  734,  734,  735,  735,  735,   85,
      238,  986,  737,  737,  238,  749,  986,  238,  986,  986,
      238,  986,  986,  238,  986,  100,  238,  751,  986,  238,
      986,  986,  238,  100,  986,  238,  100,  986,  238,  100,

      986,  986,  737,  737,  737,  737,  737,  737,  100,  239,
      100,  100,  100,  239,  986,  748,  239,  986,  100,  239,
      100,  100,  239,  100,  100,  239,  100,  986,  239,  986,
      986,  239,  986,  100,  239,  100,  100,  239,  100,  750,
      986,  986,  558,  558,  558,  986,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  738,  738,  738,  739,  739,
      739,  740,  740,  740,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  238,  986,  100,  100,  986,  986,  100,
      512,  512,  512,  100,  238,  756,  100,  741,  741,  986,
      759,  760,  986,  752,  753,  986,  986,  755,  742,  742,

      100,  100,  100,  100,  100,  986,  100,  754,  100,  100,
      100,  100,  239,  757,  100,  100,  764,  741,  741,  741,
      741,  741,  741,  239,  100,  100,  238,  986,  742,  742,
      742,  742,  742,  742,  100,  100,  100,  766,  758,  100,
      100,  100,  100,  100,  100,  771,  238,  986,  986,  100,
      100,  100,  100,  238,  762,  100,  100,  761,  986,  986,
      100,  986,  100,  986,  100,  239,  986,  986,  100,  100,
      100,  100,  773,  773,  986,  986,  765,  512,  512,  512,
      806,  100,  100,  100,  986,  239,  512,  512,  512,  100,
      986,  100,  239,  986,  238,  986,  986,  779,   86,   86,

       86,  986,  773,  773,  773,  773,  773,  773,  774,  774,
      986,  986,  513,  986,  238,  776,  776,  986,   86,   86,
       86,  722,  722,  722,  986,   86,   86,   86,  775,  775,
      790,  790,  790,  239,  777,  777,  780,  986,  774,  774,
      774,  774,  774,  774,  986,  776,  776,  776,  776,  776,
      776,  514,  986,  239,  792,  792,  792,  986,  775,  775,
      775,  775,  775,  775,  777,  777,  777,  777,  777,  777,
      238,  986,  781,  782,  783,  784,  785,  786,  787,  788,
      794,  794,  794,  546,  546,  546,  238,  515,  516,  517,
      518,  519,  520,  521,  522,  546,  546,  546,  546,  546,

      546,   85,  238,  100,  797,  797,  238,  986,  986,  239,
      778,  778,  778,  830,  830,  830,  801,  811,  986,  986,
      798,  798,  802,  986,  986,  239,  986,  986,  100,  986,
      100,  986,  804,  805,  797,  797,  797,  797,  797,  797,
      100,  239,  558,  558,  558,  239,  100,  832,  832,  832,
      798,  798,  798,  798,  798,  798,  100,  100,  558,  558,
      558,  100,  100,  808,  986,  100,  814,  100,  986,  100,
      100,  100,  986,  100,  558,  558,  558,  100,  986,  803,
      986,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      821,  821,  253,  807,  100,  100,  100,  100,  822,  822,

      238,  809,  100,  986,  100,  834,  834,  834,  810,  986,
      100,  100,  100,  986,  823,  823,  253,  722,  722,  722,
      821,  821,  821,  821,  821,  821,  238,  871,  822,  822,
      822,  822,  822,  822,  100,  100,  100,  986,  100,  239,
      824,  824,  986,  986,  823,  823,  823,  823,  823,  823,
      825,  825,  722,  722,  722,  986,  826,  826,  986,  100,
      100,  100,  100,  986,  986,  239,  722,  722,  722,  986,
      824,  824,  824,  824,  824,  824,  253,  722,  722,  722,
      825,  825,  825,  825,  825,  825,  826,  826,  826,  826,
      826,  826,  836,  836,  836,  100,  837,  837,  837,  986,

      986,  827,  838,  838,  838,   85,  100,  100,  839,  839,
      986,   85,  238,  842,  840,  840,  778,  778,  778,  986,
      100,  843,  100,  986,  844,  986,  841,  841,  828,  986,
      986,  100,  100,  100,  100,  986,  986,  100,  839,  839,
      839,  839,  839,  839,  840,  840,  840,  840,  840,  840,
      986,  239,  100,  100,  986,  986,  841,  841,  841,  841,
      841,  841,  100,  100,  100,  986,  845,  100,  858,  858,
      986,  846,  238,  513,  859,  859,  986,  100,  100,  100,
      100,  847,  986,  848,  986,  986,  860,  860,  100,  986,
      100,  986,  100,  986,  100,  861,  861,  862,  858,  858,

      858,  858,  858,  858,  859,  859,  859,  859,  859,  859,
      986,  239,  514,  100,  986,  986,  860,  860,  860,  860,
      860,  860,  778,  778,  778,  861,  861,  861,  861,  861,
      861,  863,  863,  778,  778,  778,  986,  986,  100,  986,
      100,  778,  778,  778,  864,  864,  864,  100,  515,  516,
      517,  518,  519,  520,  521,  522,  865,  865,  865,  986,
      986,  863,  863,  863,  863,  863,  863,  866,  866,  866,
      100,  986,  100,  100,  100,  722,  722,  722,  722,  722,
      722,  722,  722,  722,   85,  100,  986,  867,  867,  986,
       85,  238,  873,  868,  868,  100,  986,  100,  100,  986,

      100,  986,  870,  875,  872,  869,  869,  778,  778,  778,
      100,  986,  100,  778,  778,  778,  100,  867,  867,  867,
      867,  867,  867,  868,  868,  868,  868,  868,  868,  986,
      239,  885,  885,  238,  986,  869,  869,  869,  869,  869,
      869,  100,  874,  100,  778,  778,  778,  886,  886,  100,
      986,  888,  986,  887,  887,  986,  986,  986,  986,  986,
      986,  885,  885,  885,  885,  885,  885,  100,  100,  986,
      986,  100,  239,  986,  100,  986,  100,  886,  886,  886,
      886,  886,  886,  887,  887,  887,  887,  887,  887,  889,
      889,  986,  100,  893,  100,  100,  895,  986,  100,  986,

       85,  238,  100,  890,  890,  100,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  891,  891,  986,  986,  889,
      889,  889,  889,  889,  889,  986,  100,  100,  986,  100,
      100,  986,  100,  890,  890,  890,  890,  890,  890,  100,
      239,  905,  905,  986,  892,  891,  891,  891,  891,  891,
      891,  100,  986,  100,  238,  907,  907,  894,  986,  986,
      986,  986,  986,  986,  100,  986,  100,  911,  906,  906,
      986,  905,  905,  905,  905,  905,  905,  986,  908,  908,
      986,  986,  913,  986,  986,  907,  907,  907,  907,  907,
      907,  100,   85,  239,  100,  910,  910,  100,  906,  906,

      906,  906,  906,  906,  909,  909,  100,  986,  908,  908,
      908,  908,  908,  908,  986,  100,  100,  986,  100,  100,
      100,  100,  100,  100,  100,  910,  910,  910,  910,  910,
      910,  100,  100,  100,  909,  909,  909,  909,  909,  909,
      100,  986,  100,  100,  912,  100,  944,  100,  100,  986,
      100,  238,  914,  924,  924,  100,  986,  100,  986,  100,
      986,  986,  986,  986,  930,  925,  925,  986,  100,  986,
      100,  926,  926,  253,  986,  986,  931,  927,  927,  986,
      100,  986,  100,  924,  924,  924,  924,  924,  924,  986,
      239,  986,  100,  100,  986,  925,  925,  925,  925,  925,

      925,  926,  926,  926,  926,  926,  926,  927,  927,  927,
      927,  927,  927,  928,  928,  986,  513,  100,  100,  100,
      100,  986,  986,  986,   85,  100,  100,  929,  929,  100,
      986,  986,  986,  941,  941,  986,  986,  986,   85,  945,
      986,  943,  943,  928,  928,  928,  928,  928,  928,  986,
      100,  100,  100,  100,  100,  514,  100,  929,  929,  929,
      929,  929,  929,  941,  941,  941,  941,  941,  941,  942,
      942,  943,  943,  943,  943,  943,  943,  986,  986,  986,
      986,  986,  986,  986,  986,  100,  986,  986,  986,  953,
      953,  515,  516,  517,  518,  519,  520,  521,  522,  942,

      942,  942,  942,  942,  942,  100,  253,  986,  986,  986,
      100,  986,  100,  960,  960,  986,  986,  986,  986,  953,
      953,  953,  953,  953,  953,  100,  986,  986,  986,  100,
      100,  986,  100,  964,  964,  986,  986,  986,  986,  986,
      986,  986,  986,  960,  960,  960,  960,  960,  960,  100,
      100,  986,  100,  986,  100,  986,  100,  986,  986,  986,
      986,  986,  986,  964,  964,  964,  964,  964,  964,  986,
      986,  986,  986,  986,  100,  986,  100,  100,  100,  113,
      113,  113,  113,  210,  210,  210,  210,   72,   72,   72,
       72,   72,  222,  222,  222,  222,  222,   85,   85,   85,

       85,   85,  254,  254,  254,  254,  254,  303,  303,  303,
      986,  303,  380,  380,  380,  380,  380,  398,  398,  398,
      398,   86,   86,   86,   86,   86,  512,  512,  512,  512,
      558,  558,  558,  558,  558,  585,  585,  585,  986,  585,
      586,  586,  586,  986,  586,  673,  673,  673,  986,  673,
      678,  678,  678,  986,  678,  679,  679,  679,  986,  679,
      743,  743,  743,  986,  743,  744,  744,  744,  986,  744,
      778,  778,  778,  778,    3,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,

      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986
    } ;

static yyconst flex_int16_t yy_chk[4365] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    6,    6,    6,    6,   10,   11,   11,

       11,   11,   11,   11,   11,   11,   10,   61,   61,   61,
        5,   63,   63,   63,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    9,  984,   14,    9,   23,   23,   23,

       23,   13,   14,   24,   13,   25,   24,   31,   84,   43,
      983,   32,   78,   25,   25,   33,   38,  536,   23,   34,
      536,   31,   24,   24,  210,   35,  982,   22,   44,   32,
       22,   35,   31,   44,   31,   31,   32,   43,   32,   32,
       33,   38,   33,   38,   34,   34,   34,   64,   64,   38,
      230,   33,  981,   35,   44,  210,   35,   80,   35,   35,
       37,  659,   35,   37,  659,    9,    9,    9,    9,    9,
        9,    9,    9,   13,   13,   13,   13,   13,   13,   13,
       13,   20,   39,   20,   84,   37,   20,   37,   39,   37,
       78,   20,   20,   20,   66,   66,   40,  980,   20,   22,

       22,   22,   22,   22,   22,   22,   22,   26,   29,  979,
       26,   20,   20,   39,  978,   39,  106,  106,   40,   29,
       20,   40,   30,   40,   26,   30,  230,   48,   29,   65,
       65,   65,   20,   80,   80,   20,   20,  284,   20,   20,
       20,  977,   20,   20,  108,  108,   20,   77,   41,   30,
      284,   85,   48,   29,   48,   20,   20,   20,   20,   20,
       20,   20,   20,   29,   67,   67,   67,   29,   29,   29,
       29,  976,   29,   41,   30,   41,   30,   41,  975,   26,
       26,   26,   26,   26,   26,   26,   26,   36,   36,   42,
       85,   36,   47,   50,   30,   30,   30,   30,   30,   30,

       30,   30,   46,   46,   47,   49,   46,  974,   46,   51,
       42,   50,   53,   36,   42,   36,   42,   47,   50,   47,
       50,   36,   52,   77,   77,   77,   53,   79,   54,  973,
       49,   81,   49,   49,   51,   82,   51,   53,   83,   53,
       55,   56,  117,  117,   52,   51,   54,   52,  972,   52,
       52,   57,  971,   54,   92,   54,   46,   99,   55,   56,
       69,   69,   69,   69,  970,   55,   56,   55,   56,   57,
       70,   70,   70,   70,  100,   88,   57,  736,   57,   86,
      736,   69,   71,   71,   71,   71,   75,   75,   75,   75,
       86,   90,  127,   92,   88,   91,   99,  119,  119,  100,

      127,  100,   90,   79,   79,   79,   91,   81,   81,   81,
      145,  145,   82,   82,   83,   83,   83,  969,   86,   88,
      968,   88,  103,  103,  103,  966,   92,   92,   92,   99,
       90,   91,  113,  965,   91,  101,  101,  101,  101,  101,
      101,  101,  101,  105,  105,  105,  107,  107,  107,  109,
      109,  109,  114,  114,  114,  196,  196,  113,   91,  113,
      116,  116,  116,  963,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   89,   89,   89,   89,   95,  134,
       89,  118,  118,  118,  120,  120,  120,  126,  135,   93,
      128,   89,   94,  197,  197,   96,  211,   97,  131,  139,
       98,  239,  132,  244,  134,  126,  134,  147,  128,  147,

      147,  136,  962,  135,  224,  135,  131,   95,  195,   89,
      132,  136,  195,  195,  139,  959,  139,  211,   93,  957,
      126,   94,  126,  128,   96,  128,   97,  198,  198,   98,
      239,  131,  244,  131,  955,  132,  136,  132,  136,  952,
       95,   95,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   93,   94,   94,   94,   96,   96,   96,
       97,   97,   98,   98,   98,  137,  138,  140,  141,  142,
      146,  163,  496,  146,  257,  164,  163,  213,  213,  213,
      165,  951,  224,  137,  138,  257,  496,  142,  950,  146,
      146,  140,  949,  141,  166,  141,  299,  167,  299,  299,

      164,  163,  164,  163,  164,  165,  168,  165,  137,  138,
      137,  138,  142,  169,  142,  366,  140,  165,  140,  166,
      170,  166,  167,  166,  167,  168,  171,  172,  300,  300,
      167,  168,  173,  168,  174,  176,  948,  170,  169,  947,
      169,  175,  171,  941,  177,  170,  366,  170,  169,  252,
      182,  171,  172,  171,  172,  171,  172,  173,  174,  173,
      176,  178,  176,  173,  173,  175,  175,  178,  175,  177,
      176,  177,  179,  175,  180,  182,  177,  182,  179,  940,
      181,  183,  182,  174,  186,  174,  184,  185,  252,  187,
      199,  188,  178,  939,  178,  187,  214,  214,  214,  180,

      180,  180,  199,  179,  181,  179,  183,  185,  183,  186,
      184,  186,  185,  188,  185,  199,  188,  199,  188,  200,
      187,  252,  187,  201,  187,  223,  202,  937,  225,  181,
      203,  181,  215,  215,  215,  184,  226,  184,  204,  205,
      227,  935,  201,  228,  200,  208,  200,  229,  201,  206,
      201,  202,  200,  202,  204,  203,  231,  203,  202,  207,
      232,  203,  209,  204,  205,  204,  205,  206,  233,  205,
      208,  234,  208,  934,  206,  205,  206,  208,  209,  207,
      216,  216,  216,  235,  207,  933,  207,  209,  236,  209,
      217,  217,  217,  218,  218,  218,  219,  219,  219,  237,

      932,  223,  223,  223,  225,  225,  225,  276,  276,  276,
      923,  246,  226,  226,  242,  245,  227,  227,  227,  247,
      228,  228,  922,  229,  229,  229,  255,  921,  248,  920,
      249,  259,  231,  231,  231,  250,  232,  232,  232,  242,
      919,  242,  918,  251,  233,  233,  233,  234,  234,  234,
      246,  255,  917,  255,  245,  266,  345,  345,  247,  235,
      235,  235,  348,  348,  236,  236,  236,  248,  258,  249,
      259,  260,  916,  263,  250,  237,  237,  237,  240,  240,
      240,  240,  251,  265,  240,  246,  915,  245,  245,  245,
      253,  247,  247,  247,  266,  277,  277,  277,  904,  261,

      248,  248,  249,  249,  249,  259,  903,  258,  250,  250,
      260,  262,  263,  902,  264,  251,  251,  251,  278,  278,
      278,  901,  265,  240,  350,  350,  253,  253,  253,  253,
      253,  253,  253,  253,  900,  267,  899,  269,  261,  898,
      258,  258,  258,  260,  260,  260,  263,  263,  897,  267,
      262,  403,  403,  264,  270,  265,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  243,  243,  243,
      243,  261,  261,  243,  267,  268,  269,  279,  279,  279,
      280,  280,  280,  262,  262,  262,  264,  264,  264,  268,
      268,  286,  896,  270,  281,  281,  281,  282,  282,  282,

      405,  405,  346,  884,  292,  293,  346,  346,  295,  269,
      269,  269,  243,  296,  268,  883,  286,  298,  286,  268,
      268,  268,  268,  268,  268,  882,  270,  270,  270,  292,
      293,  292,  293,  295,  881,  295,  444,  444,  296,  880,
      296,  879,  298,  878,  298,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,

      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  271,  289,  313,  272,  312,
      314,  273,  315,  316,  274,  320,  314,  275,  352,  367,
      367,  367,  352,  352,  289,  877,  390,  318,  313,  876,
      319,  859,  313,  312,  313,  319,  315,  857,  316,  320,
      316,  314,  321,  314,  271,  317,  317,  272,  317,  289,
      273,  289,  318,  274,  318,  319,  275,  319,  312,  856,

      312,  315,  855,  315,  320,  390,  320,  321,  322,  321,
      317,  854,  323,  317,  324,  317,  327,  271,  271,  271,
      272,  272,  272,  273,  273,  273,  274,  274,  274,  275,
      275,  275,  324,  322,  329,  322,  323,  326,  390,  324,
      327,  324,  445,  445,  330,  331,  853,  332,  328,  368,
      368,  368,  337,  485,  485,  326,  486,  486,  329,  487,
      487,  323,  326,  323,  326,  327,  328,  327,  330,  331,
      334,  334,  332,  328,  332,  328,  334,  337,  337,  337,
      338,  335,  334,  329,  339,  329,  852,  353,  341,  369,
      369,  369,  340,  330,  331,  330,  331,  335,  339,  354,

      355,  334,  338,  334,  356,  338,  335,  338,  335,  339,
      340,  339,  353,  341,  353,  341,  357,  340,  355,  340,
      341,  354,  358,  360,  354,  355,  354,  355,  359,  356,
      370,  356,  363,  361,  356,  371,  358,  386,  362,  364,
      372,  357,  360,  357,  373,  384,  851,  358,  357,  358,
      361,  374,  359,  359,  375,  359,  362,  363,  361,  363,
      361,  376,  383,  362,  364,  362,  364,  360,  377,  360,
      850,  364,  378,  488,  488,  379,  386,  400,  400,  400,
      402,  402,  402,  849,  384,  388,  381,  404,  404,  404,
      406,  406,  406,  433,  433,  433,  434,  434,  434,  820,

      489,  383,  385,  413,  489,  489,  370,  370,  370,  386,
      386,  371,  371,  371,  518,  518,  372,  372,  372,  384,
      373,  373,  373,  819,  388,  381,  818,  374,  374,  374,
      375,  375,  375,  387,  383,  383,  383,  376,  376,  376,
      389,  385,  413,  391,  377,  377,  377,  392,  378,  378,
      378,  379,  379,  379,  380,  380,  380,  380,  388,  388,
      380,  381,  381,  381,  381,  381,  381,  381,  381,  817,
      428,  641,  387,  816,  385,  385,  385,  413,  815,  389,
      441,  814,  391,  393,  428,  641,  392,  394,  411,  813,
      395,  812,  398,  435,  435,  435,  520,  520,  441,  380,

      515,  515,  515,  460,  788,  387,  387,  387,  396,  428,
      641,  415,  389,  389,  389,  391,  391,  391,  782,  392,
      392,  392,  393,  441,  411,  441,  394,  397,  460,  395,
      460,  398,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  382,  382,  382,  382,  396,  419,  382,
      415,  411,  517,  517,  517,  393,  393,  393,  505,  394,
      394,  394,  395,  395,  395,  455,  397,  398,  398,  398,
      398,  398,  398,  398,  398,  399,  507,  456,  461,  455,
      396,  396,  396,  415,  415,  382,  771,  419,  382,  770,
      455,  456,  455,  514,  769,  429,  768,  505,  767,  397,

      397,  397,  456,  461,  456,  461,  553,  553,  465,  429,
      429,  399,  382,  766,  399,  507,  555,  555,  514,  764,
      419,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  505,  465,  429,  465,  465,  763,  399,  429,
      429,  429,  429,  429,  429,  514,  582,  582,  507,  507,
      399,  399,  399,  399,  399,  399,  399,  399,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,

      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  412,  744,  417,  409,  409,  409,  409,  409,
      409,  409,  409,  410,  410,  410,  410,  612,  612,  410,
      743,  458,  732,  462,  459,  519,  519,  519,  726,  462,
      414,  728,  728,  416,  466,  521,  521,  521,  463,  476,
      418,  412,  713,  417,  421,  708,  458,  422,  458,  459,
      423,  459,  463,  458,  462,  468,  462,  459,  410,  466,
      707,  466,  466,  463,  476,  463,  476,  476,  706,  414,

      424,  705,  416,  701,  412,  412,  412,  417,  417,  418,
      468,  679,  468,  421,  678,  468,  422,  425,  673,  423,
      426,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  414,  414,  414,  416,  416,  416,  427,  424,
      471,  430,  418,  418,  418,  431,  421,  421,  421,  422,
      422,  422,  423,  423,  423,  469,  425,  432,  477,  426,
      646,  475,  538,  538,  538,  471,  632,  471,  730,  730,
      471,  622,  424,  424,  424,  475,  478,  427,  621,  469,
      430,  784,  784,  477,  431,  477,  475,  477,  475,  425,
      425,  425,  426,  426,  426,  479,  432,  786,  786,  480,

      620,  478,  500,  478,  469,  619,  469,  481,  478,  479,
      427,  427,  427,  430,  430,  430,  482,  431,  431,  431,
      479,  613,  479,  480,  480,  501,  480,  483,  490,  432,
      432,  432,  481,  502,  481,  587,  491,  492,  481,  495,
      493,  482,  504,  482,  494,  483,  482,  497,  498,  506,
      586,  492,  483,  490,  483,  490,  560,  508,  495,  585,
      490,  491,  492,  491,  492,  493,  497,  493,  491,  494,
      499,  494,  584,  498,  509,  498,  494,  557,  500,  500,
      500,  504,  551,  495,  498,  495,  510,  549,  506,  511,
      522,  497,  560,  497,  523,  499,  508,  499,  499,  614,

      614,  501,  501,  501,  526,  523,  524,  527,  516,  502,
      502,  502,  528,  509,  504,  504,  504,  524,  529,  560,
      524,  506,  506,  506,  525,  510,  530,  513,  511,  508,
      508,  508,  512,  523,  503,  525,  531,  453,  525,  525,
      539,  539,  539,  526,  532,  524,  527,  509,  509,  533,
      452,  528,  451,  448,  534,  614,  447,  529,  510,  510,
      510,  511,  535,  525,  438,  530,  420,  408,  525,  525,
      525,  525,  525,  525,  407,  531,  526,  526,  526,  527,
      527,  527,  401,  532,  528,  528,  528,  351,  533,  311,
      529,  529,  529,  534,  540,  540,  540,  310,  530,  530,

      530,  535,  541,  541,  541,  542,  542,  542,  531,  531,
      531,  537,  309,  545,  537,  537,  532,  532,  532,  548,
      308,  533,  533,  533,  546,  307,  534,  534,  534,  543,
      543,  543,  545,  547,  535,  535,  535,  544,  544,  544,
      550,  550,  550,  546,  537,  537,  537,  537,  537,  537,
      559,  306,  547,  552,  552,  552,  561,  545,  562,  545,
      554,  554,  554,  556,  556,  556,  563,  305,  546,  559,
      546,  564,  303,  565,  590,  566,  294,  547,  567,  547,
      742,  568,  569,  548,  548,  548,  548,  548,  548,  548,
      548,  742,  570,  291,  559,  561,  559,  562,  571,  590,

      593,  590,  572,  288,  287,  563,  283,  254,  592,  241,
      564,  194,  565,  193,  566,  192,  191,  567,  573,  742,
      568,  569,  574,  700,  700,  593,  592,  593,  561,  561,
      561,  570,  562,  592,  575,  592,  162,  571,  563,  563,
      563,  572,  576,  564,  564,  565,  565,  565,  566,  566,
      567,  567,  567,  568,  569,  569,  569,  573,  577,  595,
      597,  574,  578,  824,  570,  570,  570,  634,  634,  634,
      571,  571,  571,  575,  572,  572,  572,  595,  606,  700,
      597,  576,  161,  160,  595,  597,  595,  597,  159,  891,
      573,  573,  573,  598,  574,  574,  574,  577,  579,  824,

      891,  578,  591,  606,  158,  606,  575,  575,  575,  580,
      598,  157,  579,  579,  576,  576,  576,  156,  598,  154,
      598,  149,  148,  580,  580,  596,  824,  591,  891,  591,
      577,  577,  577,  591,  578,  578,  578,  579,  594,  596,
      130,  129,  579,  579,  579,  579,  579,  579,  580,  599,
      596,  125,  596,  580,  580,  580,  580,  580,  580,  600,
      123,  607,  602,  594,  122,  594,  599,  603,  604,  594,
      121,  605,  608,  609,  599,  115,  599,  605,  602,  110,
      611,  625,  104,   76,  600,  607,  600,  602,  600,  602,
      608,  609,  603,  604,  603,  604,  603,  608,  609,  608,

      609,  610,  605,  604,  605,  611,  615,  611,  617,  616,
      607,  611,  607,  618,  623,   72,   68,  610,  624,  626,
      625,   62,  627,  925,  617,  615,  610,  616,  610,  628,
       59,  618,  629,  617,  616,  617,  616,  630,  618,  623,
      618,  623,  631,  624,   58,  624,   27,   21,  624,   19,
      615,  643,  615,  625,  625,  625,   18,    3,  626,  925,
        2,  627,  635,  635,  635,  636,  636,  636,  628,  644,
        0,  629,  637,  637,  637,    0,  630,  638,  638,  638,
        0,  631,  639,  639,  639,    0,  925,  633,  633,    0,
      643,  626,  626,  626,  627,  627,  627,  640,  640,  640,

      645,  628,  628,  628,  629,  629,  629,    0,  644,  630,
      630,  630,  642,  680,  631,  631,  631,  633,  633,  633,
      633,  633,  633,  643,  643,  643,  642,  642,  648,  648,
      648,  680,  647,  647,  649,  649,  649,    0,  680,  645,
      680,  644,  644,  644,  650,  650,  650,  652,  652,  652,
        0,  642,  653,  653,  653,    0,  642,  642,  642,  642,
      642,  642,  647,  647,  647,  647,  647,  647,  654,  654,
      654,    0,  645,  645,  645,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  655,
      655,  655,  651,  651,  651,  651,  651,  651,  651,  651,
      656,  656,  656,  657,  657,  657,  658,  658,  658,  660,
      661,    0,  660,  660,  662,  684,    0,  663,    0,    0,
      664,    0,    0,  665,    0,  681,  666,  686,    0,  667,
        0,    0,  668,  682,    0,  669,  683,    0,  670,  684,

        0,    0,  660,  660,  660,  660,  660,  660,  685,  661,
      681,  686,  681,  662,    0,  681,  663,    0,  682,  664,
      682,  683,  665,  683,  684,  666,  684,    0,  667,    0,
        0,  668,    0,  685,  669,  685,  686,  670,  686,  685,
        0,    0,  661,  661,  661,    0,  662,  662,  662,  663,
      663,  663,  664,  664,  664,  665,  665,  665,  666,  666,
      666,  667,  667,  667,  668,  668,  668,  669,  669,  669,
      670,  670,  670,  671,    0,  687,  688,    0,    0,  689,
      715,  715,  715,  690,  672,  691,  692,  671,  671,    0,
      695,  696,    0,  687,  688,    0,    0,  690,  672,  672,

      687,  688,  687,  688,  689,    0,  689,  689,  690,  691,
      690,  692,  671,  692,  695,  696,  702,  671,  671,  671,
      671,  671,  671,  672,  693,  698,  710,    0,  672,  672,
      672,  672,  672,  672,  691,  702,  691,  704,  693,  695,
      696,  695,  696,  697,  703,  709,  711,    0,    0,  693,
      698,  693,  698,  712,  698,  754,  704,  697,    0,    0,
      702,    0,  702,    0,  709,  710,    0,    0,  697,  703,
      697,  703,  714,  714,    0,    0,  703,  716,  716,  716,
      754,  704,  754,  704,    0,  711,  717,  717,  717,  709,
        0,  709,  712,    0,  718,    0,    0,  723,  710,  710,

      710,    0,  714,  714,  714,  714,  714,  714,  718,  718,
        0,    0,  724,    0,  719,  720,  720,    0,  711,  711,
      711,  725,  725,  725,    0,  712,  712,  712,  719,  719,
      727,  727,  727,  718,  721,  721,  723,    0,  718,  718,
      718,  718,  718,  718,    0,  720,  720,  720,  720,  720,
      720,  724,    0,  719,  729,  729,  729,    0,  719,  719,
      719,  719,  719,  719,  721,  721,  721,  721,  721,  721,
      738,    0,  723,  723,  723,  723,  723,  723,  723,  723,
      731,  731,  731,  733,  733,  733,  739,  724,  724,  724,
      724,  724,  724,  724,  724,  734,  734,  734,  735,  735,

      735,  737,  740,  762,  737,  737,  741,    0,    0,  738,
      781,  781,  781,  783,  783,  783,  747,  762,    0,    0,
      741,  741,  748,    0,    0,  739,    0,    0,  762,    0,
      762,    0,  752,  753,  737,  737,  737,  737,  737,  737,
      747,  740,  738,  738,  738,  741,  748,  785,  785,  785,
      741,  741,  741,  741,  741,  741,  752,  753,  739,  739,
      739,  750,  755,  757,    0,  747,  765,  747,    0,  757,
      758,  748,    0,  748,  740,  740,  740,  761,    0,  750,
        0,  752,  753,  752,  753,  765,  750,  755,  750,  755,
      772,  772,  778,  755,  757,  758,  757,  758,  773,  773,

      774,  758,  761,    0,  761,  787,  787,  787,  761,    0,
      765,  778,  765,    0,  774,  774,  779,  789,  789,  789,
      772,  772,  772,  772,  772,  772,  775,  844,  773,  773,
      773,  773,  773,  773,  844,  779,  778,    0,  778,  774,
      775,  775,    0,    0,  774,  774,  774,  774,  774,  774,
      776,  776,  790,  790,  790,    0,  777,  777,    0,  844,
      779,  844,  779,    0,    0,  775,  791,  791,  791,    0,
      775,  775,  775,  775,  775,  775,  780,  792,  792,  792,
      776,  776,  776,  776,  776,  776,  777,  777,  777,  777,
      777,  777,  793,  793,  793,  780,  794,  794,  794,    0,

        0,  780,  795,  795,  795,  796,  807,  806,  796,  796,
        0,  797,  798,  803,  797,  797,  829,  829,  829,    0,
      780,  806,  780,    0,  807,    0,  798,  798,  780,    0,
        0,  807,  806,  807,  806,    0,    0,  803,  796,  796,
      796,  796,  796,  796,  797,  797,  797,  797,  797,  797,
        0,  798,  808,  809,    0,    0,  798,  798,  798,  798,
      798,  798,  803,  810,  803,    0,  808,  811,  821,  821,
        0,  809,  823,  826,  822,  822,    0,  808,  809,  808,
      809,  810,    0,  811,    0,    0,  823,  823,  810,    0,
      810,    0,  811,    0,  811,  825,  825,  827,  821,  821,

      821,  821,  821,  821,  822,  822,  822,  822,  822,  822,
        0,  823,  826,  827,    0,    0,  823,  823,  823,  823,
      823,  823,  830,  830,  830,  825,  825,  825,  825,  825,
      825,  828,  828,  831,  831,  831,    0,    0,  827,    0,
      827,  832,  832,  832,  833,  833,  833,  828,  826,  826,
      826,  826,  826,  826,  826,  826,  834,  834,  834,    0,
        0,  828,  828,  828,  828,  828,  828,  835,  835,  835,
      843,    0,  828,  845,  828,  836,  836,  836,  837,  837,
      837,  838,  838,  838,  839,  848,    0,  839,  839,    0,
      840,  841,  846,  840,  840,  843,    0,  843,  845,    0,

      845,    0,  843,  848,  845,  841,  841,  864,  864,  864,
      848,    0,  848,  865,  865,  865,  846,  839,  839,  839,
      839,  839,  839,  840,  840,  840,  840,  840,  840,    0,
      841,  858,  858,  860,    0,  841,  841,  841,  841,  841,
      841,  846,  847,  846,  866,  866,  866,  860,  860,  847,
        0,  862,    0,  861,  861,    0,    0,    0,    0,    0,
        0,  858,  858,  858,  858,  858,  858,  862,  871,    0,
        0,  874,  860,    0,  847,    0,  847,  860,  860,  860,
      860,  860,  860,  861,  861,  861,  861,  861,  861,  863,
      863,    0,  862,  871,  862,  871,  874,    0,  874,    0,

      867,  869,  875,  867,  867,  863,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  869,  869,    0,    0,  863,
      863,  863,  863,  863,  863,    0,  870,  875,    0,  875,
      863,    0,  863,  867,  867,  867,  867,  867,  867,  872,
      869,  885,  885,    0,  870,  869,  869,  869,  869,  869,
      869,  870,    0,  870,  886,  887,  887,  872,    0,    0,
        0,    0,    0,    0,  872,    0,  872,  892,  886,  886,
        0,  885,  885,  885,  885,  885,  885,    0,  888,  888,
        0,    0,  894,    0,    0,  887,  887,  887,  887,  887,
      887,  892,  890,  886,  888,  890,  890,  944,  886,  886,

      886,  886,  886,  886,  889,  889,  894,    0,  888,  888,
      888,  888,  888,  888,    0,  893,  892,    0,  892,  888,
      889,  888,  944,  895,  944,  890,  890,  890,  890,  890,
      890,  894,  930,  894,  889,  889,  889,  889,  889,  889,
      893,    0,  893,  912,  893,  889,  930,  889,  895,    0,
      895,  906,  895,  905,  905,  914,    0,  930,    0,  930,
        0,    0,    0,    0,  912,  906,  906,    0,  912,    0,
      912,  907,  907,  928,    0,    0,  914,  908,  908,    0,
      914,    0,  914,  905,  905,  905,  905,  905,  905,    0,
      906,    0,  928,  908,    0,  906,  906,  906,  906,  906,

      906,  907,  907,  907,  907,  907,  907,  908,  908,  908,
      908,  908,  908,  909,  909,    0,  926,  928,  908,  928,
      908,    0,    0,    0,  910,  931,  945,  910,  910,  909,
        0,    0,    0,  924,  924,    0,    0,    0,  929,  931,
        0,  929,  929,  909,  909,  909,  909,  909,  909,    0,
      931,  945,  931,  945,  909,  926,  909,  910,  910,  910,
      910,  910,  910,  924,  924,  924,  924,  924,  924,  927,
      927,  929,  929,  929,  929,  929,  929,    0,    0,    0,
        0,    0,    0,    0,    0,  927,    0,    0,    0,  942,
      942,  926,  926,  926,  926,  926,  926,  926,  926,  927,

      927,  927,  927,  927,  927,  942,  964,    0,    0,    0,
      927,    0,  927,  953,  953,    0,    0,    0,    0,  942,
      942,  942,  942,  942,  942,  964,    0,    0,    0,  953,
      942,    0,  942,  960,  960,    0,    0,    0,    0,    0,
        0,    0,    0,  953,  953,  953,  953,  953,  953,  960,
      964,    0,  964,    0,  953,    0,  953,    0,    0,    0,
        0,    0,    0,  960,  960,  960,  960,  960,  960,    0,
        0,    0,    0,    0,  960,    0,  960,  987,  987,  988,
      988,  988,  988,  989,  989,  989,  989,  990,  990,  990,
      990,  990,  991,  991,  991,  991,  991,  992,  992,  992,

      992,  992,  993,  993,  993,  993,  993,  994,  994,  994,
        0,  994,  995,  995,  995,  995,  995,  996,  996,  996,
      996,  997,  997,  997,  997,  997,  998,  998,  998,  998,
      999,  999,  999,  999,  999, 1000, 1000, 1000,    0, 1000,
     1001, 1001, 1001,    0, 1001, 1002, 1002, 1002,    0, 1002,
     1003, 1003, 1003,    0, 1003, 1004, 1004, 1004,    0, 1004,
     1005, 1005, 1005,    0, 1005, 1006, 1006, 1006,    0, 1006,
     1007, 1007, 1007, 1007,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,

      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[141] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 
    0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int pmatch_flex_debug;
int pmatch_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *pmatchtext;
#line 1 "pmatch_lex.ll"
#line 4 "pmatch_lex.ll"
// Copyright (c) 2016 University of Helsinki
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// See the file COPYING included with this distribution for more
// information.

#include <string.h>

#include "HfstTransducer.h"
#include "HfstInputStream.h"
#include "HfstXeroxRules.h"
#include "pmatch_utils.h"
#include "pmatch_parse.hh"

#undef YY_INPUT
#define YY_INPUT(buf, retval, maxlen)   (retval = hfst::pmatch::getinput(buf, maxlen))

extern int pmatcherror(const char *text);

#undef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) pmatcherror(msg);

/* c.f. Unicode Standard 5.1 D92 Table 3-7 */
/* non US-ASCII */
/* any UTF-8 */
/* Escaped */
/* any ASCII */
/* special meaning in pmatch */
/* non-restricted ASCII */
/* token character */
#line 1846 "pmatch_lex.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pmatchlex_destroy (void );

int pmatchget_debug (void );

void pmatchset_debug (int debug_flag  );

YY_EXTRA_TYPE pmatchget_extra (void );

void pmatchset_extra (YY_EXTRA_TYPE user_defined  );

FILE *pmatchget_in (void );

void pmatchset_in  (FILE * _in_str  );

FILE *pmatchget_out (void );

void pmatchset_out  (FILE * _out_str  );

yy_size_t pmatchget_leng (void );

char *pmatchget_text (void );

int pmatchget_lineno (void );

void pmatchset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pmatchwrap (void );
#else
extern int pmatchwrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( pmatchtext, pmatchleng, 1, pmatchout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( pmatchin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( pmatchin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, pmatchin))==0 && ferror(pmatchin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(pmatchin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pmatchlex (void);

#define YY_DECL int pmatchlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after pmatchtext and pmatchleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( pmatchleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(pmatchtext[pmatchleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! pmatchin )
			pmatchin = stdin;

		if ( ! pmatchout )
			pmatchout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			pmatchensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				pmatch_create_buffer(pmatchin,YY_BUF_SIZE );
		}

		pmatch_load_buffer_state( );
		}

	{
#line 67 "pmatch_lex.ll"


#line 2068 "pmatch_lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of pmatchtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 987 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 986 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < pmatchleng; ++yyl )
				if ( pmatchtext[yyl] == '\n' )
					   
    pmatchlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 69 "pmatch_lex.ll"
{ return DEFINE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 70 "pmatch_lex.ll"
{ return DEFINE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 71 "pmatch_lex.ll"
{ return REGEX; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "pmatch_lex.ll"
{ return SET_VARIABLE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "pmatch_lex.ll"
{ return DEFINED_LIST; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 74 "pmatch_lex.ll"
{ return LIT_LEFT; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 75 "pmatch_lex.ll"
{ return INS_LEFT; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "pmatch_lex.ll"
{ return ENDTAG_LEFT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "pmatch_lex.ll"
{ return CAP_LEFT; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 78 "pmatch_lex.ll"
{ return OPTCAP_LEFT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 79 "pmatch_lex.ll"
{ return TOLOWER_LEFT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 80 "pmatch_lex.ll"
{ return TOUPPER_LEFT; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 81 "pmatch_lex.ll"
{ return OPT_TOUPPER_LEFT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 82 "pmatch_lex.ll"
{ return OPT_TOLOWER_LEFT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 83 "pmatch_lex.ll"
{ return ANY_CASE_LEFT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 84 "pmatch_lex.ll"
{ return EXPLODE_LEFT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 85 "pmatch_lex.ll"
{ return IMPLODE_LEFT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 86 "pmatch_lex.ll"
{ return LC_LEFT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 87 "pmatch_lex.ll"
{ return RC_LEFT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 88 "pmatch_lex.ll"
{ return NLC_LEFT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 89 "pmatch_lex.ll"
{ return NRC_LEFT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 90 "pmatch_lex.ll"
{ return OR_LEFT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 91 "pmatch_lex.ll"
{ return AND_LEFT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 92 "pmatch_lex.ll"
{ return TAG_LEFT; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 93 "pmatch_lex.ll"
{ return LST_LEFT; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 94 "pmatch_lex.ll"
{ return EXC_LEFT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 95 "pmatch_lex.ll"
{ return LIKE_LEFT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 96 "pmatch_lex.ll"
{ return UNLIKE_LEFT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 97 "pmatch_lex.ll"
{ return INTERPOLATE_LEFT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 98 "pmatch_lex.ll"
{ return SIGMA_LEFT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 99 "pmatch_lex.ll"
{ return COUNTER_LEFT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 100 "pmatch_lex.ll"
{ return DEFINE_LEFT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 101 "pmatch_lex.ll"
{ return DEFINS; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 103 "pmatch_lex.ll"
{ return ALPHA; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 104 "pmatch_lex.ll"
{ return UPPERALPHA; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 105 "pmatch_lex.ll"
{ return LOWERALPHA; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 106 "pmatch_lex.ll"
{ return NUM; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 107 "pmatch_lex.ll"
{ return PUNCT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 108 "pmatch_lex.ll"
{ return WHITESPACE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 110 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("count-patterns") + 1), "count-patterns");
    return VARIABLE_NAME;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 114 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("delete-patterns") + 1), "delete-patterns");
    return VARIABLE_NAME;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 118 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("extract-patterns") + 1), "extract-patterns");
    return VARIABLE_NAME;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 122 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("locate-patterns") + 1), "locate-patterns");
    return VARIABLE_NAME;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 126 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("mark-patterns") + 1), "mark-patterns");
    return VARIABLE_NAME;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 130 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("need-separators") + 1), "need-separators");
    return VARIABLE_NAME;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 134 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("max-context_length") + 1), "max-context-length");
    return VARIABLE_NAME;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 138 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("max-recursion") + 1), "max-recursion");
    return VARIABLE_NAME;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 143 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("vector-similarity-projection-factor") + 1), "vector-similarity-projection-factor");
    return VARIABLE_NAME;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 148 "pmatch_lex.ll"
{ return COMPLEMENT; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 149 "pmatch_lex.ll"
{ return TERM_COMPLEMENT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 150 "pmatch_lex.ll"
{ return INTERSECTION; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 151 "pmatch_lex.ll"
{ return MINUS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 153 "pmatch_lex.ll"
{ return CONTAINMENT_ONCE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 154 "pmatch_lex.ll"
{ return CONTAINMENT_OPT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 155 "pmatch_lex.ll"
{ return CONTAINMENT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 157 "pmatch_lex.ll"
{ return PLUS; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 158 "pmatch_lex.ll"
{ return STAR; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 160 "pmatch_lex.ll"
{ return IGNORE_INTERNALLY; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 161 "pmatch_lex.ll"
{ return IGNORING; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 163 "pmatch_lex.ll"
{ return UNION; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 165 "pmatch_lex.ll"
{ return EPSILON_TOKEN; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 166 "pmatch_lex.ll"
{ return EPSILON_TOKEN; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 167 "pmatch_lex.ll"
{ return EPSILON_TOKEN; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 168 "pmatch_lex.ll"
{ return ANY_TOKEN; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 169 "pmatch_lex.ll"
{ return BOUNDARY_MARKER; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 171 "pmatch_lex.ll"
{ return SHUFFLE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 172 "pmatch_lex.ll"
{ return BEFORE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 173 "pmatch_lex.ll"
{ return AFTER; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 175 "pmatch_lex.ll"
{ return COMPOSITION; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 176 "pmatch_lex.ll"
{ return LENIENT_COMPOSITION; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 177 "pmatch_lex.ll"
{ return MERGE_RIGHT_ARROW; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 178 "pmatch_lex.ll"
{ return MERGE_LEFT_ARROW; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 179 "pmatch_lex.ll"
{ return CROSS_PRODUCT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 180 "pmatch_lex.ll"
{ return UPPER_PRIORITY_UNION; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 181 "pmatch_lex.ll"
{ return LOWER_PRIORITY_UNION; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 182 "pmatch_lex.ll"
{ return UPPER_MINUS; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 183 "pmatch_lex.ll"
{ return LOWER_MINUS; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 184 "pmatch_lex.ll"
{ return SUBSTITUTE_LEFT; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 186 "pmatch_lex.ll"
{ return LEFT_RESTRICTION; } /* Not implemented */
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 187 "pmatch_lex.ll"
{ return LEFT_RIGHT_ARROW; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 188 "pmatch_lex.ll"
{ return LEFT_ARROW; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 189 "pmatch_lex.ll"
{ return RIGHT_ARROW; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 191 "pmatch_lex.ll"
{ return REPLACE_RIGHT; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 192 "pmatch_lex.ll"
{ return OPTIONAL_REPLACE_RIGHT; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 193 "pmatch_lex.ll"
{ return REPLACE_LEFT; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 194 "pmatch_lex.ll"
{ return OPTIONAL_REPLACE_LEFT; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 195 "pmatch_lex.ll"
{ return REPLACE_LEFT_RIGHT; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 196 "pmatch_lex.ll"
{ return OPTIONAL_REPLACE_LEFT_RIGHT; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 197 "pmatch_lex.ll"
{ return LTR_LONGEST_MATCH; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 198 "pmatch_lex.ll"
{ return LTR_SHORTEST_MATCH; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 199 "pmatch_lex.ll"
{ return RTL_LONGEST_MATCH; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 200 "pmatch_lex.ll"
{ return RTL_SHORTEST_MATCH; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 202 "pmatch_lex.ll"
{ return REPLACE_CONTEXT_UU; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 203 "pmatch_lex.ll"
{ return REPLACE_CONTEXT_LU; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 204 "pmatch_lex.ll"
{ return REPLACE_CONTEXT_UL; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 205 "pmatch_lex.ll"
{ return REPLACE_CONTEXT_LL; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 206 "pmatch_lex.ll"
{ return CENTER_MARKER; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 207 "pmatch_lex.ll"
{ return MARKUP_MARKER; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 209 "pmatch_lex.ll"
{ return LEFT_QUOTIENT; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 211 "pmatch_lex.ll"
{
    pmatchlval.values = hfst::pmatch::get_n_to_k(pmatchtext);
    return CATENATE_N_TO_K;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 216 "pmatch_lex.ll"
{
    pmatchlval.values = hfst::pmatch::get_n_to_k(pmatchtext);
    return CATENATE_N_TO_K;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 221 "pmatch_lex.ll"
{
    pmatchlval.value = strtol(pmatchtext + 2, 0, 10);
    return CATENATE_N_PLUS;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 226 "pmatch_lex.ll"
{
    pmatchlval.value = strtol(pmatchtext + 2, 0, 10);
    return CATENATE_N_MINUS;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 231 "pmatch_lex.ll"
{
    pmatchlval.value = strtol(pmatchtext + 1, 0, 10);
    return CATENATE_N;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 236 "pmatch_lex.ll"
{ return REVERSE; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 237 "pmatch_lex.ll"
{ return INVERT; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 238 "pmatch_lex.ll"
{ return UPPER_PROJECT; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 239 "pmatch_lex.ll"
{ return LOWER_PROJECT; }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 241 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_BIN;
}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 246 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_TEXT;
}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 251 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_SPACED;
}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 256 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_PROLOG;
}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 261 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_LEXC;
}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 266 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_RE;
}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 271 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_VEC;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 276 "pmatch_lex.ll"
{
    pmatchlval.pmatchObject = hfst::pmatch::parse_range(pmatchtext);
    return CHARACTER_RANGE;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 281 "pmatch_lex.ll"
{
    char * label = (char *) malloc(strlen(pmatchtext));
    strncpy(label, pmatchtext, strlen(pmatchtext));
    label[strlen(pmatchtext) - 1] = '\0';
    pmatchlval.label = hfst::pmatch::strip_percents(label);
    free(label);
    return SYMBOL_WITH_LEFT_PAREN;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 290 "pmatch_lex.ll"
{ return LEFT_BRACKET_DOTTED; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 291 "pmatch_lex.ll"
{ return RIGHT_BRACKET_DOTTED; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 292 "pmatch_lex.ll"
{ return LEFT_BRACKET; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 293 "pmatch_lex.ll"
{ return RIGHT_BRACKET; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 294 "pmatch_lex.ll"
{ return LEFT_PARENTHESIS; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 295 "pmatch_lex.ll"
{ return RIGHT_PARENTHESIS; }
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 297 "pmatch_lex.ll"
{ return PAIR_SEPARATOR_SOLE; }
	YY_BREAK
case 125:
*yy_cp = (yy_hold_char); /* undo effects of setting up pmatchtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pmatchtext again */
YY_RULE_SETUP
#line 298 "pmatch_lex.ll"
{ return PAIR_SEPARATOR_SOLE; }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 299 "pmatch_lex.ll"
{ return PAIR_SEPARATOR_WO_LEFT; }
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 300 "pmatch_lex.ll"
{ return PAIR_SEPARATOR_WO_RIGHT; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 301 "pmatch_lex.ll"
{ return PAIR_SEPARATOR; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 303 "pmatch_lex.ll"
{
    pmatchlval.weight = hfst::pmatch::get_weight(pmatchtext + 2);
    return WEIGHT;
}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 308 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '{', '}');
    return CURLY_LITERAL;
}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 313 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::parse_quoted(pmatchtext);
    return QUOTED_LITERAL;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 318 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::strip_percents(pmatchtext);
    return SYMBOL;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 323 "pmatch_lex.ll"
{ return COMMACOMMA; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 324 "pmatch_lex.ll"
{ return COMMA; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 326 "pmatch_lex.ll"
{
    pmatchlval.weight = hfst::pmatch::get_weight(pmatchtext + 2);
    return END_OF_WEIGHTED_EXPRESSION;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 331 "pmatch_lex.ll"
{
    pmatchlval.weight = 0.0;
    return END_OF_WEIGHTED_EXPRESSION;
}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 336 "pmatch_lex.ll"
{ /* ignorable whitespace */ }
	YY_BREAK
case 138:
*yy_cp = (yy_hold_char); /* undo effects of setting up pmatchtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pmatchtext again */
YY_RULE_SETUP
#line 338 "pmatch_lex.ll"
{ /* ignore comments */ }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 340 "pmatch_lex.ll"
{
    return LEXER_ERROR;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 344 "pmatch_lex.ll"
ECHO;
	YY_BREAK
#line 2944 "pmatch_lex.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed pmatchin at a new source and called
			 * pmatchlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = pmatchin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( pmatchwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * pmatchtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of pmatchlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					pmatchrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pmatchrestart(pmatchin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pmatchrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 987 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 987 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 986);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pmatchrestart(pmatchin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( pmatchwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve pmatchtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    pmatchlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pmatchrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        pmatchensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            pmatch_create_buffer(pmatchin,YY_BUF_SIZE );
	}

	pmatch_init_buffer(YY_CURRENT_BUFFER,input_file );
	pmatch_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void pmatch_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pmatchpop_buffer_state();
	 *		pmatchpush_buffer_state(new_buffer);
     */
	pmatchensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pmatch_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (pmatchwrap()) processing, but the only time this flag
	 * is looked at is after pmatchwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void pmatch_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	pmatchin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pmatch_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) pmatchalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pmatch_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) pmatchalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pmatch_create_buffer()" );

	b->yy_is_our_buffer = 1;

	pmatch_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pmatch_create_buffer()
 * 
 */
    void pmatch_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		pmatchfree((void *) b->yy_ch_buf  );

	pmatchfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pmatchrestart() or at EOF.
 */
    static void pmatch_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	pmatch_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pmatch_init_buffer was _probably_
     * called from pmatchrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void pmatch_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pmatch_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void pmatchpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	pmatchensure_buffer_stack();

	/* This block is copied from pmatch_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pmatch_switch_to_buffer. */
	pmatch_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void pmatchpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	pmatch_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		pmatch_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pmatchensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)pmatchalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pmatchensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)pmatchrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pmatchensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE pmatch_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) pmatchalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pmatch_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pmatch_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pmatchlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pmatch_scan_bytes() instead.
 */
YY_BUFFER_STATE pmatch_scan_string (yyconst char * yystr )
{
    
	return pmatch_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to pmatchlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pmatch_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) pmatchalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pmatch_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pmatch_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pmatch_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pmatchtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		pmatchtext[pmatchleng] = (yy_hold_char); \
		(yy_c_buf_p) = pmatchtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		pmatchleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int pmatchget_lineno  (void)
{
        
    return pmatchlineno;
}

/** Get the input stream.
 * 
 */
FILE *pmatchget_in  (void)
{
        return pmatchin;
}

/** Get the output stream.
 * 
 */
FILE *pmatchget_out  (void)
{
        return pmatchout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t pmatchget_leng  (void)
{
        return pmatchleng;
}

/** Get the current token.
 * 
 */

char *pmatchget_text  (void)
{
        return pmatchtext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void pmatchset_lineno (int  _line_number )
{
    
    pmatchlineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see pmatch_switch_to_buffer
 */
void pmatchset_in (FILE *  _in_str )
{
        pmatchin = _in_str ;
}

void pmatchset_out (FILE *  _out_str )
{
        pmatchout = _out_str ;
}

int pmatchget_debug  (void)
{
        return pmatch_flex_debug;
}

void pmatchset_debug (int  _bdebug )
{
        pmatch_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pmatchlex_destroy(), so don't allocate here.
     */

    /* We do not touch pmatchlineno unless the option is enabled. */
    pmatchlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    pmatchin = stdin;
    pmatchout = stdout;
#else
    pmatchin = (FILE *) 0;
    pmatchout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pmatchlex_init()
     */
    return 0;
}

/* pmatchlex_destroy is for both reentrant and non-reentrant scanners. */
int pmatchlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pmatch_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pmatchpop_buffer_state();
	}

	/* Destroy the stack itself. */
	pmatchfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pmatchlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *pmatchalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *pmatchrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void pmatchfree (void * ptr )
{
			free( (char *) ptr );	/* see pmatchrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 344 "pmatch_lex.ll"



