#!/usr/bin/env python
# Copyright 2017 Descartes Labs.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function
import argparse
import json
import descarteslabs as dl

def scales(s):
    try:
        if s.count(",") == 1:
            mi, ma = map(float, s.split(","))
            return [mi, ma]
        elif s.count(",") == 3:
            smi, sma, dmi, dma = map(float, s.split(","))
            return [smi, sma, dmi, dma]
        else:
            raise
    except:
        raise argparse.ArgumentTypeError(
            "Scales must be mi,ma or smi,sma,dmi,dma"
        )

if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("inputs", type=str, nargs="+")
    parser.add_argument("-bands", nargs="+", default=None, type=str)
    parser.add_argument("-scales", default=None, type=scales, nargs="+")
    parser.add_argument("-resolution", default=240, type=float)
    parser.add_argument("-output_format", default='GTiff', type=str)
    parser.add_argument("-data_type", default='UInt16', type=str)
    parser.add_argument("-srs", default=None, type=str)
    parser.add_argument("-place", default=None, type=str)
    args = parser.parse_args()

    params = {
        'inputs': args.inputs,
        'bands': args.bands,
        'scales': args.scales,
        'resolution': args.resolution,
        'data_type': args.data_type,
        'output_format': args.output_format,
        'srs': args.srs,
        'place': args.place,
    }
    response = dl.raster.raster(**params)
    for filename, data in response['files'].iteritems():
        with open(filename, "w") as f:
            f.write(data)
    print(json.dumps(response['metadata'], indent=2))
