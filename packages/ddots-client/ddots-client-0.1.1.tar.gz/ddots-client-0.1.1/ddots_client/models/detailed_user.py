# coding: utf-8

"""
    DDOTS RESTful API Server

    ## Explore the demo server  I suggest you start with signing up a new user. To do so, use `POST /users/` endpoint with `recaptcha_key=\"secret_key\"`.  You will need to know the API Client ID to authenticate, so here it is: `documentation`. Sometimes (e.g. for token refreshing) you might need API Client Secret: `KQ()SWK)SQK)QWSKQW(SKQ)S(QWSQW(SJ*HQ&HQW*SQ*^SSQWSGQSG`.  There are also two built-in users: * `root` (administrator with all permissions) with password `q` * `user` (regular user) with password `w` 

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DetailedUser(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, email=None, first_name=None, id=None, is_active=None, is_admin=None, is_regular_user=None, last_name=None, middle_name=None, updated=None, username=None):
        """
        DetailedUser - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'email': 'str',
            'first_name': 'str',
            'id': 'int',
            'is_active': 'str',
            'is_admin': 'str',
            'is_regular_user': 'str',
            'last_name': 'str',
            'middle_name': 'str',
            'updated': 'datetime',
            'username': 'str'
        }

        self.attribute_map = {
            'created': 'created',
            'email': 'email',
            'first_name': 'first_name',
            'id': 'id',
            'is_active': 'is_active',
            'is_admin': 'is_admin',
            'is_regular_user': 'is_regular_user',
            'last_name': 'last_name',
            'middle_name': 'middle_name',
            'updated': 'updated',
            'username': 'username'
        }

        self._created = created
        self._email = email
        self._first_name = first_name
        self._id = id
        self._is_active = is_active
        self._is_admin = is_admin
        self._is_regular_user = is_regular_user
        self._last_name = last_name
        self._middle_name = middle_name
        self._updated = updated
        self._username = username

    @property
    def created(self):
        """
        Gets the created of this DetailedUser.

        :return: The created of this DetailedUser.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this DetailedUser.

        :param created: The created of this DetailedUser.
        :type: datetime
        """

        self._created = created

    @property
    def email(self):
        """
        Gets the email of this DetailedUser.

        :return: The email of this DetailedUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this DetailedUser.

        :param email: The email of this DetailedUser.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and len(email) > 120:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `120`")

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this DetailedUser.

        :return: The first_name of this DetailedUser.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this DetailedUser.

        :param first_name: The first_name of this DetailedUser.
        :type: str
        """
        if first_name is not None and len(first_name) > 30:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `30`")

        self._first_name = first_name

    @property
    def id(self):
        """
        Gets the id of this DetailedUser.

        :return: The id of this DetailedUser.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DetailedUser.

        :param id: The id of this DetailedUser.
        :type: int
        """

        self._id = id

    @property
    def is_active(self):
        """
        Gets the is_active of this DetailedUser.

        :return: The is_active of this DetailedUser.
        :rtype: str
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """
        Sets the is_active of this DetailedUser.

        :param is_active: The is_active of this DetailedUser.
        :type: str
        """

        self._is_active = is_active

    @property
    def is_admin(self):
        """
        Gets the is_admin of this DetailedUser.

        :return: The is_admin of this DetailedUser.
        :rtype: str
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """
        Sets the is_admin of this DetailedUser.

        :param is_admin: The is_admin of this DetailedUser.
        :type: str
        """

        self._is_admin = is_admin

    @property
    def is_regular_user(self):
        """
        Gets the is_regular_user of this DetailedUser.

        :return: The is_regular_user of this DetailedUser.
        :rtype: str
        """
        return self._is_regular_user

    @is_regular_user.setter
    def is_regular_user(self, is_regular_user):
        """
        Sets the is_regular_user of this DetailedUser.

        :param is_regular_user: The is_regular_user of this DetailedUser.
        :type: str
        """

        self._is_regular_user = is_regular_user

    @property
    def last_name(self):
        """
        Gets the last_name of this DetailedUser.

        :return: The last_name of this DetailedUser.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this DetailedUser.

        :param last_name: The last_name of this DetailedUser.
        :type: str
        """
        if last_name is not None and len(last_name) > 30:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `30`")

        self._last_name = last_name

    @property
    def middle_name(self):
        """
        Gets the middle_name of this DetailedUser.

        :return: The middle_name of this DetailedUser.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """
        Sets the middle_name of this DetailedUser.

        :param middle_name: The middle_name of this DetailedUser.
        :type: str
        """
        if middle_name is not None and len(middle_name) > 30:
            raise ValueError("Invalid value for `middle_name`, length must be less than or equal to `30`")

        self._middle_name = middle_name

    @property
    def updated(self):
        """
        Gets the updated of this DetailedUser.

        :return: The updated of this DetailedUser.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this DetailedUser.

        :param updated: The updated of this DetailedUser.
        :type: datetime
        """

        self._updated = updated

    @property
    def username(self):
        """
        Gets the username of this DetailedUser.

        :return: The username of this DetailedUser.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this DetailedUser.

        :param username: The username of this DetailedUser.
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and len(username) > 80:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `80`")

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DetailedUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
