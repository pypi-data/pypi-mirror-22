# coding: utf-8

"""
    DDOTS RESTful API Server

    ## Explore the demo server  I suggest you start with signing up a new user. To do so, use `POST /users/` endpoint with `recaptcha_key=\"secret_key\"`.  You will need to know the API Client ID to authenticate, so here it is: `documentation`. Sometimes (e.g. for token refreshing) you might need API Client Secret: `KQ()SWK)SQK)QWSKQW(SKQ)S(QWSQW(SJ*HQ&HQW*SQ*^SSQWSGQSG`.  There are also two built-in users: * `root` (administrator with all permissions) with password `q` * `user` (regular user) with password `w` 

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DetailedOAuth2Client(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, client_id=None, client_secret=None, client_type=None, default_scopes=None, redirect_uris=None, user_id=None):
        """
        DetailedOAuth2Client - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'client_id': 'str',
            'client_secret': 'str',
            'client_type': 'str',
            'default_scopes': 'list[str]',
            'redirect_uris': 'list[str]',
            'user_id': 'str'
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'client_secret': 'client_secret',
            'client_type': 'client_type',
            'default_scopes': 'default_scopes',
            'redirect_uris': 'redirect_uris',
            'user_id': 'user_id'
        }

        self._client_id = client_id
        self._client_secret = client_secret
        self._client_type = client_type
        self._default_scopes = default_scopes
        self._redirect_uris = redirect_uris
        self._user_id = user_id

    @property
    def client_id(self):
        """
        Gets the client_id of this DetailedOAuth2Client.

        :return: The client_id of this DetailedOAuth2Client.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this DetailedOAuth2Client.

        :param client_id: The client_id of this DetailedOAuth2Client.
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")
        if client_id is not None and len(client_id) > 40:
            raise ValueError("Invalid value for `client_id`, length must be less than or equal to `40`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """
        Gets the client_secret of this DetailedOAuth2Client.

        :return: The client_secret of this DetailedOAuth2Client.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """
        Sets the client_secret of this DetailedOAuth2Client.

        :param client_secret: The client_secret of this DetailedOAuth2Client.
        :type: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")
        if client_secret is not None and len(client_secret) > 55:
            raise ValueError("Invalid value for `client_secret`, length must be less than or equal to `55`")

        self._client_secret = client_secret

    @property
    def client_type(self):
        """
        Gets the client_type of this DetailedOAuth2Client.

        :return: The client_type of this DetailedOAuth2Client.
        :rtype: str
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """
        Sets the client_type of this DetailedOAuth2Client.

        :param client_type: The client_type of this DetailedOAuth2Client.
        :type: str
        """
        allowed_values = ["public", "confidential"]
        if client_type not in allowed_values:
            raise ValueError(
                "Invalid value for `client_type` ({0}), must be one of {1}"
                .format(client_type, allowed_values)
            )

        self._client_type = client_type

    @property
    def default_scopes(self):
        """
        Gets the default_scopes of this DetailedOAuth2Client.

        :return: The default_scopes of this DetailedOAuth2Client.
        :rtype: list[str]
        """
        return self._default_scopes

    @default_scopes.setter
    def default_scopes(self, default_scopes):
        """
        Sets the default_scopes of this DetailedOAuth2Client.

        :param default_scopes: The default_scopes of this DetailedOAuth2Client.
        :type: list[str]
        """
        if default_scopes is None:
            raise ValueError("Invalid value for `default_scopes`, must not be `None`")

        self._default_scopes = default_scopes

    @property
    def redirect_uris(self):
        """
        Gets the redirect_uris of this DetailedOAuth2Client.

        :return: The redirect_uris of this DetailedOAuth2Client.
        :rtype: list[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """
        Sets the redirect_uris of this DetailedOAuth2Client.

        :param redirect_uris: The redirect_uris of this DetailedOAuth2Client.
        :type: list[str]
        """
        if redirect_uris is None:
            raise ValueError("Invalid value for `redirect_uris`, must not be `None`")

        self._redirect_uris = redirect_uris

    @property
    def user_id(self):
        """
        Gets the user_id of this DetailedOAuth2Client.

        :return: The user_id of this DetailedOAuth2Client.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this DetailedOAuth2Client.

        :param user_id: The user_id of this DetailedOAuth2Client.
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DetailedOAuth2Client):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
