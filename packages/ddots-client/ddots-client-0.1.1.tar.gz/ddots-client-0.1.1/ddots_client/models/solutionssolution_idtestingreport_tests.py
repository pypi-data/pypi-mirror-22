# coding: utf-8

"""
    DDOTS RESTful API Server

    ## Explore the demo server  I suggest you start with signing up a new user. To do so, use `POST /users/` endpoint with `recaptcha_key=\"secret_key\"`.  You will need to know the API Client ID to authenticate, so here it is: `documentation`. Sometimes (e.g. for token refreshing) you might need API Client Secret: `KQ()SWK)SQK)QWSKQW(SKQ)S(QWSQW(SJ*HQ&HQW*SQ*^SSQWSGQSG`.  There are also two built-in users: * `root` (administrator with all permissions) with password `q` * `user` (regular user) with password `w` 

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SolutionssolutionIdtestingreportTests(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, execution_time=None, extra=None, memory_peak=None, status=None):
        """
        SolutionssolutionIdtestingreportTests - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'execution_time': 'float',
            'extra': 'object',
            'memory_peak': 'float',
            'status': 'str'
        }

        self.attribute_map = {
            'execution_time': 'execution_time',
            'extra': 'extra',
            'memory_peak': 'memory_peak',
            'status': 'status'
        }

        self._execution_time = execution_time
        self._extra = extra
        self._memory_peak = memory_peak
        self._status = status

    @property
    def execution_time(self):
        """
        Gets the execution_time of this SolutionssolutionIdtestingreportTests.

        :return: The execution_time of this SolutionssolutionIdtestingreportTests.
        :rtype: float
        """
        return self._execution_time

    @execution_time.setter
    def execution_time(self, execution_time):
        """
        Sets the execution_time of this SolutionssolutionIdtestingreportTests.

        :param execution_time: The execution_time of this SolutionssolutionIdtestingreportTests.
        :type: float
        """
        if execution_time is None:
            raise ValueError("Invalid value for `execution_time`, must not be `None`")

        self._execution_time = execution_time

    @property
    def extra(self):
        """
        Gets the extra of this SolutionssolutionIdtestingreportTests.

        :return: The extra of this SolutionssolutionIdtestingreportTests.
        :rtype: object
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """
        Sets the extra of this SolutionssolutionIdtestingreportTests.

        :param extra: The extra of this SolutionssolutionIdtestingreportTests.
        :type: object
        """

        self._extra = extra

    @property
    def memory_peak(self):
        """
        Gets the memory_peak of this SolutionssolutionIdtestingreportTests.

        :return: The memory_peak of this SolutionssolutionIdtestingreportTests.
        :rtype: float
        """
        return self._memory_peak

    @memory_peak.setter
    def memory_peak(self, memory_peak):
        """
        Sets the memory_peak of this SolutionssolutionIdtestingreportTests.

        :param memory_peak: The memory_peak of this SolutionssolutionIdtestingreportTests.
        :type: float
        """
        if memory_peak is None:
            raise ValueError("Invalid value for `memory_peak`, must not be `None`")

        self._memory_peak = memory_peak

    @property
    def status(self):
        """
        Gets the status of this SolutionssolutionIdtestingreportTests.

        :return: The status of this SolutionssolutionIdtestingreportTests.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this SolutionssolutionIdtestingreportTests.

        :param status: The status of this SolutionssolutionIdtestingreportTests.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SolutionssolutionIdtestingreportTests):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
