# coding: utf-8

"""
    DDOTS RESTful API Server

    ## Explore the demo server  I suggest you start with signing up a new user. To do so, use `POST /users/` endpoint with `recaptcha_key=\"secret_key\"`.  You will need to know the API Client ID to authenticate, so here it is: `documentation`. Sometimes (e.g. for token refreshing) you might need API Client Secret: `KQ()SWK)SQK)QWSKQW(SKQ)S(QWSQW(SJ*HQ&HQW*SQ*^SSQWSGQSG`.  There are also two built-in users: * `root` (administrator with all permissions) with password `q` * `user` (regular user) with password `w` 

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DetailedTeam(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, id=None, members=None, title=None, updated=None):
        """
        DetailedTeam - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'id': 'int',
            'members': 'list[DetailedTeamMembers]',
            'title': 'str',
            'updated': 'datetime'
        }

        self.attribute_map = {
            'created': 'created',
            'id': 'id',
            'members': 'members',
            'title': 'title',
            'updated': 'updated'
        }

        self._created = created
        self._id = id
        self._members = members
        self._title = title
        self._updated = updated

    @property
    def created(self):
        """
        Gets the created of this DetailedTeam.

        :return: The created of this DetailedTeam.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this DetailedTeam.

        :param created: The created of this DetailedTeam.
        :type: datetime
        """

        self._created = created

    @property
    def id(self):
        """
        Gets the id of this DetailedTeam.

        :return: The id of this DetailedTeam.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DetailedTeam.

        :param id: The id of this DetailedTeam.
        :type: int
        """

        self._id = id

    @property
    def members(self):
        """
        Gets the members of this DetailedTeam.

        :return: The members of this DetailedTeam.
        :rtype: list[DetailedTeamMembers]
        """
        return self._members

    @members.setter
    def members(self, members):
        """
        Sets the members of this DetailedTeam.

        :param members: The members of this DetailedTeam.
        :type: list[DetailedTeamMembers]
        """

        self._members = members

    @property
    def title(self):
        """
        Gets the title of this DetailedTeam.

        :return: The title of this DetailedTeam.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this DetailedTeam.

        :param title: The title of this DetailedTeam.
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) > 50:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `50`")

        self._title = title

    @property
    def updated(self):
        """
        Gets the updated of this DetailedTeam.

        :return: The updated of this DetailedTeam.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this DetailedTeam.

        :param updated: The updated of this DetailedTeam.
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DetailedTeam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
