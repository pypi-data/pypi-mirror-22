# coding: utf-8

"""
    DDOTS RESTful API Server

    ## Explore the demo server  I suggest you start with signing up a new user. To do so, use `POST /users/` endpoint with `recaptcha_key=\"secret_key\"`.  You will need to know the API Client ID to authenticate, so here it is: `documentation`. Sometimes (e.g. for token refreshing) you might need API Client Secret: `KQ()SWK)SQK)QWSKQW(SKQ)S(QWSQW(SJ*HQ&HQW*SQ*^SSQWSGQSG`.  There are also two built-in users: * `root` (administrator with all permissions) with password `q` * `user` (regular user) with password `w` 

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BaseSolution(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, author=None, created=None, id=None, problem=None, programming_language=None, scored_points=None, state=None, status=None):
        """
        BaseSolution - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'author': 'BaseSolutionAuthor',
            'created': 'datetime',
            'id': 'int',
            'problem': 'BaseSolutionProblem',
            'programming_language': 'BaseSolutionProgrammingLanguage',
            'scored_points': 'float',
            'state': 'str',
            'status': 'list[str]'
        }

        self.attribute_map = {
            'author': 'author',
            'created': 'created',
            'id': 'id',
            'problem': 'problem',
            'programming_language': 'programming_language',
            'scored_points': 'scored_points',
            'state': 'state',
            'status': 'status'
        }

        self._author = author
        self._created = created
        self._id = id
        self._problem = problem
        self._programming_language = programming_language
        self._scored_points = scored_points
        self._state = state
        self._status = status

    @property
    def author(self):
        """
        Gets the author of this BaseSolution.

        :return: The author of this BaseSolution.
        :rtype: BaseSolutionAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """
        Sets the author of this BaseSolution.

        :param author: The author of this BaseSolution.
        :type: BaseSolutionAuthor
        """

        self._author = author

    @property
    def created(self):
        """
        Gets the created of this BaseSolution.

        :return: The created of this BaseSolution.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this BaseSolution.

        :param created: The created of this BaseSolution.
        :type: datetime
        """

        self._created = created

    @property
    def id(self):
        """
        Gets the id of this BaseSolution.

        :return: The id of this BaseSolution.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BaseSolution.

        :param id: The id of this BaseSolution.
        :type: int
        """

        self._id = id

    @property
    def problem(self):
        """
        Gets the problem of this BaseSolution.

        :return: The problem of this BaseSolution.
        :rtype: BaseSolutionProblem
        """
        return self._problem

    @problem.setter
    def problem(self, problem):
        """
        Sets the problem of this BaseSolution.

        :param problem: The problem of this BaseSolution.
        :type: BaseSolutionProblem
        """

        self._problem = problem

    @property
    def programming_language(self):
        """
        Gets the programming_language of this BaseSolution.

        :return: The programming_language of this BaseSolution.
        :rtype: BaseSolutionProgrammingLanguage
        """
        return self._programming_language

    @programming_language.setter
    def programming_language(self, programming_language):
        """
        Sets the programming_language of this BaseSolution.

        :param programming_language: The programming_language of this BaseSolution.
        :type: BaseSolutionProgrammingLanguage
        """

        self._programming_language = programming_language

    @property
    def scored_points(self):
        """
        Gets the scored_points of this BaseSolution.

        :return: The scored_points of this BaseSolution.
        :rtype: float
        """
        return self._scored_points

    @scored_points.setter
    def scored_points(self, scored_points):
        """
        Sets the scored_points of this BaseSolution.

        :param scored_points: The scored_points of this BaseSolution.
        :type: float
        """

        self._scored_points = scored_points

    @property
    def state(self):
        """
        Gets the state of this BaseSolution.

        :return: The state of this BaseSolution.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this BaseSolution.

        :param state: The state of this BaseSolution.
        :type: str
        """
        allowed_values = ["new", "reserved", "received", "tested", "rejected"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """
        Gets the status of this BaseSolution.

        :return: The status of this BaseSolution.
        :rtype: list[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this BaseSolution.

        :param status: The status of this BaseSolution.
        :type: list[str]
        """

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BaseSolution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
