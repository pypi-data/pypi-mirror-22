# coding: utf-8

"""
    DDOTS RESTful API Server

    ## Explore the demo server  I suggest you start with signing up a new user. To do so, use `POST /users/` endpoint with `recaptcha_key=\"secret_key\"`.  You will need to know the API Client ID to authenticate, so here it is: `documentation`. Sometimes (e.g. for token refreshing) you might need API Client Secret: `KQ()SWK)SQK)QWSKQW(SKQ)S(QWSQW(SJ*HQ&HQW*SQ*^SSQWSGQSG`.  There are also two built-in users: * `root` (administrator with all permissions) with password `q` * `user` (regular user) with password `w` 

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class SolutionsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_solution_by_id(self, solution_id, **kwargs):
        """
        Delete a solution by ID
        **PERMISSIONS: Owner/Supervisor/Admin may execute this action.**
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_solution_by_id(solution_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int solution_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_solution_by_id_with_http_info(solution_id, **kwargs)
        else:
            (data) = self.delete_solution_by_id_with_http_info(solution_id, **kwargs)
            return data

    def delete_solution_by_id_with_http_info(self, solution_id, **kwargs):
        """
        Delete a solution by ID
        **PERMISSIONS: Owner/Supervisor/Admin may execute this action.**
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_solution_by_id_with_http_info(solution_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int solution_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['solution_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_solution_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params) or (params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `delete_solution_by_id`")


        collection_formats = {}

        path_params = {}
        if 'solution_id' in params:
            path_params['solution_id'] = params['solution_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2_password']

        return self.api_client.call_api('/solutions/{solution_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_solution_by_id(self, solution_id, **kwargs):
        """
        Get solution details by ID
        **PERMISSIONS: Owner/Supervisor/Admin may execute this action.**
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_solution_by_id(solution_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int solution_id: (required)
        :return: DetailedSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_solution_by_id_with_http_info(solution_id, **kwargs)
        else:
            (data) = self.get_solution_by_id_with_http_info(solution_id, **kwargs)
            return data

    def get_solution_by_id_with_http_info(self, solution_id, **kwargs):
        """
        Get solution details by ID
        **PERMISSIONS: Owner/Supervisor/Admin may execute this action.**
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_solution_by_id_with_http_info(solution_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int solution_id: (required)
        :return: DetailedSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['solution_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_solution_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params) or (params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `get_solution_by_id`")


        collection_formats = {}

        path_params = {}
        if 'solution_id' in params:
            path_params['solution_id'] = params['solution_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2_password']

        return self.api_client.call_api('/solutions/{solution_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DetailedSolution',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_solution_source_code_by_id(self, solution_id, **kwargs):
        """
        Get solution source code by ID
        **PERMISSIONS: Owner/Supervisor/Admin may execute this action.**
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_solution_source_code_by_id(solution_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int solution_id: (required)
        :return: SolutionSourceCodeSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_solution_source_code_by_id_with_http_info(solution_id, **kwargs)
        else:
            (data) = self.get_solution_source_code_by_id_with_http_info(solution_id, **kwargs)
            return data

    def get_solution_source_code_by_id_with_http_info(self, solution_id, **kwargs):
        """
        Get solution source code by ID
        **PERMISSIONS: Owner/Supervisor/Admin may execute this action.**
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_solution_source_code_by_id_with_http_info(solution_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int solution_id: (required)
        :return: SolutionSourceCodeSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['solution_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_solution_source_code_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params) or (params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `get_solution_source_code_by_id`")


        collection_formats = {}

        path_params = {}
        if 'solution_id' in params:
            path_params['solution_id'] = params['solution_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2_password']

        return self.api_client.call_api('/solutions/{solution_id}/source-code', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SolutionSourceCodeSchema',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_solutions(self, **kwargs):
        """
        List of solutions
        **PERMISSIONS: At least Active user is required.**   Returns a list of solutions starting from ``offset`` limited by ``limit`` parameter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_solutions(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: limit a number of items (allowed range is 1-100), default is 20.
        :param int offset: a number of items to skip, default is 0.
        :return: list[BaseSolution]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_solutions_with_http_info(**kwargs)
        else:
            (data) = self.get_solutions_with_http_info(**kwargs)
            return data

    def get_solutions_with_http_info(self, **kwargs):
        """
        List of solutions
        **PERMISSIONS: At least Active user is required.**   Returns a list of solutions starting from ``offset`` limited by ``limit`` parameter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_solutions_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: limit a number of items (allowed range is 1-100), default is 20.
        :param int offset: a number of items to skip, default is 0.
        :return: list[BaseSolution]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_solutions" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] > 100:
            raise ValueError("Invalid value for parameter `limit` when calling `get_solutions`, must be a value less than or equal to `100`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `get_solutions`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `get_solutions`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2_password']

        return self.api_client.call_api('/solutions/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[BaseSolution]',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def options_solution_by_id(self, solution_id, **kwargs):
        """
        Check which methods are allowed
        **PERMISSIONS: At least Active user is required.**   Use this method if you need to know what operations are allowed to be performed on this endpoint, e.g. to decide wether to display a button in your UI.  The list of allowed methods is provided in `Allow` response header.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.options_solution_by_id(solution_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int solution_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.options_solution_by_id_with_http_info(solution_id, **kwargs)
        else:
            (data) = self.options_solution_by_id_with_http_info(solution_id, **kwargs)
            return data

    def options_solution_by_id_with_http_info(self, solution_id, **kwargs):
        """
        Check which methods are allowed
        **PERMISSIONS: At least Active user is required.**   Use this method if you need to know what operations are allowed to be performed on this endpoint, e.g. to decide wether to display a button in your UI.  The list of allowed methods is provided in `Allow` response header.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.options_solution_by_id_with_http_info(solution_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int solution_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['solution_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method options_solution_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params) or (params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `options_solution_by_id`")


        collection_formats = {}

        path_params = {}
        if 'solution_id' in params:
            path_params['solution_id'] = params['solution_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2_password']

        return self.api_client.call_api('/solutions/{solution_id}', 'OPTIONS',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def options_solution_for_testing(self, **kwargs):
        """
        Check which methods are allowed
        **PERMISSIONS: At least Active user is required.**   Use this method if you need to know what operations are allowed to be performed on this endpoint, e.g. to decide wether to display a button in your UI.  The list of allowed methods is provided in `Allow` response header.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.options_solution_for_testing(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.options_solution_for_testing_with_http_info(**kwargs)
        else:
            (data) = self.options_solution_for_testing_with_http_info(**kwargs)
            return data

    def options_solution_for_testing_with_http_info(self, **kwargs):
        """
        Check which methods are allowed
        **PERMISSIONS: At least Active user is required.**   Use this method if you need to know what operations are allowed to be performed on this endpoint, e.g. to decide wether to display a button in your UI.  The list of allowed methods is provided in `Allow` response header.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.options_solution_for_testing_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method options_solution_for_testing" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2_password']

        return self.api_client.call_api('/solutions/latest-new', 'OPTIONS',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def options_solution_source_code_by_id(self, solution_id, **kwargs):
        """
        Check which methods are allowed
        **PERMISSIONS: At least Active user is required.**   Use this method if you need to know what operations are allowed to be performed on this endpoint, e.g. to decide wether to display a button in your UI.  The list of allowed methods is provided in `Allow` response header.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.options_solution_source_code_by_id(solution_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int solution_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.options_solution_source_code_by_id_with_http_info(solution_id, **kwargs)
        else:
            (data) = self.options_solution_source_code_by_id_with_http_info(solution_id, **kwargs)
            return data

    def options_solution_source_code_by_id_with_http_info(self, solution_id, **kwargs):
        """
        Check which methods are allowed
        **PERMISSIONS: At least Active user is required.**   Use this method if you need to know what operations are allowed to be performed on this endpoint, e.g. to decide wether to display a button in your UI.  The list of allowed methods is provided in `Allow` response header.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.options_solution_source_code_by_id_with_http_info(solution_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int solution_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['solution_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method options_solution_source_code_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params) or (params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `options_solution_source_code_by_id`")


        collection_formats = {}

        path_params = {}
        if 'solution_id' in params:
            path_params['solution_id'] = params['solution_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2_password']

        return self.api_client.call_api('/solutions/{solution_id}/source-code', 'OPTIONS',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def options_solution_testing_report_by_id(self, solution_id, **kwargs):
        """
        Check which methods are allowed
        **PERMISSIONS: At least Active user is required.**   Use this method if you need to know what operations are allowed to be performed on this endpoint, e.g. to decide wether to display a button in your UI.  The list of allowed methods is provided in `Allow` response header.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.options_solution_testing_report_by_id(solution_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int solution_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.options_solution_testing_report_by_id_with_http_info(solution_id, **kwargs)
        else:
            (data) = self.options_solution_testing_report_by_id_with_http_info(solution_id, **kwargs)
            return data

    def options_solution_testing_report_by_id_with_http_info(self, solution_id, **kwargs):
        """
        Check which methods are allowed
        **PERMISSIONS: At least Active user is required.**   Use this method if you need to know what operations are allowed to be performed on this endpoint, e.g. to decide wether to display a button in your UI.  The list of allowed methods is provided in `Allow` response header.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.options_solution_testing_report_by_id_with_http_info(solution_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int solution_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['solution_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method options_solution_testing_report_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params) or (params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `options_solution_testing_report_by_id`")


        collection_formats = {}

        path_params = {}
        if 'solution_id' in params:
            path_params['solution_id'] = params['solution_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2_password']

        return self.api_client.call_api('/solutions/{solution_id}/testing-report', 'OPTIONS',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def options_solutions(self, **kwargs):
        """
        Check which methods are allowed
        **PERMISSIONS: At least Active user is required.**   Use this method if you need to know what operations are allowed to be performed on this endpoint, e.g. to decide wether to display a button in your UI.  The list of allowed methods is provided in `Allow` response header.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.options_solutions(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.options_solutions_with_http_info(**kwargs)
        else:
            (data) = self.options_solutions_with_http_info(**kwargs)
            return data

    def options_solutions_with_http_info(self, **kwargs):
        """
        Check which methods are allowed
        **PERMISSIONS: At least Active user is required.**   Use this method if you need to know what operations are allowed to be performed on this endpoint, e.g. to decide wether to display a button in your UI.  The list of allowed methods is provided in `Allow` response header.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.options_solutions_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method options_solutions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2_password']

        return self.api_client.call_api('/solutions/', 'OPTIONS',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def patch_solution_by_id(self, solution_id, body, **kwargs):
        """
        Patch solution details by ID
        **PERMISSIONS: Owner/Supervisor/Admin may execute this action.**
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.patch_solution_by_id(solution_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int solution_id: (required)
        :param list[Body2] body: (required)
        :return: DetailedSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.patch_solution_by_id_with_http_info(solution_id, body, **kwargs)
        else:
            (data) = self.patch_solution_by_id_with_http_info(solution_id, body, **kwargs)
            return data

    def patch_solution_by_id_with_http_info(self, solution_id, body, **kwargs):
        """
        Patch solution details by ID
        **PERMISSIONS: Owner/Supervisor/Admin may execute this action.**
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.patch_solution_by_id_with_http_info(solution_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int solution_id: (required)
        :param list[Body2] body: (required)
        :return: DetailedSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['solution_id', 'body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_solution_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params) or (params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `patch_solution_by_id`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_solution_by_id`")


        collection_formats = {}

        path_params = {}
        if 'solution_id' in params:
            path_params['solution_id'] = params['solution_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2_password']

        return self.api_client.call_api('/solutions/{solution_id}', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DetailedSolution',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def patch_solution_for_testing(self, **kwargs):
        """
        Fetch a solution for testing
        **PERMISSIONS: At least Active user is required.**   Return a solution and reserve it for testing.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.patch_solution_for_testing(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TestingSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.patch_solution_for_testing_with_http_info(**kwargs)
        else:
            (data) = self.patch_solution_for_testing_with_http_info(**kwargs)
            return data

    def patch_solution_for_testing_with_http_info(self, **kwargs):
        """
        Fetch a solution for testing
        **PERMISSIONS: At least Active user is required.**   Return a solution and reserve it for testing.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.patch_solution_for_testing_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TestingSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_solution_for_testing" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2_password']

        return self.api_client.call_api('/solutions/latest-new', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TestingSolution',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_solution_testing_report_by_id(self, solution_id, body, **kwargs):
        """
        Send a testing report for the solution
        **PERMISSIONS: Owner/Supervisor/Admin may execute this action.**
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_solution_testing_report_by_id(solution_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int solution_id: (required)
        :param Body3 body: (required)
        :return: BaseSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_solution_testing_report_by_id_with_http_info(solution_id, body, **kwargs)
        else:
            (data) = self.post_solution_testing_report_by_id_with_http_info(solution_id, body, **kwargs)
            return data

    def post_solution_testing_report_by_id_with_http_info(self, solution_id, body, **kwargs):
        """
        Send a testing report for the solution
        **PERMISSIONS: Owner/Supervisor/Admin may execute this action.**
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_solution_testing_report_by_id_with_http_info(solution_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int solution_id: (required)
        :param Body3 body: (required)
        :return: BaseSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['solution_id', 'body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_solution_testing_report_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params) or (params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `post_solution_testing_report_by_id`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_solution_testing_report_by_id`")


        collection_formats = {}

        path_params = {}
        if 'solution_id' in params:
            path_params['solution_id'] = params['solution_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2_password']

        return self.api_client.call_api('/solutions/{solution_id}/testing-report', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BaseSolution',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def send_solution(self, problem_id, source_code, **kwargs):
        """
        Upload a new solution
        **PERMISSIONS: At least Active user is required.**
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.send_solution(problem_id, source_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param int problem_id: (required)
        :param str source_code: (required)
        :param str programming_language_name:
        :param str testing_mode:
        :return: DetailedSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.send_solution_with_http_info(problem_id, source_code, **kwargs)
        else:
            (data) = self.send_solution_with_http_info(problem_id, source_code, **kwargs)
            return data

    def send_solution_with_http_info(self, problem_id, source_code, **kwargs):
        """
        Upload a new solution
        **PERMISSIONS: At least Active user is required.**
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.send_solution_with_http_info(problem_id, source_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param int problem_id: (required)
        :param str source_code: (required)
        :param str programming_language_name:
        :param str testing_mode:
        :return: DetailedSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['problem_id', 'source_code', 'programming_language_name', 'testing_mode']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_solution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'problem_id' is set
        if ('problem_id' not in params) or (params['problem_id'] is None):
            raise ValueError("Missing the required parameter `problem_id` when calling `send_solution`")
        # verify the required parameter 'source_code' is set
        if ('source_code' not in params) or (params['source_code'] is None):
            raise ValueError("Missing the required parameter `source_code` when calling `send_solution`")


        collection_formats = {}

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'problem_id' in params:
            form_params.append(('problem_id', params['problem_id']))
        if 'programming_language_name' in params:
            form_params.append(('programming_language_name', params['programming_language_name']))
        if 'testing_mode' in params:
            form_params.append(('testing_mode', params['testing_mode']))
        if 'source_code' in params:
            form_params.append(('source_code', params['source_code']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded', 'multipart/form-data'])

        # Authentication setting
        auth_settings = ['oauth2_password']

        return self.api_client.call_api('/solutions/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DetailedSolution',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
