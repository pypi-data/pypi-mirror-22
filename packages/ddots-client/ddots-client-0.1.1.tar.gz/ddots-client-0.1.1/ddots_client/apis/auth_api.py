# coding: utf-8

"""
    DDOTS RESTful API Server

    ## Explore the demo server  I suggest you start with signing up a new user. To do so, use `POST /users/` endpoint with `recaptcha_key=\"secret_key\"`.  You will need to know the API Client ID to authenticate, so here it is: `documentation`. Sometimes (e.g. for token refreshing) you might need API Client Secret: `KQ()SWK)SQK)QWSKQW(SKQ)S(QWSQW(SJ*HQ&HQW*SQ*^SSQWSGQSG`.  There are also two built-in users: * `root` (administrator with all permissions) with password `q` * `user` (regular user) with password `w` 

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class AuthApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_oauth_client(self, default_scopes, **kwargs):
        """
        Create a new OAuth2 Client
        **PERMISSIONS: At least Active user is required.**   Essentially, OAuth2 Client is a ``client_id`` and ``client_secret`` pair associated with a user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_oauth_client(default_scopes, async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] default_scopes: (required)
        :param list[str] redirect_uris:
        :return: DetailedOAuth2Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_oauth_client_with_http_info(default_scopes, **kwargs)
        else:
            (data) = self.create_oauth_client_with_http_info(default_scopes, **kwargs)
            return data

    def create_oauth_client_with_http_info(self, default_scopes, **kwargs):
        """
        Create a new OAuth2 Client
        **PERMISSIONS: At least Active user is required.**   Essentially, OAuth2 Client is a ``client_id`` and ``client_secret`` pair associated with a user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_oauth_client_with_http_info(default_scopes, async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] default_scopes: (required)
        :param list[str] redirect_uris:
        :return: DetailedOAuth2Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['default_scopes', 'redirect_uris']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_oauth_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'default_scopes' is set
        if ('default_scopes' not in params) or (params['default_scopes'] is None):
            raise ValueError("Missing the required parameter `default_scopes` when calling `create_oauth_client`")


        collection_formats = {}

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'redirect_uris' in params:
            form_params.append(('redirect_uris', params['redirect_uris']))
            collection_formats['redirect_uris'] = 'multi'
        if 'default_scopes' in params:
            form_params.append(('default_scopes', params['default_scopes']))
            collection_formats['default_scopes'] = 'multi'

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded', 'multipart/form-data'])

        # Authentication setting
        auth_settings = ['oauth2_password']

        return self.api_client.call_api('/auth/oauth2_clients/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DetailedOAuth2Client',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_o_auth2_clients(self, user_id, **kwargs):
        """
        List of OAuth2 Clients
        **PERMISSIONS: At least Active user is required.**   Returns a list of OAuth2 Clients starting from ``offset`` limited by ``limit`` parameter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_o_auth2_clients(user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int user_id: (required)
        :param int limit: limit a number of items (allowed range is 1-100), default is 20.
        :param int offset: a number of items to skip, default is 0.
        :return: list[BaseOAuth2Client]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_o_auth2_clients_with_http_info(user_id, **kwargs)
        else:
            (data) = self.get_o_auth2_clients_with_http_info(user_id, **kwargs)
            return data

    def get_o_auth2_clients_with_http_info(self, user_id, **kwargs):
        """
        List of OAuth2 Clients
        **PERMISSIONS: At least Active user is required.**   Returns a list of OAuth2 Clients starting from ``offset`` limited by ``limit`` parameter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_o_auth2_clients_with_http_info(user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int user_id: (required)
        :param int limit: limit a number of items (allowed range is 1-100), default is 20.
        :param int offset: a number of items to skip, default is 0.
        :return: list[BaseOAuth2Client]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'limit', 'offset']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_o_auth2_clients" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_o_auth2_clients`")

        if 'limit' in params and params['limit'] > 100:
            raise ValueError("Invalid value for parameter `limit` when calling `get_o_auth2_clients`, must be a value less than or equal to `100`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `get_o_auth2_clients`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `get_o_auth2_clients`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'user_id' in params:
            query_params['user_id'] = params['user_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2_password']

        return self.api_client.call_api('/auth/oauth2_clients/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[BaseOAuth2Client]',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def options_o_auth2_clients(self, **kwargs):
        """
        Check which methods are allowed
        **PERMISSIONS: At least Active user is required.**   Use this method if you need to know what operations are allowed to be performed on this endpoint, e.g. to decide wether to display a button in your UI.  The list of allowed methods is provided in `Allow` response header.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.options_o_auth2_clients(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.options_o_auth2_clients_with_http_info(**kwargs)
        else:
            (data) = self.options_o_auth2_clients_with_http_info(**kwargs)
            return data

    def options_o_auth2_clients_with_http_info(self, **kwargs):
        """
        Check which methods are allowed
        **PERMISSIONS: At least Active user is required.**   Use this method if you need to know what operations are allowed to be performed on this endpoint, e.g. to decide wether to display a button in your UI.  The list of allowed methods is provided in `Allow` response header.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.options_o_auth2_clients_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method options_o_auth2_clients" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2_password']

        return self.api_client.call_api('/auth/oauth2_clients/', 'OPTIONS',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
