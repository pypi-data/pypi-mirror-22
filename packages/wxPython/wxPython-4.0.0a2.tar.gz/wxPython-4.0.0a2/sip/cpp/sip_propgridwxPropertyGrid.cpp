/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.1
 *
 *     Copyright: (c) 2017 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_propgrid.h"

        #include <wx/propgrid/propgrid.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/propgrid/editors.h>
        #include <wx/propgrid/property.h>
        #include <wx/colour.h>
        #include <wx/propgrid/propgridiface.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/propgridpagestate.h>
        #include <wx/textctrl.h>
        #include <wx/gdicmn.h>
        #include <wx/font.h>
        #include <wx/statusbr.h>
        #include <wx/dc.h>
        #include <wx/event.h>
        #include <wx/window.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/accel.h>
        #include <wx/validate.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/region.h>
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/datetime.h>
        #include <datetime.h>
        #include <wx/bitmap.h>
        #include <wx/propgrid/propgridpagestate.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/propgridpagestate.h>


class sipwxPropertyGrid : public  ::wxPropertyGrid
{
public:
    sipwxPropertyGrid();
    sipwxPropertyGrid( ::wxWindow*, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long,const  ::wxString&);
    virtual ~sipwxPropertyGrid();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void Clear();
     ::wxPGVIterator GetVIterator(int) const;
    bool IsPropertySelected(const  ::wxPGPropArgCls&) const;
     ::wxSize DoGetBestClientSize() const;
     ::wxSize DoGetBestSize() const;
    void DoThaw();
    void DoFreeze();
     ::wxBorder GetDefaultBorderForControl() const;
     ::wxBorder GetDefaultBorder() const;
    void DoSetWindowVariant( ::wxWindowVariant);
    void DoMoveWindow(int,int,int,int);
     ::wxSize DoGetBorderSize() const;
    void DoSetSizeHints(int,int,int,int,int,int);
    void DoSetClientSize(int,int);
    void DoSetSize(int,int,int,int,int);
    void DoGetClientSize(int*,int*) const;
    void DoGetSize(int*,int*) const;
    void DoGetPosition(int*,int*) const;
    void DoEnable(bool);
     ::wxWindow* GetMainWindowOfCompositeControl();
    void OnInternalIdle();
    void InitDialog();
    void InheritAttributes();
    bool Destroy();
    bool Validate();
    bool TransferDataToWindow();
    bool TransferDataFromWindow();
    bool ShouldInheritColours() const;
    bool HasTransparentBackground();
     ::wxPoint GetClientAreaOrigin() const;
    bool InformFirstDirection(int,int,int);
    void SetCanFocus(bool);
    bool AcceptsFocusRecursively() const;
    bool AcceptsFocusFromKeyboard() const;
    bool AcceptsFocus() const;
    bool TryAfter( ::wxEvent&);
    bool TryBefore( ::wxEvent&);
    bool ProcessEvent( ::wxEvent&);
    void AddChild( ::wxWindowBase*);
    void RemoveChild( ::wxWindowBase*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxPropertyGrid(const sipwxPropertyGrid &);
    sipwxPropertyGrid &operator = (const sipwxPropertyGrid &);

    char sipPyMethods[40];
};

sipwxPropertyGrid::sipwxPropertyGrid():  ::wxPropertyGrid(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxPropertyGrid::sipwxPropertyGrid( ::wxWindow*parent, ::wxWindowID id,const  ::wxPoint& pos,const  ::wxSize& size,long style,const  ::wxString& name):  ::wxPropertyGrid(parent,id,pos,size,style,name), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxPropertyGrid::~sipwxPropertyGrid()
{
    sipCommonDtor(sipPySelf);
}

void sipwxPropertyGrid::Clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_Clear);

    if (!sipMeth)
    {
         ::wxPropertyGrid::Clear();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPGVIterator sipwxPropertyGrid::GetVIterator(int flags) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_GetVIterator);

    if (!sipMeth)
        return  ::wxPropertyGrid::GetVIterator(flags);

    extern  ::wxPGVIterator sipVH__propgrid_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__propgrid_52(sipGILState, 0, sipPySelf, sipMeth, flags);
}

bool sipwxPropertyGrid::IsPropertySelected(const  ::wxPGPropArgCls& id) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_IsPropertySelected);

    if (!sipMeth)
        return  ::wxPropertyGrid::IsPropertySelected(id);

    extern bool sipVH__propgrid_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxPGPropArgCls&);

    return sipVH__propgrid_53(sipGILState, 0, sipPySelf, sipMeth, id);
}

 ::wxSize sipwxPropertyGrid::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxPropertyGrid::DoGetBestClientSize();

    extern  ::wxSize sipVH__propgrid_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_35(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxPropertyGrid::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxPropertyGrid::DoGetBestSize();

    extern  ::wxSize sipVH__propgrid_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_35(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxPropertyGrid::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoThaw();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxPropertyGrid::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoFreeze();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxPropertyGrid::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxPropertyGrid::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__propgrid_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_36(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxPropertyGrid::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxPropertyGrid::GetDefaultBorder();

    extern  ::wxBorder sipVH__propgrid_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_36(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxPropertyGrid::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__propgrid_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__propgrid_37(sipGILState, 0, sipPySelf, sipMeth, variant);
}

void sipwxPropertyGrid::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__propgrid_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__propgrid_38(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

 ::wxSize sipwxPropertyGrid::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxPropertyGrid::DoGetBorderSize();

    extern  ::wxSize sipVH__propgrid_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_35(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxPropertyGrid::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__propgrid_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__propgrid_39(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

void sipwxPropertyGrid::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__propgrid_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__propgrid_40(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxPropertyGrid::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__propgrid_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__propgrid_41(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxPropertyGrid::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__propgrid_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__propgrid_42(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxPropertyGrid::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoGetSize(width,height);
        return;
    }

    extern void sipVH__propgrid_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__propgrid_42(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxPropertyGrid::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__propgrid_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__propgrid_42(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxPropertyGrid::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoEnable(enable);
        return;
    }

    extern void sipVH__propgrid_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__propgrid_43(sipGILState, 0, sipPySelf, sipMeth, enable);
}

 ::wxWindow* sipwxPropertyGrid::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxPropertyGrid::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__propgrid_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_44(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxPropertyGrid::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxPropertyGrid::OnInternalIdle();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxPropertyGrid::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxPropertyGrid::InitDialog();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxPropertyGrid::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxPropertyGrid::InheritAttributes();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_Destroy);

    if (!sipMeth)
        return  ::wxPropertyGrid::Destroy();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_Validate);

    if (!sipMeth)
        return  ::wxPropertyGrid::Validate();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxPropertyGrid::TransferDataToWindow();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxPropertyGrid::TransferDataFromWindow();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxPropertyGrid::ShouldInheritColours();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxPropertyGrid::HasTransparentBackground();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxPropertyGrid::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxPropertyGrid::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__propgrid_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_45(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxPropertyGrid::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__propgrid_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__propgrid_46(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

void sipwxPropertyGrid::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxPropertyGrid::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__propgrid_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__propgrid_43(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxPropertyGrid::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxPropertyGrid::AcceptsFocusRecursively();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxPropertyGrid::AcceptsFocusFromKeyboard();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxPropertyGrid::AcceptsFocus();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxPropertyGrid::TryAfter(event);

    extern bool sipVH__propgrid_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__propgrid_47(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxPropertyGrid::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxPropertyGrid::TryBefore(event);

    extern bool sipVH__propgrid_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__propgrid_47(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxPropertyGrid::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxPropertyGrid::ProcessEvent(event);

    extern bool sipVH__propgrid_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__propgrid_47(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sipwxPropertyGrid::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxPropertyGrid::AddChild(child);
        return;
    }

    extern void sipVH__propgrid_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__propgrid_48(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxPropertyGrid::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxPropertyGrid::RemoveChild(child);
        return;
    }

    extern void sipVH__propgrid_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__propgrid_48(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxPropertyGrid::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxPropertyGrid::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxPropertyGrid::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxPropertyGrid::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxPropertyGrid::DoEnable(enable) : DoEnable(enable));
}

void sipwxPropertyGrid::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxPropertyGrid::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxPropertyGrid::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxPropertyGrid::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxPropertyGrid::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxPropertyGrid::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxPropertyGrid::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxPropertyGrid::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxPropertyGrid::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxPropertyGrid::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxPropertyGrid::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxPropertyGrid::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxPropertyGrid::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxPropertyGrid::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxPropertyGrid::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxPropertyGrid::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxPropertyGrid::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxPropertyGrid::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxPropertyGrid::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxPropertyGrid::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxPropertyGrid::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxPropertyGrid::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxPropertyGrid::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxPropertyGrid::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxPropertyGrid::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxPropertyGrid::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxPropertyGrid::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxPropertyGrid::DoFreeze() : DoFreeze());
}

void sipwxPropertyGrid::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxPropertyGrid::DoThaw() : DoThaw());
}

bool sipwxPropertyGrid::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxPropertyGrid::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxPropertyGrid::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxPropertyGrid::TryBefore(event) : TryBefore(event));
}

bool sipwxPropertyGrid::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxPropertyGrid::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxPropertyGrid_SendDestroyEvent, "SendDestroyEvent()\n"
    "\n"
    "Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxPropertyGrid_SendDestroyEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipwxPropertyGrid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SendDestroyEvent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoShowPropertyError, "DoShowPropertyError(property, msg)\n"
    "\n"
    "Override in derived class to display error messages in custom manner\n"
    "(these message usually only result from validation failure).");

extern "C" {static PyObject *meth_wxPropertyGrid_DoShowPropertyError(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoShowPropertyError(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxPGProperty* property;
        const  ::wxString* msg;
        int msgState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_property,
            sipName_msg,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGProperty, &property, sipType_wxString,&msg, &msgState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DoShowPropertyError(property,*msg);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(msg),sipType_wxString,msgState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoShowPropertyError, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoHidePropertyError, "DoHidePropertyError(property)\n"
    "\n"
    "Override in derived class to hide an error displayed by\n"
    "DoShowPropertyError().");

extern "C" {static PyObject *meth_wxPropertyGrid_DoHidePropertyError(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoHidePropertyError(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxPGProperty* property;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_property,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGProperty, &property))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DoHidePropertyError(property);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoHidePropertyError, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetStatusBar, "GetStatusBar() -> wx.StatusBar\n"
    "\n"
    "Return wxStatusBar that is used by this wxPropertyGrid.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetStatusBar(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetStatusBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxStatusBar*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetStatusBar();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxStatusBar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetStatusBar, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_EditorsValueWasModified, "EditorsValueWasModified()\n"
    "\n"
    "Call when editor widget's contents is modified.");

extern "C" {static PyObject *meth_wxPropertyGrid_EditorsValueWasModified(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_EditorsValueWasModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EditorsValueWasModified();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_EditorsValueWasModified, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_EditorsValueWasNotModified, "EditorsValueWasNotModified()\n"
    "\n"
    "Reverse of EditorsValueWasModified().");

extern "C" {static PyObject *meth_wxPropertyGrid_EditorsValueWasNotModified(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_EditorsValueWasNotModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EditorsValueWasNotModified();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_EditorsValueWasNotModified, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetUncommittedPropertyValue, "GetUncommittedPropertyValue() -> PGVariant\n"
    "\n"
    "Returns most up-to-date value of selected property.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetUncommittedPropertyValue(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetUncommittedPropertyValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxPGVariant*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPGVariant(sipCpp->GetUncommittedPropertyValue());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPGVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetUncommittedPropertyValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_IsEditorsValueModified, "IsEditorsValueModified() -> bool\n"
    "\n"
    "Returns true if editor's value was marked modified.");

extern "C" {static PyObject *meth_wxPropertyGrid_IsEditorsValueModified(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_IsEditorsValueModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsEditorsValueModified();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_IsEditorsValueModified, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_ShowPropertyError, "ShowPropertyError(id, msg)\n"
    "\n"
    "Shows an brief error message that is related to a property.");

extern "C" {static PyObject *meth_wxPropertyGrid_ShowPropertyError(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_ShowPropertyError(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPGPropArgCls* id;
        int idState = 0;
        const  ::wxString* msg;
        int msgState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
            sipName_msg,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGPropArgCls, &id, &idState, sipType_wxString,&msg, &msgState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ShowPropertyError(*id,*msg);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPGPropArgCls *>(id),sipType_wxPGPropArgCls,idState);
            sipReleaseType(const_cast< ::wxString *>(msg),sipType_wxString,msgState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_ShowPropertyError, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_WasValueChangedInEvent, "WasValueChangedInEvent() -> bool\n"
    "\n"
    "You can use this member function, for instance, to detect in\n"
    "wxPGProperty::OnEvent() if wxPGProperty::SetValueInEvent() was already\n"
    "called in wxPGEditor::OnEvent().");

extern "C" {static PyObject *meth_wxPropertyGrid_WasValueChangedInEvent(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_WasValueChangedInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->WasValueChangedInEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_WasValueChangedInEvent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_AddActionTrigger, "AddActionTrigger(action, keycode, modifiers=0)\n"
    "\n"
    "Adds given key combination to trigger given action.");

extern "C" {static PyObject *meth_wxPropertyGrid_AddActionTrigger(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_AddActionTrigger(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int action;
        int keycode;
        int modifiers = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_action,
            sipName_keycode,
            sipName_modifiers,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|i", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &action, &keycode, &modifiers))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->AddActionTrigger(action,keycode,modifiers);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_AddActionTrigger, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_AddToSelection, "AddToSelection(id) -> bool\n"
    "\n"
    "Adds given property into selection.");

extern "C" {static PyObject *meth_wxPropertyGrid_AddToSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_AddToSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPGPropArgCls* id;
        int idState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGPropArgCls, &id, &idState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddToSelection(*id);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPGPropArgCls *>(id),sipType_wxPGPropArgCls,idState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_AddToSelection, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_BeginLabelEdit, "BeginLabelEdit(colIndex=0)\n"
    "\n"
    "Creates label editor wxTextCtrl for given column, for property that is\n"
    "currently selected.");

extern "C" {static PyObject *meth_wxPropertyGrid_BeginLabelEdit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_BeginLabelEdit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint colIndex = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_colIndex,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|u", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &colIndex))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->BeginLabelEdit(colIndex);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_BeginLabelEdit, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_ChangePropertyValue, "ChangePropertyValue(id, newValue) -> bool\n"
    "\n"
    "Changes value of a property, as if from an editor.");

extern "C" {static PyObject *meth_wxPropertyGrid_ChangePropertyValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_ChangePropertyValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPGPropArgCls* id;
        int idState = 0;
         ::wxPGVariant* newValue;
        int newValueState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
            sipName_newValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGPropArgCls, &id, &idState, sipType_wxPGVariant,&newValue, &newValueState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ChangePropertyValue(*id,*newValue);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPGPropArgCls *>(id),sipType_wxPGPropArgCls,idState);
            sipReleaseType(newValue,sipType_wxPGVariant,newValueState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_ChangePropertyValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_CenterSplitter, "CenterSplitter(enableAutoResizing=False)\n"
    "\n"
    "Centers the splitter.");

extern "C" {static PyObject *meth_wxPropertyGrid_CenterSplitter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_CenterSplitter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool enableAutoResizing = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enableAutoResizing,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &enableAutoResizing))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->CenterSplitter(enableAutoResizing);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_CenterSplitter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_Clear, "Clear()\n"
    "\n"
    "Deletes all properties.");

extern "C" {static PyObject *meth_wxPropertyGrid_Clear(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_Clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::Clear() : sipCpp->Clear());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_Clear, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_ClearActionTriggers, "ClearActionTriggers(action)\n"
    "\n"
    "Clears action triggers for given action.");

extern "C" {static PyObject *meth_wxPropertyGrid_ClearActionTriggers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_ClearActionTriggers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int action;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_action,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &action))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ClearActionTriggers(action);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_ClearActionTriggers, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_CommitChangesFromEditor, "CommitChangesFromEditor(flags=0) -> bool\n"
    "\n"
    "Forces updating the value of property from the editor control.");

extern "C" {static PyObject *meth_wxPropertyGrid_CommitChangesFromEditor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_CommitChangesFromEditor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxUint32 flags = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|u", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->CommitChangesFromEditor(flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_CommitChangesFromEditor, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_Create, "Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=PG_DEFAULT_STYLE, name=PropertyGridNameStr) -> bool\n"
    "\n"
    "Two step creation.");

extern "C" {static PyObject *meth_wxPropertyGrid_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxPG_DEFAULT_STYLE;
        const  ::wxString& namedef = wxPropertyGridNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;
        sipWrapper *sipOwner = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJH|iJ1J1lJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_Create, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DedicateKey, "DedicateKey(keycode)\n"
    "\n"
    "Dedicates a specific keycode to wxPropertyGrid.");

extern "C" {static PyObject *meth_wxPropertyGrid_DedicateKey(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DedicateKey(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int keycode;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_keycode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &keycode))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DedicateKey(keycode);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DedicateKey, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_EnableCategories, "EnableCategories(enable) -> bool\n"
    "\n"
    "Enables or disables (shows/hides) categories according to parameter\n"
    "enable.");

extern "C" {static PyObject *meth_wxPropertyGrid_EnableCategories(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_EnableCategories(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool enable;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &enable))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EnableCategories(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_EnableCategories, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_EndLabelEdit, "EndLabelEdit(commit=True)\n"
    "\n"
    "Destroys label editor wxTextCtrl, if any.");

extern "C" {static PyObject *meth_wxPropertyGrid_EndLabelEdit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_EndLabelEdit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool commit = 1;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_commit,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &commit))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EndLabelEdit(commit);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_EndLabelEdit, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_EnsureVisible, "EnsureVisible(id) -> bool\n"
    "\n"
    "Scrolls and/or expands items to ensure that the given item is visible.");

extern "C" {static PyObject *meth_wxPropertyGrid_EnsureVisible(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_EnsureVisible(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPGPropArgCls* id;
        int idState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGPropArgCls, &id, &idState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EnsureVisible(*id);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPGPropArgCls *>(id),sipType_wxPGPropArgCls,idState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_EnsureVisible, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_FitColumns, "FitColumns() -> wx.Size\n"
    "\n"
    "Reduces column sizes to minimum possible, while still retaining fully\n"
    "visible grid contents (labels, images).");

extern "C" {static PyObject *meth_wxPropertyGrid_FitColumns(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_FitColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->FitColumns());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_FitColumns, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetLabelEditor, "GetLabelEditor() -> wx.TextCtrl\n"
    "\n"
    "Returns currently active label editor, NULL if none.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetLabelEditor(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetLabelEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxTextCtrl*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetLabelEditor();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxTextCtrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetLabelEditor, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetPanel, "GetPanel() -> wx.Window\n"
    "\n"
    "Returns wxWindow that the properties are painted on, and which should\n"
    "be used as the parent for editor controls.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetPanel(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetPanel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetPanel();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetPanel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetCaptionBackgroundColour, "GetCaptionBackgroundColour() -> wx.Colour\n"
    "\n"
    "Returns current category caption background colour.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetCaptionBackgroundColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetCaptionBackgroundColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetCaptionBackgroundColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetCaptionBackgroundColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetCaptionFont, "GetCaptionFont() -> wx.Font\n"
    "\n"
    "Returns current category caption font.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetCaptionFont(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetCaptionFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxFont*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetCaptionFont();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetCaptionFont, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetCaptionForegroundColour, "GetCaptionForegroundColour() -> wx.Colour\n"
    "\n"
    "Returns current category caption text colour.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetCaptionForegroundColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetCaptionForegroundColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetCaptionForegroundColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetCaptionForegroundColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetCellBackgroundColour, "GetCellBackgroundColour() -> wx.Colour\n"
    "\n"
    "Returns current cell background colour.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetCellBackgroundColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetCellBackgroundColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetCellBackgroundColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetCellBackgroundColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetCellDisabledTextColour, "GetCellDisabledTextColour() -> wx.Colour\n"
    "\n"
    "Returns current cell text colour when disabled.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetCellDisabledTextColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetCellDisabledTextColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetCellDisabledTextColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetCellDisabledTextColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetCellTextColour, "GetCellTextColour() -> wx.Colour\n"
    "\n"
    "Returns current cell text colour.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetCellTextColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetCellTextColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetCellTextColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetCellTextColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetColumnCount, "GetColumnCount() -> unsignedint\n"
    "\n"
    "Returns number of columns currently on grid.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetColumnCount(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetColumnCount, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetEmptySpaceColour, "GetEmptySpaceColour() -> wx.Colour\n"
    "\n"
    "Returns colour of empty space below properties.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetEmptySpaceColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetEmptySpaceColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetEmptySpaceColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetEmptySpaceColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetFontHeight, "GetFontHeight() -> int\n"
    "\n"
    "Returns height of highest characters of used font.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetFontHeight(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetFontHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFontHeight();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetFontHeight, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetGrid, "GetGrid() -> PropertyGrid\n"
    "\n"
    "Returns pointer to itself.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetGrid(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetGrid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxPropertyGrid*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetGrid();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPropertyGrid,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetGrid, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetImageRect, "GetImageRect(property, item) -> wx.Rect\n"
    "\n"
    "Returns rectangle of custom paint image.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetImageRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetImageRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxPGProperty* property;
        int item;
        const  ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_property,
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8i", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGProperty, &property, &item))
        {
             ::wxRect*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRect(sipCpp->GetImageRect(property,item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetImageRect, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetImageSize, "GetImageSize(property=None, item=-1) -> wx.Size\n"
    "\n"
    "Returns size of the custom paint image in front of property.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetImageSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetImageSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxPGProperty* property = 0;
        int item = -1;
        const  ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_property,
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J8i", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGProperty, &property, &item))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetImageSize(property,item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetImageSize, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetLastItem, "GetLastItem(flags=PG_ITERATE_DEFAULT) -> PGProperty\n"
    "\n"
    "Returns last item which could be iterated using given flags.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetLastItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetLastItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int flags = wxPG_ITERATE_DEFAULT;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &flags))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetLastItem(flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetLastItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetLineColour, "GetLineColour() -> wx.Colour\n"
    "\n"
    "Returns colour of lines between cells.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetLineColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetLineColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetLineColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetLineColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetMarginColour, "GetMarginColour() -> wx.Colour\n"
    "\n"
    "Returns background colour of margin.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetMarginColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetMarginColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetMarginColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetMarginColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetRoot, "GetRoot() -> PGProperty\n"
    "\n"
    "Returns \"root property\".");

extern "C" {static PyObject *meth_wxPropertyGrid_GetRoot(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetRoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetRoot();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetRoot, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetRowHeight, "GetRowHeight() -> int\n"
    "\n"
    "Returns height of a single grid row (in pixels).");

extern "C" {static PyObject *meth_wxPropertyGrid_GetRowHeight(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetRowHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetRowHeight();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetRowHeight, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetSelectedProperty, "GetSelectedProperty() -> PGProperty\n"
    "\n"
    "Returns currently selected property.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetSelectedProperty(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetSelectedProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSelectedProperty();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetSelectedProperty, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetSelection, "GetSelection() -> PGProperty\n"
    "\n"
    "Returns currently selected property.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetSelection(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSelection();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetSelection, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetSelectionBackgroundColour, "GetSelectionBackgroundColour() -> wx.Colour\n"
    "\n"
    "Returns current selection background colour.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetSelectionBackgroundColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetSelectionBackgroundColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetSelectionBackgroundColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetSelectionBackgroundColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetSelectionForegroundColour, "GetSelectionForegroundColour() -> wx.Colour\n"
    "\n"
    "Returns current selection text colour.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetSelectionForegroundColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetSelectionForegroundColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetSelectionForegroundColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetSelectionForegroundColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetSplitterPosition, "GetSplitterPosition(splitterIndex=0) -> int\n"
    "\n"
    "Returns current splitter x position.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetSplitterPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetSplitterPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint splitterIndex = 0;
        const  ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_splitterIndex,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|u", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &splitterIndex))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSplitterPosition(splitterIndex);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetSplitterPosition, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetEditorTextCtrl, "GetEditorTextCtrl() -> wx.TextCtrl\n"
    "\n"
    "Returns wxTextCtrl active in currently selected property, if any.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetEditorTextCtrl(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetEditorTextCtrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxTextCtrl*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetEditorTextCtrl();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxTextCtrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetEditorTextCtrl, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetUnspecifiedValueAppearance, "GetUnspecifiedValueAppearance() -> PGCell\n"
    "\n"
    "Returns current appearance of unspecified value cells.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetUnspecifiedValueAppearance(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetUnspecifiedValueAppearance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxPGCell*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPGCell(sipCpp->GetUnspecifiedValueAppearance());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPGCell,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetUnspecifiedValueAppearance, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetUnspecifiedValueText, "GetUnspecifiedValueText(argFlags=0) -> String\n"
    "\n"
    "Returns (visual) text representation of the unspecified property\n"
    "value.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetUnspecifiedValueText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetUnspecifiedValueText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int argFlags = 0;
        const  ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_argFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &argFlags))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetUnspecifiedValueText(argFlags));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetUnspecifiedValueText, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetVerticalSpacing, "GetVerticalSpacing() -> int\n"
    "\n"
    "Returns current vertical spacing.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetVerticalSpacing(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetVerticalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVerticalSpacing();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetVerticalSpacing, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_HitTest, "HitTest(pt) -> PropertyGridHitTestResult\n"
    "\n"
    "Returns information about arbitrary position in the grid.");

extern "C" {static PyObject *meth_wxPropertyGrid_HitTest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_HitTest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPoint* pt;
        int ptState = 0;
        const  ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPoint, &pt, &ptState))
        {
             ::wxPropertyGridHitTestResult*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPropertyGridHitTestResult(sipCpp->HitTest(*pt));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt),sipType_wxPoint,ptState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPropertyGridHitTestResult,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_HitTest, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_IsAnyModified, "IsAnyModified() -> bool\n"
    "\n"
    "Returns true if any property has been modified by the user.");

extern "C" {static PyObject *meth_wxPropertyGrid_IsAnyModified(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_IsAnyModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsAnyModified();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_IsAnyModified, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_IsEditorFocused, "IsEditorFocused() -> bool\n"
    "\n"
    "Returns true if a property editor control has focus.");

extern "C" {static PyObject *meth_wxPropertyGrid_IsEditorFocused(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_IsEditorFocused(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsEditorFocused();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_IsEditorFocused, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_IsFrozen, "IsFrozen() -> bool\n"
    "\n"
    "Returns true if updating is frozen (ie.");

extern "C" {static PyObject *meth_wxPropertyGrid_IsFrozen(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_IsFrozen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsFrozen();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_IsFrozen, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_MakeColumnEditable, "MakeColumnEditable(column, editable=True)\n"
    "\n"
    "Makes given column editable by user.");

extern "C" {static PyObject *meth_wxPropertyGrid_MakeColumnEditable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_MakeColumnEditable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint column;
        bool editable = 1;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
            sipName_editable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu|b", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &column, &editable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->MakeColumnEditable(column,editable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_MakeColumnEditable, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_OnTLPChanging, "OnTLPChanging(newTLP)\n"
    "\n"
    "It is recommended that you call this function any time your code\n"
    "causes wxPropertyGrid's top-level parent to change.");

extern "C" {static PyObject *meth_wxPropertyGrid_OnTLPChanging(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_OnTLPChanging(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* newTLP;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_newTLP,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxWindow, &newTLP))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->OnTLPChanging(newTLP);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_OnTLPChanging, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_RefreshEditor, "RefreshEditor()\n"
    "\n"
    "Refreshes any active editor control.");

extern "C" {static PyObject *meth_wxPropertyGrid_RefreshEditor(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_RefreshEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->RefreshEditor();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_RefreshEditor, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_RefreshProperty, "RefreshProperty(p)\n"
    "\n"
    "Redraws given property.");

extern "C" {static PyObject *meth_wxPropertyGrid_RefreshProperty(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_RefreshProperty(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxPGProperty* p;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_p,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGProperty, &p))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->RefreshProperty(p);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_RefreshProperty, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_ResetColours, "ResetColours()\n"
    "\n"
    "Resets all colours to the original system values.");

extern "C" {static PyObject *meth_wxPropertyGrid_ResetColours(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_ResetColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ResetColours();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_ResetColours, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_ResetColumnSizes, "ResetColumnSizes(enableAutoResizing=False)\n"
    "\n"
    "Resets column sizes and splitter positions, based on proportions.");

extern "C" {static PyObject *meth_wxPropertyGrid_ResetColumnSizes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_ResetColumnSizes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool enableAutoResizing = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enableAutoResizing,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &enableAutoResizing))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ResetColumnSizes(enableAutoResizing);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_ResetColumnSizes, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_RemoveFromSelection, "RemoveFromSelection(id) -> bool\n"
    "\n"
    "Removes given property from selection.");

extern "C" {static PyObject *meth_wxPropertyGrid_RemoveFromSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_RemoveFromSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPGPropArgCls* id;
        int idState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGPropArgCls, &id, &idState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->RemoveFromSelection(*id);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPGPropArgCls *>(id),sipType_wxPGPropArgCls,idState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_RemoveFromSelection, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SelectProperty, "SelectProperty(id, focus=False) -> bool\n"
    "\n"
    "Selects a property.");

extern "C" {static PyObject *meth_wxPropertyGrid_SelectProperty(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SelectProperty(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPGPropArgCls* id;
        int idState = 0;
        bool focus = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
            sipName_focus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|b", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGPropArgCls, &id, &idState, &focus))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SelectProperty(*id,focus);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPGPropArgCls *>(id),sipType_wxPGPropArgCls,idState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SelectProperty, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetCaptionBackgroundColour, "SetCaptionBackgroundColour(col)\n"
    "\n"
    "Sets category caption background colour.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetCaptionBackgroundColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetCaptionBackgroundColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCaptionBackgroundColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col),sipType_wxColour,colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetCaptionBackgroundColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetCaptionTextColour, "SetCaptionTextColour(col)\n"
    "\n"
    "Sets category caption text colour.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetCaptionTextColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetCaptionTextColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCaptionTextColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col),sipType_wxColour,colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetCaptionTextColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetCellBackgroundColour, "SetCellBackgroundColour(col)\n"
    "\n"
    "Sets default cell background colour - applies to property cells.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetCellBackgroundColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetCellBackgroundColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCellBackgroundColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col),sipType_wxColour,colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetCellBackgroundColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetCellDisabledTextColour, "SetCellDisabledTextColour(col)\n"
    "\n"
    "Sets cell text colour for disabled properties.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetCellDisabledTextColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetCellDisabledTextColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCellDisabledTextColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col),sipType_wxColour,colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetCellDisabledTextColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetCellTextColour, "SetCellTextColour(col)\n"
    "\n"
    "Sets default cell text colour - applies to property name and value\n"
    "text.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetCellTextColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetCellTextColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCellTextColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col),sipType_wxColour,colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetCellTextColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetColumnCount, "SetColumnCount(colCount)\n"
    "\n"
    "Set number of columns (2 or more).");

extern "C" {static PyObject *meth_wxPropertyGrid_SetColumnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetColumnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int colCount;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_colCount,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &colCount))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetColumnCount(colCount);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetColumnCount, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetCurrentCategory, "SetCurrentCategory(id)\n"
    "\n"
    "Sets the 'current' category - Append will add non-category properties\n"
    "under it.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetCurrentCategory(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetCurrentCategory(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPGPropArgCls* id;
        int idState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGPropArgCls, &id, &idState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCurrentCategory(*id);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPGPropArgCls *>(id),sipType_wxPGPropArgCls,idState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetCurrentCategory, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetEmptySpaceColour, "SetEmptySpaceColour(col)\n"
    "\n"
    "Sets colour of empty space below properties.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetEmptySpaceColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetEmptySpaceColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetEmptySpaceColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col),sipType_wxColour,colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetEmptySpaceColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetLineColour, "SetLineColour(col)\n"
    "\n"
    "Sets colour of lines between cells.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetLineColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetLineColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetLineColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col),sipType_wxColour,colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetLineColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetMarginColour, "SetMarginColour(col)\n"
    "\n"
    "Sets background colour of margin.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetMarginColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetMarginColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMarginColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col),sipType_wxColour,colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetMarginColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetSelection, "SetSelection(newSelection)\n"
    "\n"
    "Set entire new selection from given list of properties.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxArrayPGProperty* newSelection;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_newSelection,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxArrayPGProperty, &newSelection))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSelection(*newSelection);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetSelection, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetSelectionBackgroundColour, "SetSelectionBackgroundColour(col)\n"
    "\n"
    "Sets selection background colour - applies to selected property name\n"
    "background.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetSelectionBackgroundColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetSelectionBackgroundColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSelectionBackgroundColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col),sipType_wxColour,colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetSelectionBackgroundColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetSelectionTextColour, "SetSelectionTextColour(col)\n"
    "\n"
    "Sets selection foreground colour - applies to selected property name\n"
    "text.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetSelectionTextColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetSelectionTextColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSelectionTextColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col),sipType_wxColour,colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetSelectionTextColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetSplitterPosition, "SetSplitterPosition(newxpos, col=0)\n"
    "\n"
    "Sets x coordinate of the splitter.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetSplitterPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetSplitterPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int newxpos;
        int col = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_newxpos,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|i", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &newxpos, &col))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSplitterPosition(newxpos,col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetSplitterPosition, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetSplitterLeft, "SetSplitterLeft(privateChildrenToo=False)\n"
    "\n"
    "Moves splitter as left as possible, while still allowing all labels to\n"
    "be shown in full.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetSplitterLeft(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetSplitterLeft(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool privateChildrenToo = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_privateChildrenToo,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &privateChildrenToo))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSplitterLeft(privateChildrenToo);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetSplitterLeft, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetUnspecifiedValueAppearance, "SetUnspecifiedValueAppearance(cell)\n"
    "\n"
    "Sets appearance of value cells representing an unspecified property\n"
    "value.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetUnspecifiedValueAppearance(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetUnspecifiedValueAppearance(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPGCell* cell;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_cell,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGCell, &cell))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetUnspecifiedValueAppearance(*cell);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetUnspecifiedValueAppearance, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetVerticalSpacing, "SetVerticalSpacing(vspacing)\n"
    "\n"
    "Sets vertical spacing.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetVerticalSpacing(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetVerticalSpacing(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int vspacing;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_vspacing,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &vspacing))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetVerticalSpacing(vspacing);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetVerticalSpacing, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_AutoGetTranslation, "AutoGetTranslation(enable)\n"
    "\n"
    "This static function enables or disables automatic use of\n"
    "wxGetTranslation() for following strings: wxEnumProperty list labels,\n"
    "wxFlagsProperty child property labels.");

extern "C" {static PyObject *meth_wxPropertyGrid_AutoGetTranslation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_AutoGetTranslation(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool enable;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "b", &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxPropertyGrid::AutoGetTranslation(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_AutoGetTranslation, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_RegisterEditorClass, "RegisterEditorClass(editor, noDefCheck=False) -> PGEditor\n"
    "\n"
    "Forwards to DoRegisterEditorClass with empty name.");

extern "C" {static PyObject *meth_wxPropertyGrid_RegisterEditorClass(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_RegisterEditorClass(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxPGEditor* editor;
        bool noDefCheck = 0;

        static const char *sipKwdList[] = {
            sipName_editor,
            sipName_noDefCheck,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J:|b", sipType_wxPGEditor, &editor, &noDefCheck))
        {
             ::wxPGEditor*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxPropertyGrid::RegisterEditorClass(editor,noDefCheck);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGEditor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_RegisterEditorClass, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoRegisterEditorClass, "DoRegisterEditorClass(editor, name, noDefCheck=False) -> PGEditor\n"
    "\n"
    "Registers a new editor class.");

extern "C" {static PyObject *meth_wxPropertyGrid_DoRegisterEditorClass(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoRegisterEditorClass(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxPGEditor* editor;
        const  ::wxString* name;
        int nameState = 0;
        bool noDefCheck = 0;

        static const char *sipKwdList[] = {
            sipName_editor,
            sipName_name,
            sipName_noDefCheck,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1|b", sipType_wxPGEditor, &editor, sipType_wxString,&name, &nameState, &noDefCheck))
        {
             ::wxPGEditor*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxPropertyGrid::DoRegisterEditorClass(editor,*name,noDefCheck);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGEditor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoRegisterEditorClass, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxPropertyGrid_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetClientAreaOrigin, doc_wxPropertyGrid_GetClientAreaOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxPropertyGrid_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_Validate, doc_wxPropertyGrid_Validate);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxPropertyGrid_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_TransferDataToWindow, doc_wxPropertyGrid_TransferDataToWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxPropertyGrid_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_TransferDataFromWindow, doc_wxPropertyGrid_TransferDataFromWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxPropertyGrid_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_InitDialog, doc_wxPropertyGrid_InitDialog);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxPropertyGrid_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_AcceptsFocus, doc_wxPropertyGrid_AcceptsFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxPropertyGrid_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_AcceptsFocusRecursively, doc_wxPropertyGrid_AcceptsFocusRecursively);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxPropertyGrid_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_AcceptsFocusFromKeyboard, doc_wxPropertyGrid_AcceptsFocusFromKeyboard);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxPropertyGrid_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_AddChild, doc_wxPropertyGrid_AddChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxPropertyGrid_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_RemoveChild, doc_wxPropertyGrid_RemoveChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxPropertyGrid_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_InheritAttributes, doc_wxPropertyGrid_InheritAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxPropertyGrid_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_ShouldInheritColours, doc_wxPropertyGrid_ShouldInheritColours);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxPropertyGrid_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_OnInternalIdle, doc_wxPropertyGrid_OnInternalIdle);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxPropertyGrid_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetMainWindowOfCompositeControl, doc_wxPropertyGrid_GetMainWindowOfCompositeControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxPropertyGrid_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biii", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_InformFirstDirection, doc_wxPropertyGrid_InformFirstDirection);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxPropertyGrid_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetCanFocus, doc_wxPropertyGrid_SetCanFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxPropertyGrid_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_Destroy, doc_wxPropertyGrid_Destroy);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxPropertyGrid_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_ProcessEvent, doc_wxPropertyGrid_ProcessEvent);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxPropertyGrid_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoEnable, doc_wxPropertyGrid_DoEnable);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxPropertyGrid_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxPropertyGrid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoGetPosition, doc_wxPropertyGrid_DoGetPosition);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxPropertyGrid_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxPropertyGrid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoGetSize, doc_wxPropertyGrid_DoGetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxPropertyGrid_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxPropertyGrid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoGetClientSize, doc_wxPropertyGrid_DoGetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxPropertyGrid_DoGetBestSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxPropertyGrid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoGetBestSize, doc_wxPropertyGrid_DoGetBestSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxPropertyGrid_DoGetBestClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxPropertyGrid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoGetBestClientSize, doc_wxPropertyGrid_DoGetBestClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxPropertyGrid_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiii", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoSetSize, doc_wxPropertyGrid_DoSetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxPropertyGrid_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoSetClientSize, doc_wxPropertyGrid_DoSetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxPropertyGrid_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiiii", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoSetSizeHints, doc_wxPropertyGrid_DoSetSizeHints);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxPropertyGrid_DoGetBorderSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxPropertyGrid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoGetBorderSize, doc_wxPropertyGrid_DoGetBorderSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxPropertyGrid_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiii", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoMoveWindow, doc_wxPropertyGrid_DoMoveWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxPropertyGrid_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoSetWindowVariant, doc_wxPropertyGrid_DoSetWindowVariant);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxPropertyGrid_GetDefaultBorder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxPropertyGrid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(sipRes,sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetDefaultBorder, doc_wxPropertyGrid_GetDefaultBorder);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxPropertyGrid_GetDefaultBorderForControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxPropertyGrid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(sipRes,sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetDefaultBorderForControl, doc_wxPropertyGrid_GetDefaultBorderForControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxPropertyGrid_DoFreeze(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoFreeze(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxPropertyGrid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoFreeze, doc_wxPropertyGrid_DoFreeze);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxPropertyGrid_DoThaw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoThaw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxPropertyGrid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoThaw, doc_wxPropertyGrid_DoThaw);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxPropertyGrid_HasTransparentBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxPropertyGrid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_HasTransparentBackground, doc_wxPropertyGrid_HasTransparentBackground);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxPropertyGrid_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_TryBefore, doc_wxPropertyGrid_TryBefore);

    return NULL;
}


PyDoc_STRVAR(doc_wxPropertyGrid_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxPropertyGrid_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_TryAfter, doc_wxPropertyGrid_TryAfter);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxPropertyGrid(void *, const sipTypeDef *);}
static void *cast_wxPropertyGrid(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxPropertyGrid *sipCpp = reinterpret_cast< ::wxPropertyGrid *>(sipCppV);

    if (targetType == sipType_wxControl)
        return static_cast< ::wxControl *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    if (targetType == sipType_wxPropertyGridInterface)
        return static_cast< ::wxPropertyGridInterface *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxPropertyGrid(void *, int);}
static void release_wxPropertyGrid(void *sipCppV, int sipIsDerived)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipIsDerived)
        delete reinterpret_cast<sipwxPropertyGrid *>(sipCppV);
    else
        delete reinterpret_cast< ::wxPropertyGrid *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxPropertyGrid(sipSimpleWrapper *);}
static void dealloc_wxPropertyGrid(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxPropertyGrid *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxPropertyGrid(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxPropertyGrid(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxPropertyGrid(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxPropertyGrid *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPropertyGrid();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxPG_DEFAULT_STYLE;
        const  ::wxString& namedef = wxPropertyGridNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1lJ1", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPropertyGrid(parent,id,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxPropertyGrid[] = {{9, 0, 0}, {65, 255, 1}};


static PyMethodDef methods_wxPropertyGrid[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxPropertyGrid_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxPropertyGrid_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxPropertyGrid_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddActionTrigger), (PyCFunction)meth_wxPropertyGrid_AddActionTrigger, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_AddActionTrigger)},
    {SIP_MLNAME_CAST(sipName_AddChild), (PyCFunction)meth_wxPropertyGrid_AddChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_AddChild)},
    {SIP_MLNAME_CAST(sipName_AddToSelection), (PyCFunction)meth_wxPropertyGrid_AddToSelection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_AddToSelection)},
    {SIP_MLNAME_CAST(sipName_AutoGetTranslation), (PyCFunction)meth_wxPropertyGrid_AutoGetTranslation, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_AutoGetTranslation)},
    {SIP_MLNAME_CAST(sipName_BeginLabelEdit), (PyCFunction)meth_wxPropertyGrid_BeginLabelEdit, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_BeginLabelEdit)},
    {SIP_MLNAME_CAST(sipName_CenterSplitter), (PyCFunction)meth_wxPropertyGrid_CenterSplitter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_CenterSplitter)},
    {SIP_MLNAME_CAST(sipName_ChangePropertyValue), (PyCFunction)meth_wxPropertyGrid_ChangePropertyValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_ChangePropertyValue)},
    {SIP_MLNAME_CAST(sipName_Clear), meth_wxPropertyGrid_Clear, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_Clear)},
    {SIP_MLNAME_CAST(sipName_ClearActionTriggers), (PyCFunction)meth_wxPropertyGrid_ClearActionTriggers, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_ClearActionTriggers)},
    {SIP_MLNAME_CAST(sipName_CommitChangesFromEditor), (PyCFunction)meth_wxPropertyGrid_CommitChangesFromEditor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_CommitChangesFromEditor)},
    {SIP_MLNAME_CAST(sipName_Create), (PyCFunction)meth_wxPropertyGrid_Create, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_Create)},
    {SIP_MLNAME_CAST(sipName_DedicateKey), (PyCFunction)meth_wxPropertyGrid_DedicateKey, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DedicateKey)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxPropertyGrid_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), (PyCFunction)meth_wxPropertyGrid_DoEnable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), (PyCFunction)meth_wxPropertyGrid_DoFreeze, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), (PyCFunction)meth_wxPropertyGrid_DoGetBestClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), (PyCFunction)meth_wxPropertyGrid_DoGetBestSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), (PyCFunction)meth_wxPropertyGrid_DoGetBorderSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), (PyCFunction)meth_wxPropertyGrid_DoGetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), (PyCFunction)meth_wxPropertyGrid_DoGetPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), (PyCFunction)meth_wxPropertyGrid_DoGetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoHidePropertyError), (PyCFunction)meth_wxPropertyGrid_DoHidePropertyError, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DoHidePropertyError)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), (PyCFunction)meth_wxPropertyGrid_DoMoveWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoRegisterEditorClass), (PyCFunction)meth_wxPropertyGrid_DoRegisterEditorClass, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DoRegisterEditorClass)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), (PyCFunction)meth_wxPropertyGrid_DoSetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), (PyCFunction)meth_wxPropertyGrid_DoSetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), (PyCFunction)meth_wxPropertyGrid_DoSetSizeHints, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), (PyCFunction)meth_wxPropertyGrid_DoSetWindowVariant, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoShowPropertyError), (PyCFunction)meth_wxPropertyGrid_DoShowPropertyError, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DoShowPropertyError)},
    {SIP_MLNAME_CAST(sipName_DoThaw), (PyCFunction)meth_wxPropertyGrid_DoThaw, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_DoThaw)},
    {SIP_MLNAME_CAST(sipName_EditorsValueWasModified), meth_wxPropertyGrid_EditorsValueWasModified, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_EditorsValueWasModified)},
    {SIP_MLNAME_CAST(sipName_EditorsValueWasNotModified), meth_wxPropertyGrid_EditorsValueWasNotModified, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_EditorsValueWasNotModified)},
    {SIP_MLNAME_CAST(sipName_EnableCategories), (PyCFunction)meth_wxPropertyGrid_EnableCategories, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_EnableCategories)},
    {SIP_MLNAME_CAST(sipName_EndLabelEdit), (PyCFunction)meth_wxPropertyGrid_EndLabelEdit, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_EndLabelEdit)},
    {SIP_MLNAME_CAST(sipName_EnsureVisible), (PyCFunction)meth_wxPropertyGrid_EnsureVisible, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_EnsureVisible)},
    {SIP_MLNAME_CAST(sipName_FitColumns), meth_wxPropertyGrid_FitColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_FitColumns)},
    {SIP_MLNAME_CAST(sipName_GetCaptionBackgroundColour), meth_wxPropertyGrid_GetCaptionBackgroundColour, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetCaptionBackgroundColour)},
    {SIP_MLNAME_CAST(sipName_GetCaptionFont), meth_wxPropertyGrid_GetCaptionFont, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetCaptionFont)},
    {SIP_MLNAME_CAST(sipName_GetCaptionForegroundColour), meth_wxPropertyGrid_GetCaptionForegroundColour, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetCaptionForegroundColour)},
    {SIP_MLNAME_CAST(sipName_GetCellBackgroundColour), meth_wxPropertyGrid_GetCellBackgroundColour, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetCellBackgroundColour)},
    {SIP_MLNAME_CAST(sipName_GetCellDisabledTextColour), meth_wxPropertyGrid_GetCellDisabledTextColour, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetCellDisabledTextColour)},
    {SIP_MLNAME_CAST(sipName_GetCellTextColour), meth_wxPropertyGrid_GetCellTextColour, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetCellTextColour)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxPropertyGrid_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetColumnCount), meth_wxPropertyGrid_GetColumnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetColumnCount)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), (PyCFunction)meth_wxPropertyGrid_GetDefaultBorder, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), (PyCFunction)meth_wxPropertyGrid_GetDefaultBorderForControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetEditorTextCtrl), meth_wxPropertyGrid_GetEditorTextCtrl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetEditorTextCtrl)},
    {SIP_MLNAME_CAST(sipName_GetEmptySpaceColour), meth_wxPropertyGrid_GetEmptySpaceColour, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetEmptySpaceColour)},
    {SIP_MLNAME_CAST(sipName_GetFontHeight), meth_wxPropertyGrid_GetFontHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetFontHeight)},
    {SIP_MLNAME_CAST(sipName_GetGrid), meth_wxPropertyGrid_GetGrid, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetGrid)},
    {SIP_MLNAME_CAST(sipName_GetImageRect), (PyCFunction)meth_wxPropertyGrid_GetImageRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetImageRect)},
    {SIP_MLNAME_CAST(sipName_GetImageSize), (PyCFunction)meth_wxPropertyGrid_GetImageSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetImageSize)},
    {SIP_MLNAME_CAST(sipName_GetLabelEditor), meth_wxPropertyGrid_GetLabelEditor, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetLabelEditor)},
    {SIP_MLNAME_CAST(sipName_GetLastItem), (PyCFunction)meth_wxPropertyGrid_GetLastItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetLastItem)},
    {SIP_MLNAME_CAST(sipName_GetLineColour), meth_wxPropertyGrid_GetLineColour, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetLineColour)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxPropertyGrid_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetMarginColour), meth_wxPropertyGrid_GetMarginColour, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetMarginColour)},
    {SIP_MLNAME_CAST(sipName_GetPanel), meth_wxPropertyGrid_GetPanel, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetPanel)},
    {SIP_MLNAME_CAST(sipName_GetRoot), meth_wxPropertyGrid_GetRoot, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetRoot)},
    {SIP_MLNAME_CAST(sipName_GetRowHeight), meth_wxPropertyGrid_GetRowHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetRowHeight)},
    {SIP_MLNAME_CAST(sipName_GetSelectedProperty), meth_wxPropertyGrid_GetSelectedProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetSelectedProperty)},
    {SIP_MLNAME_CAST(sipName_GetSelection), meth_wxPropertyGrid_GetSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetSelection)},
    {SIP_MLNAME_CAST(sipName_GetSelectionBackgroundColour), meth_wxPropertyGrid_GetSelectionBackgroundColour, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetSelectionBackgroundColour)},
    {SIP_MLNAME_CAST(sipName_GetSelectionForegroundColour), meth_wxPropertyGrid_GetSelectionForegroundColour, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetSelectionForegroundColour)},
    {SIP_MLNAME_CAST(sipName_GetSplitterPosition), (PyCFunction)meth_wxPropertyGrid_GetSplitterPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetSplitterPosition)},
    {SIP_MLNAME_CAST(sipName_GetStatusBar), meth_wxPropertyGrid_GetStatusBar, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetStatusBar)},
    {SIP_MLNAME_CAST(sipName_GetUncommittedPropertyValue), meth_wxPropertyGrid_GetUncommittedPropertyValue, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetUncommittedPropertyValue)},
    {SIP_MLNAME_CAST(sipName_GetUnspecifiedValueAppearance), meth_wxPropertyGrid_GetUnspecifiedValueAppearance, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetUnspecifiedValueAppearance)},
    {SIP_MLNAME_CAST(sipName_GetUnspecifiedValueText), (PyCFunction)meth_wxPropertyGrid_GetUnspecifiedValueText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetUnspecifiedValueText)},
    {SIP_MLNAME_CAST(sipName_GetVerticalSpacing), meth_wxPropertyGrid_GetVerticalSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_GetVerticalSpacing)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), (PyCFunction)meth_wxPropertyGrid_HasTransparentBackground, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_HitTest), (PyCFunction)meth_wxPropertyGrid_HitTest, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_HitTest)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), (PyCFunction)meth_wxPropertyGrid_InformFirstDirection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxPropertyGrid_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxPropertyGrid_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_InitDialog)},
    {SIP_MLNAME_CAST(sipName_IsAnyModified), meth_wxPropertyGrid_IsAnyModified, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_IsAnyModified)},
    {SIP_MLNAME_CAST(sipName_IsEditorFocused), meth_wxPropertyGrid_IsEditorFocused, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_IsEditorFocused)},
    {SIP_MLNAME_CAST(sipName_IsEditorsValueModified), meth_wxPropertyGrid_IsEditorsValueModified, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_IsEditorsValueModified)},
    {SIP_MLNAME_CAST(sipName_IsFrozen), meth_wxPropertyGrid_IsFrozen, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_IsFrozen)},
    {SIP_MLNAME_CAST(sipName_MakeColumnEditable), (PyCFunction)meth_wxPropertyGrid_MakeColumnEditable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_MakeColumnEditable)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxPropertyGrid_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_OnTLPChanging), (PyCFunction)meth_wxPropertyGrid_OnTLPChanging, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_OnTLPChanging)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), (PyCFunction)meth_wxPropertyGrid_ProcessEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_RefreshEditor), meth_wxPropertyGrid_RefreshEditor, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_RefreshEditor)},
    {SIP_MLNAME_CAST(sipName_RefreshProperty), (PyCFunction)meth_wxPropertyGrid_RefreshProperty, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_RefreshProperty)},
    {SIP_MLNAME_CAST(sipName_RegisterEditorClass), (PyCFunction)meth_wxPropertyGrid_RegisterEditorClass, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_RegisterEditorClass)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), (PyCFunction)meth_wxPropertyGrid_RemoveChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_RemoveFromSelection), (PyCFunction)meth_wxPropertyGrid_RemoveFromSelection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_RemoveFromSelection)},
    {SIP_MLNAME_CAST(sipName_ResetColours), meth_wxPropertyGrid_ResetColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_ResetColours)},
    {SIP_MLNAME_CAST(sipName_ResetColumnSizes), (PyCFunction)meth_wxPropertyGrid_ResetColumnSizes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_ResetColumnSizes)},
    {SIP_MLNAME_CAST(sipName_SelectProperty), (PyCFunction)meth_wxPropertyGrid_SelectProperty, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SelectProperty)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), (PyCFunction)meth_wxPropertyGrid_SendDestroyEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SendDestroyEvent)},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), (PyCFunction)meth_wxPropertyGrid_SetCanFocus, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetCaptionBackgroundColour), (PyCFunction)meth_wxPropertyGrid_SetCaptionBackgroundColour, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetCaptionBackgroundColour)},
    {SIP_MLNAME_CAST(sipName_SetCaptionTextColour), (PyCFunction)meth_wxPropertyGrid_SetCaptionTextColour, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetCaptionTextColour)},
    {SIP_MLNAME_CAST(sipName_SetCellBackgroundColour), (PyCFunction)meth_wxPropertyGrid_SetCellBackgroundColour, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetCellBackgroundColour)},
    {SIP_MLNAME_CAST(sipName_SetCellDisabledTextColour), (PyCFunction)meth_wxPropertyGrid_SetCellDisabledTextColour, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetCellDisabledTextColour)},
    {SIP_MLNAME_CAST(sipName_SetCellTextColour), (PyCFunction)meth_wxPropertyGrid_SetCellTextColour, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetCellTextColour)},
    {SIP_MLNAME_CAST(sipName_SetColumnCount), (PyCFunction)meth_wxPropertyGrid_SetColumnCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetColumnCount)},
    {SIP_MLNAME_CAST(sipName_SetCurrentCategory), (PyCFunction)meth_wxPropertyGrid_SetCurrentCategory, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetCurrentCategory)},
    {SIP_MLNAME_CAST(sipName_SetEmptySpaceColour), (PyCFunction)meth_wxPropertyGrid_SetEmptySpaceColour, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetEmptySpaceColour)},
    {SIP_MLNAME_CAST(sipName_SetLineColour), (PyCFunction)meth_wxPropertyGrid_SetLineColour, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetLineColour)},
    {SIP_MLNAME_CAST(sipName_SetMarginColour), (PyCFunction)meth_wxPropertyGrid_SetMarginColour, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetMarginColour)},
    {SIP_MLNAME_CAST(sipName_SetSelection), (PyCFunction)meth_wxPropertyGrid_SetSelection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetSelection)},
    {SIP_MLNAME_CAST(sipName_SetSelectionBackgroundColour), (PyCFunction)meth_wxPropertyGrid_SetSelectionBackgroundColour, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetSelectionBackgroundColour)},
    {SIP_MLNAME_CAST(sipName_SetSelectionTextColour), (PyCFunction)meth_wxPropertyGrid_SetSelectionTextColour, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetSelectionTextColour)},
    {SIP_MLNAME_CAST(sipName_SetSplitterLeft), (PyCFunction)meth_wxPropertyGrid_SetSplitterLeft, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetSplitterLeft)},
    {SIP_MLNAME_CAST(sipName_SetSplitterPosition), (PyCFunction)meth_wxPropertyGrid_SetSplitterPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetSplitterPosition)},
    {SIP_MLNAME_CAST(sipName_SetUnspecifiedValueAppearance), (PyCFunction)meth_wxPropertyGrid_SetUnspecifiedValueAppearance, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetUnspecifiedValueAppearance)},
    {SIP_MLNAME_CAST(sipName_SetVerticalSpacing), (PyCFunction)meth_wxPropertyGrid_SetVerticalSpacing, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_SetVerticalSpacing)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxPropertyGrid_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_ShowPropertyError), (PyCFunction)meth_wxPropertyGrid_ShowPropertyError, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_ShowPropertyError)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxPropertyGrid_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxPropertyGrid_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), (PyCFunction)meth_wxPropertyGrid_TryAfter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), (PyCFunction)meth_wxPropertyGrid_TryBefore, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGrid_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxPropertyGrid_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_Validate)},
    {SIP_MLNAME_CAST(sipName_WasValueChangedInEvent), meth_wxPropertyGrid_WasValueChangedInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGrid_WasValueChangedInEvent)}
};

sipVariableDef variables_wxPropertyGrid[] = {
    {PropertyVariable, sipName_VerticalSpacing, &methods_wxPropertyGrid[72], &methods_wxPropertyGrid[112], NULL, NULL},
    {PropertyVariable, sipName_UnspecifiedValueText, &methods_wxPropertyGrid[71], NULL, NULL, NULL},
    {PropertyVariable, sipName_UnspecifiedValueAppearance, &methods_wxPropertyGrid[70], &methods_wxPropertyGrid[111], NULL, NULL},
    {PropertyVariable, sipName_UncommittedPropertyValue, &methods_wxPropertyGrid[69], NULL, NULL, NULL},
    {PropertyVariable, sipName_StatusBar, &methods_wxPropertyGrid[68], NULL, NULL, NULL},
    {PropertyVariable, sipName_SplitterPosition, &methods_wxPropertyGrid[67], &methods_wxPropertyGrid[110], NULL, NULL},
    {PropertyVariable, sipName_SelectionForegroundColour, &methods_wxPropertyGrid[66], NULL, NULL, NULL},
    {PropertyVariable, sipName_SelectionBackgroundColour, &methods_wxPropertyGrid[65], &methods_wxPropertyGrid[107], NULL, NULL},
    {PropertyVariable, sipName_Selection, &methods_wxPropertyGrid[64], &methods_wxPropertyGrid[106], NULL, NULL},
    {PropertyVariable, sipName_SelectedProperty, &methods_wxPropertyGrid[63], NULL, NULL, NULL},
    {PropertyVariable, sipName_RowHeight, &methods_wxPropertyGrid[62], NULL, NULL, NULL},
    {PropertyVariable, sipName_Root, &methods_wxPropertyGrid[61], NULL, NULL, NULL},
    {PropertyVariable, sipName_Panel, &methods_wxPropertyGrid[60], NULL, NULL, NULL},
    {PropertyVariable, sipName_MarginColour, &methods_wxPropertyGrid[59], &methods_wxPropertyGrid[105], NULL, NULL},
    {PropertyVariable, sipName_LineColour, &methods_wxPropertyGrid[57], &methods_wxPropertyGrid[104], NULL, NULL},
    {PropertyVariable, sipName_LastItem, &methods_wxPropertyGrid[56], NULL, NULL, NULL},
    {PropertyVariable, sipName_LabelEditor, &methods_wxPropertyGrid[55], NULL, NULL, NULL},
    {PropertyVariable, sipName_ImageSize, &methods_wxPropertyGrid[54], NULL, NULL, NULL},
    {PropertyVariable, sipName_Grid, &methods_wxPropertyGrid[52], NULL, NULL, NULL},
    {PropertyVariable, sipName_FontHeight, &methods_wxPropertyGrid[51], NULL, NULL, NULL},
    {PropertyVariable, sipName_EmptySpaceColour, &methods_wxPropertyGrid[50], &methods_wxPropertyGrid[103], NULL, NULL},
    {PropertyVariable, sipName_EditorTextCtrl, &methods_wxPropertyGrid[49], NULL, NULL, NULL},
    {PropertyVariable, sipName_ColumnCount, &methods_wxPropertyGrid[46], &methods_wxPropertyGrid[101], NULL, NULL},
    {PropertyVariable, sipName_CellTextColour, &methods_wxPropertyGrid[44], &methods_wxPropertyGrid[100], NULL, NULL},
    {PropertyVariable, sipName_CellDisabledTextColour, &methods_wxPropertyGrid[43], &methods_wxPropertyGrid[99], NULL, NULL},
    {PropertyVariable, sipName_CellBackgroundColour, &methods_wxPropertyGrid[42], &methods_wxPropertyGrid[98], NULL, NULL},
    {PropertyVariable, sipName_CaptionForegroundColour, &methods_wxPropertyGrid[41], NULL, NULL, NULL},
    {PropertyVariable, sipName_CaptionFont, &methods_wxPropertyGrid[40], NULL, NULL, NULL},
    {PropertyVariable, sipName_CaptionBackgroundColour, &methods_wxPropertyGrid[39], &methods_wxPropertyGrid[96], NULL, NULL},
};

PyDoc_STRVAR(doc_wxPropertyGrid, "PropertyGrid()\n"
    "PropertyGrid(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=PG_DEFAULT_STYLE, name=PropertyGridNameStr)\n"
    "\n"
    "wxPropertyGrid is a specialized grid for editing properties - in other\n"
    "words name = value pairs.");


sipClassTypeDef sipTypeDef__propgrid_wxPropertyGrid = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxPropertyGrid,
        {0},
        0
    },
    {
        sipNameNr_PropertyGrid,
        {0, 0, 1},
        121, methods_wxPropertyGrid,
        0, 0,
        29, variables_wxPropertyGrid,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxPropertyGrid,
    -1,
    -1,
    supers_wxPropertyGrid,
    0,
    init_type_wxPropertyGrid,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxPropertyGrid,
    0,
    0,
    0,
    release_wxPropertyGrid,
    cast_wxPropertyGrid,
    0,
    0,
    0,
    0,
    0,
    0
};
