# Copyright (c) 2016 Anki, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the file LICENSE.txt or at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Autogenerated python message buffer code.
Source: clad/types/needsSystemTypes.clad
Full command line: ../tools/message-buffers/emitters/Python_emitter.py -C ./src/ -I ../robot/clad/src/ ../coretech/vision/clad/src/ ../coretech/common/clad/src/ -o ../generated/cladPython// clad/types/needsSystemTypes.clad
"""

from __future__ import absolute_import
from __future__ import print_function

def _modify_path():
  import inspect, os, sys
  search_paths = [
    '../..',
    '../../../../tools/message-buffers/support/python',
  ]
  currentpath = os.path.abspath(os.path.dirname(inspect.getfile(inspect.currentframe())))
  for search_path in search_paths:
    search_path = os.path.normpath(os.path.abspath(os.path.realpath(os.path.join(currentpath, search_path))))
    if search_path not in sys.path:
      sys.path.insert(0, search_path)
_modify_path()

import msgbuffers

Anki = msgbuffers.Namespace()
Anki.Cozmo = msgbuffers.Namespace()

class NeedId(object):
  "Automatically-generated int_32 enumeration."
  Repair = 0
  Energy = 1
  Play   = 2
  Count  = 3

Anki.Cozmo.NeedId = NeedId
del NeedId


class NeedBracketId(object):
  "Automatically-generated int_32 enumeration."
  Full     = 0
  Normal   = 1
  Warning  = 2
  Critical = 3
  Count    = 4

Anki.Cozmo.NeedBracketId = NeedBracketId
del NeedBracketId


class RepairablePartId(object):
  "Automatically-generated int_32 enumeration."
  Head   = 0
  Lift   = 1
  Treads = 2
  Count  = 3

Anki.Cozmo.RepairablePartId = RepairablePartId
del RepairablePartId


class NeedsActionId(object):
  "Automatically-generated int_32 enumeration."
  RepairHead   = 0
  RepairLift   = 1
  RepairTreads = 2
  FeedRed      = 20
  FeedBlue     = 21
  FeedGreen    = 22
  Count        = 23

Anki.Cozmo.NeedsActionId = NeedsActionId
del NeedsActionId


class NeedsRewardType(object):
  "Automatically-generated int_32 enumeration."
  Sparks      = 0
  Unlock      = 1
  Song        = 2
  MemoryBadge = 3
  Count       = 4

Anki.Cozmo.NeedsRewardType = NeedsRewardType
del NeedsRewardType


class NeedsReward(object):
  "Generated message-passing structure."

  __slots__ = (
    '_rewardType', # Anki.Cozmo.NeedsRewardType
    '_data',       # int_32
  )

  @property
  def rewardType(self):
    "Anki.Cozmo.NeedsRewardType rewardType struct property."
    return self._rewardType

  @rewardType.setter
  def rewardType(self, value):
    self._rewardType = msgbuffers.validate_integer(
      'NeedsReward.rewardType', value, -2147483648, 2147483647)

  @property
  def data(self):
    "int_32 data struct property."
    return self._data

  @data.setter
  def data(self, value):
    self._data = msgbuffers.validate_integer(
      'NeedsReward.data', value, -2147483648, 2147483647)

  def __init__(self, rewardType=Anki.Cozmo.NeedsRewardType.Sparks, data=0):
    self.rewardType = rewardType
    self.data = data

  @classmethod
  def unpack(cls, buffer):
    "Reads a new NeedsReward from the given buffer."
    reader = msgbuffers.BinaryReader(buffer)
    value = cls.unpack_from(reader)
    if reader.tell() != len(reader):
      raise msgbuffers.ReadError(
        ('NeedsReward.unpack received a buffer of length {length}, ' +
        'but only {position} bytes were read.').format(
        length=len(reader), position=reader.tell()))
    return value

  @classmethod
  def unpack_from(cls, reader):
    "Reads a new NeedsReward from the given BinaryReader."
    _rewardType = reader.read('i')
    _data = reader.read('i')
    return cls(_rewardType, _data)

  def pack(self):
    "Writes the current NeedsReward, returning bytes."
    writer = msgbuffers.BinaryWriter()
    self.pack_to(writer)
    return writer.dumps()

  def pack_to(self, writer):
    "Writes the current NeedsReward to the given BinaryWriter."
    writer.write(self._rewardType, 'i')
    writer.write(self._data, 'i')

  def __eq__(self, other):
    if type(self) is type(other):
      return (self._rewardType == other._rewardType and
        self._data == other._data)
    else:
      return NotImplemented

  def __ne__(self, other):
    if type(self) is type(other):
      return not self.__eq__(other)
    else:
      return NotImplemented

  def __len__(self):
    return (msgbuffers.size(self._rewardType, 'i') +
      msgbuffers.size(self._data, 'i'))

  def __str__(self):
    return '{type}(rewardType={rewardType}, data={data})'.format(
      type=type(self).__name__,
      rewardType=self._rewardType,
      data=self._data)

  def __repr__(self):
    return '{type}(rewardType={rewardType}, data={data})'.format(
      type=type(self).__name__,
      rewardType=repr(self._rewardType),
      data=repr(self._data))

Anki.Cozmo.NeedsReward = NeedsReward
del NeedsReward


