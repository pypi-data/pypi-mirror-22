# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: neuromwapi.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='neuromwapi.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x10neuromwapi.proto\"\xaf\x01\n\x10\x43ognitionRequest\x12\x14\n\x0c\x61rch_address\x18\x01 \x01(\t\x12\x15\n\rmodel_address\x18\x02 \x01(\t\x12\x14\n\x0c\x64\x61ta_address\x18\x03 \x01(\t\x12\x15\n\rsamples_count\x18\x04 \x01(\r\x12\x0f\n\x07pub_key\x18\x05 \x01(\t\x12\x16\n\x0esigned_message\x18\x06 \x01(\t\x12\x18\n\x10\x63ontract_address\x18\x07 \x01(\t\"6\n\x0c\x41\x63\x63\x65ptedTask\x12\x0f\n\x07task_id\x18\x01 \x01(\t\x12\x15\n\rtime_estimate\x18\x02 \x01(\r\"?\n\x0c\x44\x65\x63linedTask\x12\x1e\n\x06reason\x18\x01 \x01(\x0e\x32\x0e.DeclineReason\x12\x0f\n\x07message\x18\x02 \x01(\t\"{\n\x11\x43ognitionResponse\x12\x10\n\x08\x61\x63\x63\x65pted\x18\x01 \x01(\x08\x12\"\n\ttask_info\x18\x02 \x01(\x0b\x32\r.AcceptedTaskH\x00\x12%\n\x0c\x64\x65\x63line_info\x18\x03 \x01(\x0b\x32\r.DeclinedTaskH\x00\x42\t\n\x07payload\"C\n\x0f\x43ognitionResult\x12\x13\n\x0bres_address\x18\x01 \x01(\t\x12\x15\n\rsamples_count\x18\x02 \x01(\rJ\x04\x08\x03\x10\x05\"\x1f\n\x0c\x42\x61tchRequest\x12\x0f\n\x07task_id\x18\x01 \x01(\t\"4\n\x0b\x42\x61tchStatus\x12\x0e\n\x06\x61\x63tive\x18\x01 \x01(\x08\x12\x15\n\rtime_estimate\x18\x02 \x01(\r\"\"\n\x0f\x43ognitionStatus\x12\x0f\n\x07success\x18\x01 \x01(\x08\"\x1a\n\tPeersList\x12\r\n\x05peers\x18\x01 \x03(\t\"I\n\x0bVersionInfo\x12\r\n\x05major\x18\x01 \x01(\r\x12\r\n\x05minor\x18\x02 \x01(\r\x12\r\n\x05patch\x18\x03 \x01(\r\x12\r\n\x05\x61gent\x18\x04 \x01(\t*q\n\rDeclineReason\x12\x08\n\x04\x42USY\x10\x00\x12\x12\n\x0eINTERNAL_ERROR\x10\x01\x12\x0e\n\nUNVERIFIED\x10\x02\x12\x11\n\rBROKEN_MODERL\x10\x03\x12\x0f\n\x0b\x42ROKEN_DATA\x10\x04\x12\x0e\n\nIPFS_ERROR\x10\x05\x32\xc2\x01\n\x06Worker\x12$\n\x04ping\x12\x0c.VersionInfo\x1a\x0c.VersionInfo\"\x00\x12)\n\rsuggest_peers\x12\n.PeersList\x1a\n.PeersList\"\x00\x12\x38\n\rcognite_batch\x12\x11.CognitionRequest\x1a\x12.CognitionResponse\"\x00\x12-\n\x0c\x62\x61tch_status\x12\r.BatchRequest\x1a\x0c.BatchStatus\"\x00\x32\x96\x01\n\nMasternode\x12$\n\x04pong\x12\x0c.VersionInfo\x1a\x0c.VersionInfo\"\x00\x12)\n\rsuggest_peers\x12\n.PeersList\x1a\n.PeersList\"\x00\x12\x37\n\x0f\x62\x61tch_completed\x12\x10.CognitionResult\x1a\x10.CognitionStatus\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_DECLINEREASON = _descriptor.EnumDescriptor(
  name='DeclineReason',
  full_name='DeclineReason',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='BUSY', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INTERNAL_ERROR', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='UNVERIFIED', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BROKEN_MODERL', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BROKEN_DATA', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPFS_ERROR', index=5, number=5,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=739,
  serialized_end=852,
)
_sym_db.RegisterEnumDescriptor(_DECLINEREASON)

DeclineReason = enum_type_wrapper.EnumTypeWrapper(_DECLINEREASON)
BUSY = 0
INTERNAL_ERROR = 1
UNVERIFIED = 2
BROKEN_MODERL = 3
BROKEN_DATA = 4
IPFS_ERROR = 5



_COGNITIONREQUEST = _descriptor.Descriptor(
  name='CognitionRequest',
  full_name='CognitionRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='arch_address', full_name='CognitionRequest.arch_address', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='model_address', full_name='CognitionRequest.model_address', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data_address', full_name='CognitionRequest.data_address', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='samples_count', full_name='CognitionRequest.samples_count', index=3,
      number=4, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='pub_key', full_name='CognitionRequest.pub_key', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='signed_message', full_name='CognitionRequest.signed_message', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='contract_address', full_name='CognitionRequest.contract_address', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=21,
  serialized_end=196,
)


_ACCEPTEDTASK = _descriptor.Descriptor(
  name='AcceptedTask',
  full_name='AcceptedTask',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='task_id', full_name='AcceptedTask.task_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='time_estimate', full_name='AcceptedTask.time_estimate', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=198,
  serialized_end=252,
)


_DECLINEDTASK = _descriptor.Descriptor(
  name='DeclinedTask',
  full_name='DeclinedTask',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='reason', full_name='DeclinedTask.reason', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='DeclinedTask.message', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=254,
  serialized_end=317,
)


_COGNITIONRESPONSE = _descriptor.Descriptor(
  name='CognitionResponse',
  full_name='CognitionResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='accepted', full_name='CognitionResponse.accepted', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='task_info', full_name='CognitionResponse.task_info', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='decline_info', full_name='CognitionResponse.decline_info', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='payload', full_name='CognitionResponse.payload',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=319,
  serialized_end=442,
)


_COGNITIONRESULT = _descriptor.Descriptor(
  name='CognitionResult',
  full_name='CognitionResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='res_address', full_name='CognitionResult.res_address', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='samples_count', full_name='CognitionResult.samples_count', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=444,
  serialized_end=511,
)


_BATCHREQUEST = _descriptor.Descriptor(
  name='BatchRequest',
  full_name='BatchRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='task_id', full_name='BatchRequest.task_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=513,
  serialized_end=544,
)


_BATCHSTATUS = _descriptor.Descriptor(
  name='BatchStatus',
  full_name='BatchStatus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='active', full_name='BatchStatus.active', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='time_estimate', full_name='BatchStatus.time_estimate', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=546,
  serialized_end=598,
)


_COGNITIONSTATUS = _descriptor.Descriptor(
  name='CognitionStatus',
  full_name='CognitionStatus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='success', full_name='CognitionStatus.success', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=600,
  serialized_end=634,
)


_PEERSLIST = _descriptor.Descriptor(
  name='PeersList',
  full_name='PeersList',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='peers', full_name='PeersList.peers', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=636,
  serialized_end=662,
)


_VERSIONINFO = _descriptor.Descriptor(
  name='VersionInfo',
  full_name='VersionInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='major', full_name='VersionInfo.major', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='minor', full_name='VersionInfo.minor', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='patch', full_name='VersionInfo.patch', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='agent', full_name='VersionInfo.agent', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=664,
  serialized_end=737,
)

_DECLINEDTASK.fields_by_name['reason'].enum_type = _DECLINEREASON
_COGNITIONRESPONSE.fields_by_name['task_info'].message_type = _ACCEPTEDTASK
_COGNITIONRESPONSE.fields_by_name['decline_info'].message_type = _DECLINEDTASK
_COGNITIONRESPONSE.oneofs_by_name['payload'].fields.append(
  _COGNITIONRESPONSE.fields_by_name['task_info'])
_COGNITIONRESPONSE.fields_by_name['task_info'].containing_oneof = _COGNITIONRESPONSE.oneofs_by_name['payload']
_COGNITIONRESPONSE.oneofs_by_name['payload'].fields.append(
  _COGNITIONRESPONSE.fields_by_name['decline_info'])
_COGNITIONRESPONSE.fields_by_name['decline_info'].containing_oneof = _COGNITIONRESPONSE.oneofs_by_name['payload']
DESCRIPTOR.message_types_by_name['CognitionRequest'] = _COGNITIONREQUEST
DESCRIPTOR.message_types_by_name['AcceptedTask'] = _ACCEPTEDTASK
DESCRIPTOR.message_types_by_name['DeclinedTask'] = _DECLINEDTASK
DESCRIPTOR.message_types_by_name['CognitionResponse'] = _COGNITIONRESPONSE
DESCRIPTOR.message_types_by_name['CognitionResult'] = _COGNITIONRESULT
DESCRIPTOR.message_types_by_name['BatchRequest'] = _BATCHREQUEST
DESCRIPTOR.message_types_by_name['BatchStatus'] = _BATCHSTATUS
DESCRIPTOR.message_types_by_name['CognitionStatus'] = _COGNITIONSTATUS
DESCRIPTOR.message_types_by_name['PeersList'] = _PEERSLIST
DESCRIPTOR.message_types_by_name['VersionInfo'] = _VERSIONINFO
DESCRIPTOR.enum_types_by_name['DeclineReason'] = _DECLINEREASON

CognitionRequest = _reflection.GeneratedProtocolMessageType('CognitionRequest', (_message.Message,), dict(
  DESCRIPTOR = _COGNITIONREQUEST,
  __module__ = 'messages'
  # @@protoc_insertion_point(class_scope:CognitionRequest)
  ))
_sym_db.RegisterMessage(CognitionRequest)

AcceptedTask = _reflection.GeneratedProtocolMessageType('AcceptedTask', (_message.Message,), dict(
  DESCRIPTOR = _ACCEPTEDTASK,
  __module__ = 'messages'
  # @@protoc_insertion_point(class_scope:AcceptedTask)
  ))
_sym_db.RegisterMessage(AcceptedTask)

DeclinedTask = _reflection.GeneratedProtocolMessageType('DeclinedTask', (_message.Message,), dict(
  DESCRIPTOR = _DECLINEDTASK,
  __module__ = 'messages'
  # @@protoc_insertion_point(class_scope:DeclinedTask)
  ))
_sym_db.RegisterMessage(DeclinedTask)

CognitionResponse = _reflection.GeneratedProtocolMessageType('CognitionResponse', (_message.Message,), dict(
  DESCRIPTOR = _COGNITIONRESPONSE,
  __module__ = 'messages'
  # @@protoc_insertion_point(class_scope:CognitionResponse)
  ))
_sym_db.RegisterMessage(CognitionResponse)

CognitionResult = _reflection.GeneratedProtocolMessageType('CognitionResult', (_message.Message,), dict(
  DESCRIPTOR = _COGNITIONRESULT,
  __module__ = 'messages'
  # @@protoc_insertion_point(class_scope:CognitionResult)
  ))
_sym_db.RegisterMessage(CognitionResult)

BatchRequest = _reflection.GeneratedProtocolMessageType('BatchRequest', (_message.Message,), dict(
  DESCRIPTOR = _BATCHREQUEST,
  __module__ = 'messages'
  # @@protoc_insertion_point(class_scope:BatchRequest)
  ))
_sym_db.RegisterMessage(BatchRequest)

BatchStatus = _reflection.GeneratedProtocolMessageType('BatchStatus', (_message.Message,), dict(
  DESCRIPTOR = _BATCHSTATUS,
  __module__ = 'messages'
  # @@protoc_insertion_point(class_scope:BatchStatus)
  ))
_sym_db.RegisterMessage(BatchStatus)

CognitionStatus = _reflection.GeneratedProtocolMessageType('CognitionStatus', (_message.Message,), dict(
  DESCRIPTOR = _COGNITIONSTATUS,
  __module__ = 'messages'
  # @@protoc_insertion_point(class_scope:CognitionStatus)
  ))
_sym_db.RegisterMessage(CognitionStatus)

PeersList = _reflection.GeneratedProtocolMessageType('PeersList', (_message.Message,), dict(
  DESCRIPTOR = _PEERSLIST,
  __module__ = 'messages'
  # @@protoc_insertion_point(class_scope:PeersList)
  ))
_sym_db.RegisterMessage(PeersList)

VersionInfo = _reflection.GeneratedProtocolMessageType('VersionInfo', (_message.Message,), dict(
  DESCRIPTOR = _VERSIONINFO,
  __module__ = 'messages'
  # @@protoc_insertion_point(class_scope:VersionInfo)
  ))
_sym_db.RegisterMessage(VersionInfo)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class WorkerStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.ping = channel.unary_unary(
          '/Worker/ping',
          request_serializer=VersionInfo.SerializeToString,
          response_deserializer=VersionInfo.FromString,
          )
      self.suggest_peers = channel.unary_unary(
          '/Worker/suggest_peers',
          request_serializer=PeersList.SerializeToString,
          response_deserializer=PeersList.FromString,
          )
      self.cognite_batch = channel.unary_unary(
          '/Worker/cognite_batch',
          request_serializer=CognitionRequest.SerializeToString,
          response_deserializer=CognitionResponse.FromString,
          )
      self.batch_status = channel.unary_unary(
          '/Worker/batch_status',
          request_serializer=BatchRequest.SerializeToString,
          response_deserializer=BatchStatus.FromString,
          )


  class WorkerServicer(object):

    def ping(self, request, context):
      """ping accepts masternode version number and returns worker version number
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def suggest_peers(self, request, context):
      """Asks for peer worker suggestions for a given known list of peers
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def cognite_batch(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def batch_status(self, request, context):
      """batch_status accepts task_id returned in CognitionRequest structure
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_WorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ping': grpc.unary_unary_rpc_method_handler(
            servicer.ping,
            request_deserializer=VersionInfo.FromString,
            response_serializer=VersionInfo.SerializeToString,
        ),
        'suggest_peers': grpc.unary_unary_rpc_method_handler(
            servicer.suggest_peers,
            request_deserializer=PeersList.FromString,
            response_serializer=PeersList.SerializeToString,
        ),
        'cognite_batch': grpc.unary_unary_rpc_method_handler(
            servicer.cognite_batch,
            request_deserializer=CognitionRequest.FromString,
            response_serializer=CognitionResponse.SerializeToString,
        ),
        'batch_status': grpc.unary_unary_rpc_method_handler(
            servicer.batch_status,
            request_deserializer=BatchRequest.FromString,
            response_serializer=BatchStatus.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Worker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class MasternodeStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.pong = channel.unary_unary(
          '/Masternode/pong',
          request_serializer=VersionInfo.SerializeToString,
          response_deserializer=VersionInfo.FromString,
          )
      self.suggest_peers = channel.unary_unary(
          '/Masternode/suggest_peers',
          request_serializer=PeersList.SerializeToString,
          response_deserializer=PeersList.FromString,
          )
      self.batch_completed = channel.unary_unary(
          '/Masternode/batch_completed',
          request_serializer=CognitionResult.SerializeToString,
          response_deserializer=CognitionStatus.FromString,
          )


  class MasternodeServicer(object):

    def pong(self, request, context):
      """pong accepts masternode version number and returns worker version number
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def suggest_peers(self, request, context):
      """Asks for peer masternode suggestions for a given known list of peers
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def batch_completed(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_MasternodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'pong': grpc.unary_unary_rpc_method_handler(
            servicer.pong,
            request_deserializer=VersionInfo.FromString,
            response_serializer=VersionInfo.SerializeToString,
        ),
        'suggest_peers': grpc.unary_unary_rpc_method_handler(
            servicer.suggest_peers,
            request_deserializer=PeersList.FromString,
            response_serializer=PeersList.SerializeToString,
        ),
        'batch_completed': grpc.unary_unary_rpc_method_handler(
            servicer.batch_completed,
            request_deserializer=CognitionResult.FromString,
            response_serializer=CognitionStatus.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Masternode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaWorkerServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def ping(self, request, context):
      """ping accepts masternode version number and returns worker version number
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def suggest_peers(self, request, context):
      """Asks for peer worker suggestions for a given known list of peers
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def cognite_batch(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def batch_status(self, request, context):
      """batch_status accepts task_id returned in CognitionRequest structure
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaWorkerStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def ping(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """ping accepts masternode version number and returns worker version number
      """
      raise NotImplementedError()
    ping.future = None
    def suggest_peers(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Asks for peer worker suggestions for a given known list of peers
      """
      raise NotImplementedError()
    suggest_peers.future = None
    def cognite_batch(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    cognite_batch.future = None
    def batch_status(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """batch_status accepts task_id returned in CognitionRequest structure
      """
      raise NotImplementedError()
    batch_status.future = None


  def beta_create_Worker_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('Worker', 'batch_status'): BatchRequest.FromString,
      ('Worker', 'cognite_batch'): CognitionRequest.FromString,
      ('Worker', 'ping'): VersionInfo.FromString,
      ('Worker', 'suggest_peers'): PeersList.FromString,
    }
    response_serializers = {
      ('Worker', 'batch_status'): BatchStatus.SerializeToString,
      ('Worker', 'cognite_batch'): CognitionResponse.SerializeToString,
      ('Worker', 'ping'): VersionInfo.SerializeToString,
      ('Worker', 'suggest_peers'): PeersList.SerializeToString,
    }
    method_implementations = {
      ('Worker', 'batch_status'): face_utilities.unary_unary_inline(servicer.batch_status),
      ('Worker', 'cognite_batch'): face_utilities.unary_unary_inline(servicer.cognite_batch),
      ('Worker', 'ping'): face_utilities.unary_unary_inline(servicer.ping),
      ('Worker', 'suggest_peers'): face_utilities.unary_unary_inline(servicer.suggest_peers),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Worker_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('Worker', 'batch_status'): BatchRequest.SerializeToString,
      ('Worker', 'cognite_batch'): CognitionRequest.SerializeToString,
      ('Worker', 'ping'): VersionInfo.SerializeToString,
      ('Worker', 'suggest_peers'): PeersList.SerializeToString,
    }
    response_deserializers = {
      ('Worker', 'batch_status'): BatchStatus.FromString,
      ('Worker', 'cognite_batch'): CognitionResponse.FromString,
      ('Worker', 'ping'): VersionInfo.FromString,
      ('Worker', 'suggest_peers'): PeersList.FromString,
    }
    cardinalities = {
      'batch_status': cardinality.Cardinality.UNARY_UNARY,
      'cognite_batch': cardinality.Cardinality.UNARY_UNARY,
      'ping': cardinality.Cardinality.UNARY_UNARY,
      'suggest_peers': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'Worker', cardinalities, options=stub_options)


  class BetaMasternodeServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def pong(self, request, context):
      """pong accepts masternode version number and returns worker version number
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def suggest_peers(self, request, context):
      """Asks for peer masternode suggestions for a given known list of peers
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def batch_completed(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaMasternodeStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def pong(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """pong accepts masternode version number and returns worker version number
      """
      raise NotImplementedError()
    pong.future = None
    def suggest_peers(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Asks for peer masternode suggestions for a given known list of peers
      """
      raise NotImplementedError()
    suggest_peers.future = None
    def batch_completed(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    batch_completed.future = None


  def beta_create_Masternode_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('Masternode', 'batch_completed'): CognitionResult.FromString,
      ('Masternode', 'pong'): VersionInfo.FromString,
      ('Masternode', 'suggest_peers'): PeersList.FromString,
    }
    response_serializers = {
      ('Masternode', 'batch_completed'): CognitionStatus.SerializeToString,
      ('Masternode', 'pong'): VersionInfo.SerializeToString,
      ('Masternode', 'suggest_peers'): PeersList.SerializeToString,
    }
    method_implementations = {
      ('Masternode', 'batch_completed'): face_utilities.unary_unary_inline(servicer.batch_completed),
      ('Masternode', 'pong'): face_utilities.unary_unary_inline(servicer.pong),
      ('Masternode', 'suggest_peers'): face_utilities.unary_unary_inline(servicer.suggest_peers),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Masternode_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('Masternode', 'batch_completed'): CognitionResult.SerializeToString,
      ('Masternode', 'pong'): VersionInfo.SerializeToString,
      ('Masternode', 'suggest_peers'): PeersList.SerializeToString,
    }
    response_deserializers = {
      ('Masternode', 'batch_completed'): CognitionStatus.FromString,
      ('Masternode', 'pong'): VersionInfo.FromString,
      ('Masternode', 'suggest_peers'): PeersList.FromString,
    }
    cardinalities = {
      'batch_completed': cardinality.Cardinality.UNARY_UNARY,
      'pong': cardinality.Cardinality.UNARY_UNARY,
      'suggest_peers': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'Masternode', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
