

.. _sphx_glr_auto_gallery_plot_rasterio.py:


.. _recipes.rasterio:

=================================
Parsing rasterio's geocoordinates
=================================


Converting a projection's cartesian coordinates into 2D longitudes and
latitudes.

These new coordinates might be handy for plotting and indexing, but it should
be kept in mind that a grid which is regular in projection coordinates will
likely be irregular in lon/lat. It is often recommended to work in the data's
original map projection.




.. code-block:: pytb

    Traceback (most recent call last):
      File "/Users/shoyer/conda/envs/xarray-dev/lib/python3.5/site-packages/sphinx_gallery/gen_rst.py", line 472, in execute_code_block
        exec(code_block, example_globals)
      File "<string>", line 8, in <module>
      File "/Users/shoyer/conda/envs/xarray-dev/lib/python3.5/site-packages/rasterio/__init__.py", line 16, in <module>
        from rasterio._base import gdal_version
    ImportError: dlopen(/Users/shoyer/conda/envs/xarray-dev/lib/python3.5/site-packages/rasterio/_base.cpython-35m-darwin.so, 2): Library not loaded: @rpath/libjpeg.8.dylib
      Referenced from: /Users/shoyer/conda/envs/xarray-dev/lib/libnetcdf.11.dylib
      Reason: image not found





.. code-block:: python


    import os
    import urllib.request
    import numpy as np
    import xarray as xr
    import cartopy.crs as ccrs
    import matplotlib.pyplot as plt
    from rasterio.warp import transform


    # Download the file from rasterio's repository
    url = 'https://github.com/mapbox/rasterio/raw/master/tests/data/RGB.byte.tif'
    urllib.request.urlretrieve(url, 'RGB.byte.tif')

    # Read the data
    da = xr.open_rasterio('RGB.byte.tif')

    # Compute the lon/lat coordinates with rasterio.warp.transform
    ny, nx = len(da['y']), len(da['x'])
    x, y = np.meshgrid(da['x'], da['y'])

    # Rasterio works with 1D arrays
    lon, lat = transform(da.crs, {'init': 'EPSG:4326'},
                         x.flatten(), y.flatten())
    lon = np.asarray(lon).reshape((ny, nx))
    lat = np.asarray(lat).reshape((ny, nx))
    da.coords['lon'] = (('y', 'x'), lon)
    da.coords['lat'] = (('y', 'x'), lat)

    # Compute a greyscale out of the rgb image
    greyscale = da.mean(dim='band')

    # Plot on a map
    ax = plt.subplot(projection=ccrs.PlateCarree())
    greyscale.plot(ax=ax, x='lon', y='lat', transform=ccrs.PlateCarree(),
                   cmap='Greys_r', add_colorbar=False)
    ax.coastlines('10m', color='r')
    plt.show()

    # Delete the file
    os.remove('RGB.byte.tif')

**Total running time of the script:** ( 0 minutes  0.000 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_rasterio.py <plot_rasterio.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_rasterio.ipynb <plot_rasterio.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
