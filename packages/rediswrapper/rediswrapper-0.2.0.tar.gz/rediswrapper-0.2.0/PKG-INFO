Metadata-Version: 1.1
Name: rediswrapper
Version: 0.2.0
Summary: Pythonic wrapper for Redis Client.
Home-page: https://github.com/frostming/rediswrapper
Author: Frost Ming
Author-email: mianghong@gmail.com
License: MIT
Description: # Redis Wrapper
        > A Pythonic Wrapper of Redis Client
        
        [![PyPI](https://img.shields.io/pypi/pyversions/rediswrapper.svg)](https://pypi.python.org/pypi/rediswrapper)
        [![Build Status](https://travis-ci.org/frostming/RedisDict.svg?branch=master)](https://travis-ci.org/frostming/RedisDict)
        [![Coverage Status](https://coveralls.io/repos/github/frostming/rediswrapper/badge.svg?branch=master)](https://coveralls.io/github/frostming/rediswrapper?branch=master)
        
        rediswrapper is a pythonic wrapper of Redis Client for end users. The whole storage
         acts like a python dict as well as its child storage values.
        
        ## Installation
        **From PyPI:**
        ```bash
        pip install rediswrapper
        ```
        **From GitHub**
        ```bash
        git clone https://github.com/frostming/rediswrapper
        cd rediswrapper
        python setup.py install
        ```
        
        ## Usage
        ```python
        >>> import rediswrapper
        >>> redis = rediswrapper.RedisDict()
        # String value
        >>> redis['a'] = 'hello'
        # int value
        >>> redis['b'] = 2
        >>> dict(redis)
        {'a': 'hello', 'b': 2}
        # Picklable object
        >>> import datetime
        >>> redis['c'] = datetime.datetime.now()
        # List value
        >>> redis['d'] = range(5)
        >>> redis['d'].append(0)
        >>> redis['d']
        ListType value([0, 1, 2, 3, 4, 0])
        # Hash value
        >>> redis['e'] = {'a': 1, 'b': 2}
        >>> redis['e'].get('a')
        1
        # Set value
        >>> redis['f'] = set([1, 2])
        >>> redis['f'].add(3)
        >>> redis['f']
        SetType value([1, 2, 3])
        ```
        RedisDict will try to serialize non-sting values and store them in redis and
        unserialize them when fetching back.
        
        All redis value types are mocked with respective python objects and support all
        standard methods as the builtin types.
        
        To inspect those value types, one should use the ABCs defined in `collections`
        module.
        ```python
        >>> from collections import Mapping
        >>> isinstance(redis['e'], Mapping)
        True
        ```
        
Keywords: redis client mock
Platform: UNKNOWN
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Development Status :: 3 - Alpha
Classifier: License :: OSI Approved :: MIT License
