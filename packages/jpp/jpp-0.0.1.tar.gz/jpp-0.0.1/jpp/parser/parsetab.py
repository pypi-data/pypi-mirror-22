
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMPARISON_OPBITWISE_OPSleftBIT_SHIFT_OPSleftPLUSMINUSleftMUL_OPleftPOWrightUMINUSINVERTINTEGER STRING_LITERAL COLON NAME COMMA LCURL RCURL LBRAC RBRAC LPAREN RPAREN DOT SEMICOLON BOOLEAN MINUS COMPARISON_OP PLUS MUL_OP BIT_SHIFT_OPS BITWISE_OPS INVERT POW FUNC EXTENDS IMPORT LOCAL IMPORTED USER_INPUT\n        start : doc post_parsing\n        \n        doc : dict_def\n        \n        doc : global_stmts dict_def\n        \n        global_stmts : global_stmt SEMICOLON\n                     | global_stmt SEMICOLON global_stmts\n        \n        global_stmt : import_stmt\n        \n        import_stmt : IMPORT dotted_name\n        \n        dotted_name : NAME\n                    | NAME DOT dotted_name\n        \n        dict_def : empty_dict_def\n                 | non_empty_dict_def\n        \n        empty_dict_def : LCURL RCURL\n        \n        non_empty_dict_def : LCURL dict_entries RCURL\n        \n        dict_entries : dict_entry\n                     | dict_entry COMMA\n                     | dict_entry COMMA dict_entries\n        \n        dict_entry : dict_key COLON dict_val\n        \n        dict_entry : dict_key EXTENDS dict_key COLON dict_def\n        \n        dict_key : expression\n        \n        literal  : STRING_LITERAL\n                 | BOOLEAN\n                 | number\n                 | ref\n        \n        expression : literal\n        \n        expression : LPAREN expression RPAREN\n        \n        expression : expression COMPARISON_OP expression\n                   | expression BITWISE_OPS expression\n                   | expression BIT_SHIFT_OPS expression\n                   | expression PLUS expression\n                   | expression MINUS expression\n                   | expression MUL_OP expression\n                   | expression POW expression\n        \n        expression : INVERT expression\n        \n        expression : MINUS expression %prec UMINUS\n        \n        expression : FUNC LPAREN expression RPAREN\n        \n        ref : LOCAL lookup\n        \n        ref : IMPORTED lookup\n        \n        ref : USER_INPUT lookup\n        \n        lookup : LBRAC dict_key RBRAC\n               | LBRAC dict_key RBRAC lookup\n        \n        dict_val : dict_key\n                 | dict_def\n                 | list_def\n        \n        list_def : LBRAC RBRAC\n                 | LBRAC list_entries RBRAC\n        \n        list_entries : dict_val\n                     | dict_val COMMA\n                     | dict_val COMMA list_entries\n        \n        number : INTEGER\n        \n        number : INTEGER DOT INTEGER\n        \n        post_parsing :\n        '
    
_lr_action_items = {'LCURL':([0,4,13,34,37,61,78,82,],[8,8,-4,-5,8,8,8,8,]),'IMPORT':([0,13,],[10,10,]),'$end':([1,2,3,5,6,11,12,14,35,],[0,-51,-2,-10,-11,-1,-3,-12,-13,]),'COMMA':([5,6,14,16,18,19,24,25,26,27,28,35,47,48,51,53,54,57,58,59,60,63,64,65,66,67,68,69,70,72,75,77,79,80,81,83,84,],[-10,-11,-12,36,-19,-24,-20,-21,-22,-23,-49,-13,-34,-33,-36,-37,-38,-41,-17,-42,-43,-26,-27,-28,-29,-30,-31,-32,-25,-50,-44,82,-35,-39,-45,-18,-40,]),'RCURL':([5,6,8,14,15,16,18,19,24,25,26,27,28,35,36,47,48,51,53,54,56,57,58,59,60,63,64,65,66,67,68,69,70,72,75,79,80,81,83,84,],[-10,-11,14,-12,35,-14,-19,-24,-20,-21,-22,-23,-49,-13,-15,-34,-33,-36,-37,-38,-16,-41,-17,-42,-43,-26,-27,-28,-29,-30,-31,-32,-25,-50,-44,-35,-39,-45,-18,-40,]),'RBRAC':([5,6,14,18,19,24,25,26,27,28,35,47,48,51,53,54,57,59,60,61,63,64,65,66,67,68,69,70,72,73,75,76,77,79,80,81,82,84,85,],[-10,-11,-12,-19,-24,-20,-21,-22,-23,-49,-13,-34,-33,-36,-37,-38,-41,-42,-43,75,-26,-27,-28,-29,-30,-31,-32,-25,-50,80,-44,81,-46,-35,-39,-45,-47,-40,-48,]),'SEMICOLON':([7,9,32,33,74,],[13,-6,-7,-8,-9,]),'LPAREN':([8,20,21,22,23,36,37,38,39,40,41,42,43,44,45,49,52,61,82,],[20,20,20,20,49,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'INVERT':([8,20,21,22,36,37,38,39,40,41,42,43,44,45,49,52,61,82,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'MINUS':([8,18,19,20,21,22,24,25,26,27,28,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,61,63,64,65,66,67,68,69,70,71,72,79,80,82,84,],[21,43,-24,21,21,21,-20,-21,-22,-23,-49,21,21,21,21,21,21,21,21,21,21,43,-34,-33,21,-36,21,-37,-38,21,43,43,43,-29,-30,-31,-32,-25,43,-50,-35,-39,21,-40,]),'FUNC':([8,20,21,22,36,37,38,39,40,41,42,43,44,45,49,52,61,82,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'STRING_LITERAL':([8,20,21,22,36,37,38,39,40,41,42,43,44,45,49,52,61,82,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'BOOLEAN':([8,20,21,22,36,37,38,39,40,41,42,43,44,45,49,52,61,82,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'INTEGER':([8,20,21,22,36,37,38,39,40,41,42,43,44,45,49,50,52,61,82,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,72,28,28,28,]),'LOCAL':([8,20,21,22,36,37,38,39,40,41,42,43,44,45,49,52,61,82,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'IMPORTED':([8,20,21,22,36,37,38,39,40,41,42,43,44,45,49,52,61,82,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'USER_INPUT':([8,20,21,22,36,37,38,39,40,41,42,43,44,45,49,52,61,82,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'NAME':([10,55,],[33,33,]),'COLON':([17,18,19,24,25,26,27,28,47,48,51,53,54,62,63,64,65,66,67,68,69,70,72,79,80,84,],[37,-19,-24,-20,-21,-22,-23,-49,-34,-33,-36,-37,-38,78,-26,-27,-28,-29,-30,-31,-32,-25,-50,-35,-39,-40,]),'EXTENDS':([17,18,19,24,25,26,27,28,47,48,51,53,54,63,64,65,66,67,68,69,70,72,79,80,84,],[38,-19,-24,-20,-21,-22,-23,-49,-34,-33,-36,-37,-38,-26,-27,-28,-29,-30,-31,-32,-25,-50,-35,-39,-40,]),'COMPARISON_OP':([18,19,24,25,26,27,28,46,47,48,51,53,54,63,64,65,66,67,68,69,70,71,72,79,80,84,],[39,-24,-20,-21,-22,-23,-49,39,-34,-33,-36,-37,-38,-26,-27,-28,-29,-30,-31,-32,-25,39,-50,-35,-39,-40,]),'BITWISE_OPS':([18,19,24,25,26,27,28,46,47,48,51,53,54,63,64,65,66,67,68,69,70,71,72,79,80,84,],[40,-24,-20,-21,-22,-23,-49,40,-34,-33,-36,-37,-38,-26,-27,-28,-29,-30,-31,-32,-25,40,-50,-35,-39,-40,]),'BIT_SHIFT_OPS':([18,19,24,25,26,27,28,46,47,48,51,53,54,63,64,65,66,67,68,69,70,71,72,79,80,84,],[41,-24,-20,-21,-22,-23,-49,41,-34,-33,-36,-37,-38,41,41,-28,-29,-30,-31,-32,-25,41,-50,-35,-39,-40,]),'PLUS':([18,19,24,25,26,27,28,46,47,48,51,53,54,63,64,65,66,67,68,69,70,71,72,79,80,84,],[42,-24,-20,-21,-22,-23,-49,42,-34,-33,-36,-37,-38,42,42,42,-29,-30,-31,-32,-25,42,-50,-35,-39,-40,]),'MUL_OP':([18,19,24,25,26,27,28,46,47,48,51,53,54,63,64,65,66,67,68,69,70,71,72,79,80,84,],[44,-24,-20,-21,-22,-23,-49,44,-34,-33,-36,-37,-38,44,44,44,44,44,-31,-32,-25,44,-50,-35,-39,-40,]),'POW':([18,19,24,25,26,27,28,46,47,48,51,53,54,63,64,65,66,67,68,69,70,71,72,79,80,84,],[45,-24,-20,-21,-22,-23,-49,45,-34,-33,-36,-37,-38,45,45,45,45,45,45,-32,-25,45,-50,-35,-39,-40,]),'RPAREN':([19,24,25,26,27,28,46,47,48,51,53,54,63,64,65,66,67,68,69,70,71,72,79,80,84,],[-24,-20,-21,-22,-23,-49,70,-34,-33,-36,-37,-38,-26,-27,-28,-29,-30,-31,-32,-25,79,-50,-35,-39,-40,]),'DOT':([28,33,],[50,55,]),'LBRAC':([29,30,31,37,61,80,82,],[52,52,52,61,61,52,61,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'doc':([0,],[2,]),'dict_def':([0,4,37,61,78,82,],[3,12,59,59,83,59,]),'global_stmts':([0,13,],[4,34,]),'empty_dict_def':([0,4,37,61,78,82,],[5,5,5,5,5,5,]),'non_empty_dict_def':([0,4,37,61,78,82,],[6,6,6,6,6,6,]),'global_stmt':([0,13,],[7,7,]),'import_stmt':([0,13,],[9,9,]),'post_parsing':([2,],[11,]),'dict_entries':([8,36,],[15,56,]),'dict_entry':([8,36,],[16,16,]),'dict_key':([8,36,37,38,52,61,82,],[17,17,57,62,73,57,57,]),'expression':([8,20,21,22,36,37,38,39,40,41,42,43,44,45,49,52,61,82,],[18,46,47,48,18,18,18,63,64,65,66,67,68,69,71,18,18,18,]),'literal':([8,20,21,22,36,37,38,39,40,41,42,43,44,45,49,52,61,82,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'number':([8,20,21,22,36,37,38,39,40,41,42,43,44,45,49,52,61,82,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'ref':([8,20,21,22,36,37,38,39,40,41,42,43,44,45,49,52,61,82,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'dotted_name':([10,55,],[32,74,]),'lookup':([29,30,31,80,],[51,53,54,84,]),'dict_val':([37,61,82,],[58,77,77,]),'list_def':([37,61,82,],[60,60,60,]),'list_entries':([61,82,],[76,85,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> doc post_parsing','start',2,'p_start','grammar_def.py',118),
  ('doc -> dict_def','doc',1,'p_dict_doc','grammar_def.py',123),
  ('doc -> global_stmts dict_def','doc',2,'p_doc_with_imports','grammar_def.py',129),
  ('global_stmts -> global_stmt SEMICOLON','global_stmts',2,'p_global_stmts','grammar_def.py',135),
  ('global_stmts -> global_stmt SEMICOLON global_stmts','global_stmts',3,'p_global_stmts','grammar_def.py',136),
  ('global_stmt -> import_stmt','global_stmt',1,'p_global_stmt','grammar_def.py',141),
  ('import_stmt -> IMPORT dotted_name','import_stmt',2,'p_import_stmt','grammar_def.py',146),
  ('dotted_name -> NAME','dotted_name',1,'p_dotted_name','grammar_def.py',156),
  ('dotted_name -> NAME DOT dotted_name','dotted_name',3,'p_dotted_name','grammar_def.py',157),
  ('dict_def -> empty_dict_def','dict_def',1,'p_dict_def','grammar_def.py',163),
  ('dict_def -> non_empty_dict_def','dict_def',1,'p_dict_def','grammar_def.py',164),
  ('empty_dict_def -> LCURL RCURL','empty_dict_def',2,'p_empty_dict_def','grammar_def.py',170),
  ('non_empty_dict_def -> LCURL dict_entries RCURL','non_empty_dict_def',3,'p_non_empty_dict_def','grammar_def.py',176),
  ('dict_entries -> dict_entry','dict_entries',1,'p_dict_entries','grammar_def.py',183),
  ('dict_entries -> dict_entry COMMA','dict_entries',2,'p_dict_entries','grammar_def.py',184),
  ('dict_entries -> dict_entry COMMA dict_entries','dict_entries',3,'p_dict_entries','grammar_def.py',185),
  ('dict_entry -> dict_key COLON dict_val','dict_entry',3,'p_dict_entry','grammar_def.py',191),
  ('dict_entry -> dict_key EXTENDS dict_key COLON dict_def','dict_entry',5,'p_extended_dict_entry','grammar_def.py',197),
  ('dict_key -> expression','dict_key',1,'p_dict_key','grammar_def.py',203),
  ('literal -> STRING_LITERAL','literal',1,'p_literal','grammar_def.py',209),
  ('literal -> BOOLEAN','literal',1,'p_literal','grammar_def.py',210),
  ('literal -> number','literal',1,'p_literal','grammar_def.py',211),
  ('literal -> ref','literal',1,'p_literal','grammar_def.py',212),
  ('expression -> literal','expression',1,'p_literal_expression','grammar_def.py',218),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_enclosed_expression','grammar_def.py',224),
  ('expression -> expression COMPARISON_OP expression','expression',3,'p_two_place_operation_expression','grammar_def.py',230),
  ('expression -> expression BITWISE_OPS expression','expression',3,'p_two_place_operation_expression','grammar_def.py',231),
  ('expression -> expression BIT_SHIFT_OPS expression','expression',3,'p_two_place_operation_expression','grammar_def.py',232),
  ('expression -> expression PLUS expression','expression',3,'p_two_place_operation_expression','grammar_def.py',233),
  ('expression -> expression MINUS expression','expression',3,'p_two_place_operation_expression','grammar_def.py',234),
  ('expression -> expression MUL_OP expression','expression',3,'p_two_place_operation_expression','grammar_def.py',235),
  ('expression -> expression POW expression','expression',3,'p_two_place_operation_expression','grammar_def.py',236),
  ('expression -> INVERT expression','expression',2,'p_invert_expression','grammar_def.py',242),
  ('expression -> MINUS expression','expression',2,'p_negative_expression','grammar_def.py',248),
  ('expression -> FUNC LPAREN expression RPAREN','expression',4,'p_function_expression','grammar_def.py',254),
  ('ref -> LOCAL lookup','ref',2,'p_local_ref','grammar_def.py',260),
  ('ref -> IMPORTED lookup','ref',2,'p_imported_ref','grammar_def.py',267),
  ('ref -> USER_INPUT lookup','ref',2,'p_user_input_ref','grammar_def.py',274),
  ('lookup -> LBRAC dict_key RBRAC','lookup',3,'p_lookup','grammar_def.py',281),
  ('lookup -> LBRAC dict_key RBRAC lookup','lookup',4,'p_lookup','grammar_def.py',282),
  ('dict_val -> dict_key','dict_val',1,'p_dict_val','grammar_def.py',288),
  ('dict_val -> dict_def','dict_val',1,'p_dict_val','grammar_def.py',289),
  ('dict_val -> list_def','dict_val',1,'p_dict_val','grammar_def.py',290),
  ('list_def -> LBRAC RBRAC','list_def',2,'p_list_def','grammar_def.py',296),
  ('list_def -> LBRAC list_entries RBRAC','list_def',3,'p_list_def','grammar_def.py',297),
  ('list_entries -> dict_val','list_entries',1,'p_list_entries','grammar_def.py',304),
  ('list_entries -> dict_val COMMA','list_entries',2,'p_list_entries','grammar_def.py',305),
  ('list_entries -> dict_val COMMA list_entries','list_entries',3,'p_list_entries','grammar_def.py',306),
  ('number -> INTEGER','number',1,'p_integer_number','grammar_def.py',312),
  ('number -> INTEGER DOT INTEGER','number',3,'p_float_number','grammar_def.py',318),
  ('post_parsing -> <empty>','post_parsing',0,'p_finish','grammar_def.py',324),
]
