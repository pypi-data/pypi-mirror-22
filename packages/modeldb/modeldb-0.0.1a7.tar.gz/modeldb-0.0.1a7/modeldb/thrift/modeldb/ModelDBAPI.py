#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport


class Iface(object):
    def createProject(self, project):
        """
        Parameters:
         - project
        """
        pass

    def createExperiment(self, experiment):
        """
        Parameters:
         - experiment
        """
        pass

    def createExperimentRun(self, experimentRun):
        """
        Parameters:
         - experimentRun
        """
        pass

    def API_updateProject(self, projectId, updatedKVs):
        """
        Parameters:
         - projectId
         - updatedKVs
        """
        pass

    def updateExperiment(self, experimentId, updatedKVs):
        """
        Parameters:
         - experimentId
         - updatedKVs
        """
        pass

    def updateExperimentRun(self, experimentRunId, updatedKVs):
        """
        Parameters:
         - experimentRunId
         - updatedKVs
        """
        pass

    def getProject(self, projectId):
        """
        Parameters:
         - projectId
        """
        pass

    def getExperiment(self, experimentId):
        """
        Parameters:
         - experimentId
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def createProject(self, project):
        """
        Parameters:
         - project
        """
        self.send_createProject(project)
        return self.recv_createProject()

    def send_createProject(self, project):
        self._oprot.writeMessageBegin('createProject', TMessageType.CALL, self._seqid)
        args = createProject_args()
        args.project = project
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createProject(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createProject_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.svEx is not None:
            raise result.svEx
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createProject failed: unknown result")

    def createExperiment(self, experiment):
        """
        Parameters:
         - experiment
        """
        self.send_createExperiment(experiment)
        return self.recv_createExperiment()

    def send_createExperiment(self, experiment):
        self._oprot.writeMessageBegin('createExperiment', TMessageType.CALL, self._seqid)
        args = createExperiment_args()
        args.experiment = experiment
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createExperiment(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createExperiment_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.svEx is not None:
            raise result.svEx
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createExperiment failed: unknown result")

    def createExperimentRun(self, experimentRun):
        """
        Parameters:
         - experimentRun
        """
        self.send_createExperimentRun(experimentRun)
        return self.recv_createExperimentRun()

    def send_createExperimentRun(self, experimentRun):
        self._oprot.writeMessageBegin('createExperimentRun', TMessageType.CALL, self._seqid)
        args = createExperimentRun_args()
        args.experimentRun = experimentRun
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createExperimentRun(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createExperimentRun_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.svEx is not None:
            raise result.svEx
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createExperimentRun failed: unknown result")

    def API_updateProject(self, projectId, updatedKVs):
        """
        Parameters:
         - projectId
         - updatedKVs
        """
        self.send_API_updateProject(projectId, updatedKVs)
        return self.recv_API_updateProject()

    def send_API_updateProject(self, projectId, updatedKVs):
        self._oprot.writeMessageBegin('API_updateProject', TMessageType.CALL, self._seqid)
        args = API_updateProject_args()
        args.projectId = projectId
        args.updatedKVs = updatedKVs
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_API_updateProject(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = API_updateProject_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.svEx is not None:
            raise result.svEx
        raise TApplicationException(TApplicationException.MISSING_RESULT, "API_updateProject failed: unknown result")

    def updateExperiment(self, experimentId, updatedKVs):
        """
        Parameters:
         - experimentId
         - updatedKVs
        """
        self.send_updateExperiment(experimentId, updatedKVs)
        return self.recv_updateExperiment()

    def send_updateExperiment(self, experimentId, updatedKVs):
        self._oprot.writeMessageBegin('updateExperiment', TMessageType.CALL, self._seqid)
        args = updateExperiment_args()
        args.experimentId = experimentId
        args.updatedKVs = updatedKVs
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateExperiment(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateExperiment_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.svEx is not None:
            raise result.svEx
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateExperiment failed: unknown result")

    def updateExperimentRun(self, experimentRunId, updatedKVs):
        """
        Parameters:
         - experimentRunId
         - updatedKVs
        """
        self.send_updateExperimentRun(experimentRunId, updatedKVs)
        return self.recv_updateExperimentRun()

    def send_updateExperimentRun(self, experimentRunId, updatedKVs):
        self._oprot.writeMessageBegin('updateExperimentRun', TMessageType.CALL, self._seqid)
        args = updateExperimentRun_args()
        args.experimentRunId = experimentRunId
        args.updatedKVs = updatedKVs
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateExperimentRun(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateExperimentRun_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.svEx is not None:
            raise result.svEx
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateExperimentRun failed: unknown result")

    def getProject(self, projectId):
        """
        Parameters:
         - projectId
        """
        self.send_getProject(projectId)
        return self.recv_getProject()

    def send_getProject(self, projectId):
        self._oprot.writeMessageBegin('getProject', TMessageType.CALL, self._seqid)
        args = getProject_args()
        args.projectId = projectId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getProject(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getProject_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.svEx is not None:
            raise result.svEx
        if result.rnfEx is not None:
            raise result.rnfEx
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getProject failed: unknown result")

    def getExperiment(self, experimentId):
        """
        Parameters:
         - experimentId
        """
        self.send_getExperiment(experimentId)
        return self.recv_getExperiment()

    def send_getExperiment(self, experimentId):
        self._oprot.writeMessageBegin('getExperiment', TMessageType.CALL, self._seqid)
        args = getExperiment_args()
        args.experimentId = experimentId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getExperiment(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getExperiment_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.svEx is not None:
            raise result.svEx
        if result.rnfEx is not None:
            raise result.rnfEx
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getExperiment failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["createProject"] = Processor.process_createProject
        self._processMap["createExperiment"] = Processor.process_createExperiment
        self._processMap["createExperimentRun"] = Processor.process_createExperimentRun
        self._processMap["API_updateProject"] = Processor.process_API_updateProject
        self._processMap["updateExperiment"] = Processor.process_updateExperiment
        self._processMap["updateExperimentRun"] = Processor.process_updateExperimentRun
        self._processMap["getProject"] = Processor.process_getProject
        self._processMap["getExperiment"] = Processor.process_getExperiment

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_createProject(self, seqid, iprot, oprot):
        args = createProject_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createProject_result()
        try:
            result.success = self._handler.createProject(args.project)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except ServerLogicException as svEx:
            msg_type = TMessageType.REPLY
            result.svEx = svEx
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createProject", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createExperiment(self, seqid, iprot, oprot):
        args = createExperiment_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createExperiment_result()
        try:
            result.success = self._handler.createExperiment(args.experiment)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except ServerLogicException as svEx:
            msg_type = TMessageType.REPLY
            result.svEx = svEx
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createExperiment", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createExperimentRun(self, seqid, iprot, oprot):
        args = createExperimentRun_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createExperimentRun_result()
        try:
            result.success = self._handler.createExperimentRun(args.experimentRun)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except ServerLogicException as svEx:
            msg_type = TMessageType.REPLY
            result.svEx = svEx
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createExperimentRun", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_API_updateProject(self, seqid, iprot, oprot):
        args = API_updateProject_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = API_updateProject_result()
        try:
            result.success = self._handler.API_updateProject(args.projectId, args.updatedKVs)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except ServerLogicException as svEx:
            msg_type = TMessageType.REPLY
            result.svEx = svEx
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("API_updateProject", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateExperiment(self, seqid, iprot, oprot):
        args = updateExperiment_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateExperiment_result()
        try:
            result.success = self._handler.updateExperiment(args.experimentId, args.updatedKVs)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except ServerLogicException as svEx:
            msg_type = TMessageType.REPLY
            result.svEx = svEx
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateExperiment", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateExperimentRun(self, seqid, iprot, oprot):
        args = updateExperimentRun_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateExperimentRun_result()
        try:
            result.success = self._handler.updateExperimentRun(args.experimentRunId, args.updatedKVs)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except ServerLogicException as svEx:
            msg_type = TMessageType.REPLY
            result.svEx = svEx
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateExperimentRun", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getProject(self, seqid, iprot, oprot):
        args = getProject_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getProject_result()
        try:
            result.success = self._handler.getProject(args.projectId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except ServerLogicException as svEx:
            msg_type = TMessageType.REPLY
            result.svEx = svEx
        except ResourceNotFoundException as rnfEx:
            msg_type = TMessageType.REPLY
            result.rnfEx = rnfEx
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getProject", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getExperiment(self, seqid, iprot, oprot):
        args = getExperiment_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getExperiment_result()
        try:
            result.success = self._handler.getExperiment(args.experimentId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except ServerLogicException as svEx:
            msg_type = TMessageType.REPLY
            result.svEx = svEx
        except ResourceNotFoundException as rnfEx:
            msg_type = TMessageType.REPLY
            result.rnfEx = rnfEx
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getExperiment", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class createProject_args(object):
    """
    Attributes:
     - project
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'project', (Project, Project.thrift_spec), None, ),  # 1
    )

    def __init__(self, project=None,):
        self.project = project

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.project = Project()
                    self.project.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createProject_args')
        if self.project is not None:
            oprot.writeFieldBegin('project', TType.STRUCT, 1)
            self.project.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createProject_result(object):
    """
    Attributes:
     - success
     - svEx
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'svEx', (ServerLogicException, ServerLogicException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, svEx=None,):
        self.success = success
        self.svEx = svEx

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.svEx = ServerLogicException()
                    self.svEx.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createProject_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.svEx is not None:
            oprot.writeFieldBegin('svEx', TType.STRUCT, 1)
            self.svEx.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createExperiment_args(object):
    """
    Attributes:
     - experiment
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'experiment', (Experiment, Experiment.thrift_spec), None, ),  # 1
    )

    def __init__(self, experiment=None,):
        self.experiment = experiment

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.experiment = Experiment()
                    self.experiment.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createExperiment_args')
        if self.experiment is not None:
            oprot.writeFieldBegin('experiment', TType.STRUCT, 1)
            self.experiment.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createExperiment_result(object):
    """
    Attributes:
     - success
     - svEx
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'svEx', (ServerLogicException, ServerLogicException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, svEx=None,):
        self.success = success
        self.svEx = svEx

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.svEx = ServerLogicException()
                    self.svEx.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createExperiment_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.svEx is not None:
            oprot.writeFieldBegin('svEx', TType.STRUCT, 1)
            self.svEx.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createExperimentRun_args(object):
    """
    Attributes:
     - experimentRun
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'experimentRun', (ExperimentRun, ExperimentRun.thrift_spec), None, ),  # 1
    )

    def __init__(self, experimentRun=None,):
        self.experimentRun = experimentRun

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.experimentRun = ExperimentRun()
                    self.experimentRun.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createExperimentRun_args')
        if self.experimentRun is not None:
            oprot.writeFieldBegin('experimentRun', TType.STRUCT, 1)
            self.experimentRun.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createExperimentRun_result(object):
    """
    Attributes:
     - success
     - svEx
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'svEx', (ServerLogicException, ServerLogicException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, svEx=None,):
        self.success = success
        self.svEx = svEx

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.svEx = ServerLogicException()
                    self.svEx.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createExperimentRun_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.svEx is not None:
            oprot.writeFieldBegin('svEx', TType.STRUCT, 1)
            self.svEx.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class API_updateProject_args(object):
    """
    Attributes:
     - projectId
     - updatedKVs
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'projectId', None, None, ),  # 1
        (2, TType.MAP, 'updatedKVs', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
    )

    def __init__(self, projectId=None, updatedKVs=None,):
        self.projectId = projectId
        self.updatedKVs = updatedKVs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.projectId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.updatedKVs = {}
                    (_ktype617, _vtype618, _size616) = iprot.readMapBegin()
                    for _i620 in range(_size616):
                        _key621 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val622 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.updatedKVs[_key621] = _val622
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('API_updateProject_args')
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I32, 1)
            oprot.writeI32(self.projectId)
            oprot.writeFieldEnd()
        if self.updatedKVs is not None:
            oprot.writeFieldBegin('updatedKVs', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.updatedKVs))
            for kiter623, viter624 in self.updatedKVs.items():
                oprot.writeString(kiter623.encode('utf-8') if sys.version_info[0] == 2 else kiter623)
                oprot.writeString(viter624.encode('utf-8') if sys.version_info[0] == 2 else viter624)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class API_updateProject_result(object):
    """
    Attributes:
     - success
     - svEx
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'svEx', (ServerLogicException, ServerLogicException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, svEx=None,):
        self.success = success
        self.svEx = svEx

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.svEx = ServerLogicException()
                    self.svEx.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('API_updateProject_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.svEx is not None:
            oprot.writeFieldBegin('svEx', TType.STRUCT, 1)
            self.svEx.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateExperiment_args(object):
    """
    Attributes:
     - experimentId
     - updatedKVs
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'experimentId', None, None, ),  # 1
        (2, TType.MAP, 'updatedKVs', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
    )

    def __init__(self, experimentId=None, updatedKVs=None,):
        self.experimentId = experimentId
        self.updatedKVs = updatedKVs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.experimentId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.updatedKVs = {}
                    (_ktype626, _vtype627, _size625) = iprot.readMapBegin()
                    for _i629 in range(_size625):
                        _key630 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val631 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.updatedKVs[_key630] = _val631
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateExperiment_args')
        if self.experimentId is not None:
            oprot.writeFieldBegin('experimentId', TType.I32, 1)
            oprot.writeI32(self.experimentId)
            oprot.writeFieldEnd()
        if self.updatedKVs is not None:
            oprot.writeFieldBegin('updatedKVs', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.updatedKVs))
            for kiter632, viter633 in self.updatedKVs.items():
                oprot.writeString(kiter632.encode('utf-8') if sys.version_info[0] == 2 else kiter632)
                oprot.writeString(viter633.encode('utf-8') if sys.version_info[0] == 2 else viter633)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateExperiment_result(object):
    """
    Attributes:
     - success
     - svEx
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'svEx', (ServerLogicException, ServerLogicException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, svEx=None,):
        self.success = success
        self.svEx = svEx

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.svEx = ServerLogicException()
                    self.svEx.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateExperiment_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.svEx is not None:
            oprot.writeFieldBegin('svEx', TType.STRUCT, 1)
            self.svEx.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateExperimentRun_args(object):
    """
    Attributes:
     - experimentRunId
     - updatedKVs
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'experimentRunId', None, None, ),  # 1
        (2, TType.MAP, 'updatedKVs', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
    )

    def __init__(self, experimentRunId=None, updatedKVs=None,):
        self.experimentRunId = experimentRunId
        self.updatedKVs = updatedKVs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.experimentRunId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.updatedKVs = {}
                    (_ktype635, _vtype636, _size634) = iprot.readMapBegin()
                    for _i638 in range(_size634):
                        _key639 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val640 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.updatedKVs[_key639] = _val640
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateExperimentRun_args')
        if self.experimentRunId is not None:
            oprot.writeFieldBegin('experimentRunId', TType.I32, 1)
            oprot.writeI32(self.experimentRunId)
            oprot.writeFieldEnd()
        if self.updatedKVs is not None:
            oprot.writeFieldBegin('updatedKVs', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.updatedKVs))
            for kiter641, viter642 in self.updatedKVs.items():
                oprot.writeString(kiter641.encode('utf-8') if sys.version_info[0] == 2 else kiter641)
                oprot.writeString(viter642.encode('utf-8') if sys.version_info[0] == 2 else viter642)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateExperimentRun_result(object):
    """
    Attributes:
     - success
     - svEx
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'svEx', (ServerLogicException, ServerLogicException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, svEx=None,):
        self.success = success
        self.svEx = svEx

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.svEx = ServerLogicException()
                    self.svEx.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateExperimentRun_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.svEx is not None:
            oprot.writeFieldBegin('svEx', TType.STRUCT, 1)
            self.svEx.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getProject_args(object):
    """
    Attributes:
     - projectId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'projectId', None, None, ),  # 1
    )

    def __init__(self, projectId=None,):
        self.projectId = projectId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.projectId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getProject_args')
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I32, 1)
            oprot.writeI32(self.projectId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getProject_result(object):
    """
    Attributes:
     - success
     - svEx
     - rnfEx
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (Project, Project.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'svEx', (ServerLogicException, ServerLogicException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'rnfEx', (ResourceNotFoundException, ResourceNotFoundException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, svEx=None, rnfEx=None,):
        self.success = success
        self.svEx = svEx
        self.rnfEx = rnfEx

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Project()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.svEx = ServerLogicException()
                    self.svEx.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.rnfEx = ResourceNotFoundException()
                    self.rnfEx.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getProject_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.svEx is not None:
            oprot.writeFieldBegin('svEx', TType.STRUCT, 1)
            self.svEx.write(oprot)
            oprot.writeFieldEnd()
        if self.rnfEx is not None:
            oprot.writeFieldBegin('rnfEx', TType.STRUCT, 2)
            self.rnfEx.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getExperiment_args(object):
    """
    Attributes:
     - experimentId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'experimentId', None, None, ),  # 1
    )

    def __init__(self, experimentId=None,):
        self.experimentId = experimentId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.experimentId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getExperiment_args')
        if self.experimentId is not None:
            oprot.writeFieldBegin('experimentId', TType.I32, 1)
            oprot.writeI32(self.experimentId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getExperiment_result(object):
    """
    Attributes:
     - success
     - svEx
     - rnfEx
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (Experiment, Experiment.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'svEx', (ServerLogicException, ServerLogicException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'rnfEx', (ResourceNotFoundException, ResourceNotFoundException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, svEx=None, rnfEx=None,):
        self.success = success
        self.svEx = svEx
        self.rnfEx = rnfEx

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Experiment()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.svEx = ServerLogicException()
                    self.svEx.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.rnfEx = ResourceNotFoundException()
                    self.rnfEx.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getExperiment_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.svEx is not None:
            oprot.writeFieldBegin('svEx', TType.STRUCT, 1)
            self.svEx.write(oprot)
            oprot.writeFieldEnd()
        if self.rnfEx is not None:
            oprot.writeFieldBegin('rnfEx', TType.STRUCT, 2)
            self.rnfEx.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
