---
# Configure Kubernetes masters
- name: master | Create directories
  file:
    path: /etc/kubernetes/{{ item }}
    state: directory
    owner: kube
    group: kube
    mode:  0770
  with_items:
    - certs
    - tokens
    - users
    - config
    - kubeconfig


# Kubernetes master binaries
- block:

  - name: master | Stop master services
    service:
      name:  "{{ item }}"
      state: stopped
    ignore_errors: true
    with_items:
      - kube-apiserver
      - kube-scheduler
      - kube-controller-manager

  - name: master | Fetch Kubernetes binaries from fileserver
    command: >
        scp -o StrictHostKeyChecking=no
            -i /home/{{ admin_user }}/.ssh/{{ private_key | basename }} 
            {{ admin_user }}@{{ fileserver }}:/{{ download_dir }}/kubernetes_binaries_{{ kubernetes_version }}/{{ item }}
            /usr/bin/{{ item }}
    notify:
      - Restart master daemons
    with_items:
      - kube-apiserver
      - kube-scheduler
      - kube-controller-manager
      - kubectl

  - name: master | Configure master binary permissions
    file:
      path:  /usr/bin/{{ item }}
      state: file
      mode:  0750
      owner: kube
      group: kube
    with_items:
      - kube-apiserver
      - kube-scheduler
      - kube-controller-manager
      - kubectl

  tags:
    - k8s_binaries
    - k8s_master_binaries


# Kubernetes config
- name: master | Copy config file
  template:
    src:   config/config.j2
    dest:  /etc/kubernetes/config/config
    mode:  0640
    owner: kube
    group: kube
  notify:
    - Reload Systemd
    - Restart master daemons
  tags: k8s_master_config    


# Kubernetes kube-apiserver
- block:

  - name: master | Copy kube-apiserver service file
    copy:
      src:  services/kube-apiserver.service
      dest: /usr/lib/systemd/system/kube-apiserver.service
    notify:
      - Reload Systemd
      - Restart kube-apiserver

  - name: master | Copy kube-apiserver config file
    template:
      src:   config/kube-apiserver.j2
      dest:  /etc/kubernetes/config/kube-apiserver
      mode:  0640
      owner: kube
      group: kube
    notify: Restart kube-apiserver
      
  - name: master | Enable kube-apiserver service
    service:
      name:    kube-apiserver
      enabled: yes

  tags: k8s_kube_apiserver


# Kubernetes kube-scheduler
- block:

  - name: master | Copy kube-scheduler service file
    copy:
      src:  services/kube-scheduler.service
      dest: /usr/lib/systemd/system/kube-scheduler.service
    notify:
      - Reload Systemd
      - Restart kube-scheduler

  - name: master | Copy kube-scheduler config file
    template:
      src:   config/kube-scheduler.j2
      dest:  /etc/kubernetes/config/kube-scheduler
      mode:  0640
      owner: kube
      group: kube
    notify: Restart kube-scheduler
      
  - name: master | Enable kube-scheduler service
    service:
      name:    kube-scheduler
      enabled: yes

  tags: k8s_kube_scheduler


# Kubernetes kube-controller-manager
- block:

  - name: master | Copy kube-controller-manager service file
    copy:
      src:  services/kube-controller-manager.service
      dest: /usr/lib/systemd/system/kube-controller-manager.service
    notify:
      - Reload Systemd
      - Restart kube-controller-manager

  - name: master | Copy kube-controller-manager config file
    template:
      src:   config/kube-controller-manager.j2
      dest:  /etc/kubernetes/config/kube-controller-manager
      mode:  0640
      owner: kube
      group: kube
    notify: Restart kube-controller-manager

  - name: master | Enable kube-controller-manager service
    service:
      name:    kube-controller-manager
      enabled: yes

  tags: k8s_kube_controller_manager


# Kubernetes master security
- block:

  # Certificates
  - block:

    # opendc CA
    - name: master | Get opendc-ca certificate
      slurp:
        src: /etc/opendc-ca/opendc-ca.crt
      delegate_to: "{{ groups['opendc-ca'][0] }}"
      register: opendc_ca_cert

    - name: master | Create opendc-ca certificate
      copy:
        dest: /etc/kubernetes/certs/opendc-ca.crt
        content: "{{ opendc_ca_cert.content | b64decode }}"
        mode:  0440
        owner: kube
        group: kube

    # kube-apiserver
    - name: master | Get kube-apiserver private key
      slurp:
        src: /etc/opendc-ca/kube_apiserver.key
      delegate_to: "{{ groups['opendc-ca'][0] }}"
      register: kube_apiserver_key

    - name: master | Create kube-apiserver private key
      copy:
        dest: /etc/kubernetes/certs/kube_apiserver.key
        content: "{{ kube_apiserver_key.content | b64decode }}"
        mode:  0440
        owner: kube
        group: kube

    - name: master | Get kube-apiserver certificate
      slurp:
        src: /etc/opendc-ca/kube_apiserver.crt
      delegate_to: "{{ groups['opendc-ca'][0] }}"
      register: kube_apiserver_cert

    - name: master | Create kube-apiserver certificate
      copy:
        dest: /etc/kubernetes/certs/kube_apiserver.crt
        content: "{{ kube_apiserver_cert.content | b64decode }}"
        mode:  0440
        owner: kube
        group: kube

    # kube-controller-manager
    - name: master | Get kube-controller-manager private key
      slurp:
        src: /etc/opendc-ca/kube_controller_manager.key
      delegate_to: "{{ groups['opendc-ca'][0] }}"
      register: kube_controller_manager_key

    - name: master | Create kube-controller-manager private key
      copy:
        dest: /etc/kubernetes/certs/kube_controller_manager.key
        content: "{{ kube_controller_manager_key.content | b64decode }}"
        mode:  0440
        owner: kube
        group: kube

    - name: master | Get kube-controller-manager certificate
      slurp:
        src: /etc/opendc-ca/kube_controller_manager.crt
      delegate_to: "{{ groups['opendc-ca'][0] }}"
      register: kube_controller_manager_cert

    - name: master | Create kube-controller-manager certificate
      copy:
        dest: /etc/kubernetes/certs/kube_controller_manager.crt
        content: "{{ kube_controller_manager_cert.content | b64decode }}"
        mode:  0440
        owner: kube
        group: kube

    tags: 
      - k8s_master_certs
      - k8s_certs

  # Tokens
  - block:

    - name: master | Create known_tokens.csv
      copy:
        dest: /etc/kubernetes/tokens/known_tokens.csv
        content: "{{ known_tokens_csv_file.content | b64decode }}"
        mode:  0440
        owner: kube
        group: kube
      notify: Restart kube-apiserver
      when: master_token_values is defined

    - name: master | Create kube-controller-manager kubeconfig file
      template: 
        src:   kubeconfig/kube-controller-manager.kubeconfig.j2
        dest:  /etc/kubernetes/kubeconfig/kube-controller-manager.kubeconfig
        mode:  0440
        owner: kube
        group: kube     
      notify:  Restart kube-controller-manager
      when:    master_token_values is defined

    - name: master | Create kube-scheduler kubeconfig file
      template: 
        src:   kubeconfig/kube-scheduler.kubeconfig.j2 
        dest:  /etc/kubernetes/kubeconfig/kube-scheduler.kubeconfig
        mode:  0440
        owner: kube
        group: kube
      notify:  Restart kube-scheduler
      when:    master_token_values is defined

    - name: master | Create kubectl kubeconfig file
      template: 
        src:   kubeconfig/kubectl.kubeconfig.j2 
        dest:  /etc/kubernetes/kubeconfig/kubectl.kubeconfig
        mode:  0440
        owner: kube
        group: kube
      when:    master_token_values is defined

    tags: k8s_tokens

  # Basic auth users
  - block:

    - name: master | Create known_users.csv file
      copy:
        dest:    /etc/kubernetes/users/known_users.csv
        content: "{{ known_users.content | b64decode }}"
        mode:  0440
        owner: kube
        group: kube
      notify:  Restart kube-apiserver
      when: known_users.content is defined

    tags: k8s_users

  tags:
    - opendc_security 
    - k8s_security


# - name: Configure firewalld ports for Kubernetes
#   firewalld: 
#     port:      "{{ item }}/tcp"
#     permanent: yes 
#     state:     enabled
#     immediate: yes
#   with_items:
#     - 8080
#   when: use_firewalld


