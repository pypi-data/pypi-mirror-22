# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pylibmpsse', [dirname(__file__)])
        except ImportError:
            import _pylibmpsse
            return _pylibmpsse
        if fp is not None:
            try:
                _mod = imp.load_module('_pylibmpsse', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pylibmpsse = swig_import_helper()
    del swig_import_helper
else:
    import _pylibmpsse
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pylibmpsse.MPSSE_OK_swigconstant(_pylibmpsse)
MPSSE_OK = _pylibmpsse.MPSSE_OK

_pylibmpsse.MPSSE_FAIL_swigconstant(_pylibmpsse)
MPSSE_FAIL = _pylibmpsse.MPSSE_FAIL

_pylibmpsse.MSB_swigconstant(_pylibmpsse)
MSB = _pylibmpsse.MSB

_pylibmpsse.LSB_swigconstant(_pylibmpsse)
LSB = _pylibmpsse.LSB

_pylibmpsse.CHUNK_SIZE_swigconstant(_pylibmpsse)
CHUNK_SIZE = _pylibmpsse.CHUNK_SIZE

_pylibmpsse.SPI_RW_SIZE_swigconstant(_pylibmpsse)
SPI_RW_SIZE = _pylibmpsse.SPI_RW_SIZE

_pylibmpsse.SPI_TRANSFER_SIZE_swigconstant(_pylibmpsse)
SPI_TRANSFER_SIZE = _pylibmpsse.SPI_TRANSFER_SIZE

_pylibmpsse.I2C_TRANSFER_SIZE_swigconstant(_pylibmpsse)
I2C_TRANSFER_SIZE = _pylibmpsse.I2C_TRANSFER_SIZE

_pylibmpsse.LATENCY_MS_swigconstant(_pylibmpsse)
LATENCY_MS = _pylibmpsse.LATENCY_MS

_pylibmpsse.TIMEOUT_DIVISOR_swigconstant(_pylibmpsse)
TIMEOUT_DIVISOR = _pylibmpsse.TIMEOUT_DIVISOR

_pylibmpsse.USB_TIMEOUT_swigconstant(_pylibmpsse)
USB_TIMEOUT = _pylibmpsse.USB_TIMEOUT

_pylibmpsse.SETUP_DELAY_swigconstant(_pylibmpsse)
SETUP_DELAY = _pylibmpsse.SETUP_DELAY

_pylibmpsse.BITMODE_RESET_swigconstant(_pylibmpsse)
BITMODE_RESET = _pylibmpsse.BITMODE_RESET

_pylibmpsse.BITMODE_MPSSE_swigconstant(_pylibmpsse)
BITMODE_MPSSE = _pylibmpsse.BITMODE_MPSSE

_pylibmpsse.CMD_SIZE_swigconstant(_pylibmpsse)
CMD_SIZE = _pylibmpsse.CMD_SIZE

_pylibmpsse.MAX_SETUP_COMMANDS_swigconstant(_pylibmpsse)
MAX_SETUP_COMMANDS = _pylibmpsse.MAX_SETUP_COMMANDS

_pylibmpsse.SS_TX_COUNT_swigconstant(_pylibmpsse)
SS_TX_COUNT = _pylibmpsse.SS_TX_COUNT

_pylibmpsse.LOW_swigconstant(_pylibmpsse)
LOW = _pylibmpsse.LOW

_pylibmpsse.HIGH_swigconstant(_pylibmpsse)
HIGH = _pylibmpsse.HIGH

_pylibmpsse.NUM_GPIOL_PINS_swigconstant(_pylibmpsse)
NUM_GPIOL_PINS = _pylibmpsse.NUM_GPIOL_PINS

_pylibmpsse.NUM_GPIO_PINS_swigconstant(_pylibmpsse)
NUM_GPIO_PINS = _pylibmpsse.NUM_GPIO_PINS

_pylibmpsse.NULL_CONTEXT_ERROR_MSG_swigconstant(_pylibmpsse)
NULL_CONTEXT_ERROR_MSG = _pylibmpsse.NULL_CONTEXT_ERROR_MSG

_pylibmpsse.IFACE_ANY_swigconstant(_pylibmpsse)
IFACE_ANY = _pylibmpsse.IFACE_ANY

_pylibmpsse.IFACE_A_swigconstant(_pylibmpsse)
IFACE_A = _pylibmpsse.IFACE_A

_pylibmpsse.IFACE_B_swigconstant(_pylibmpsse)
IFACE_B = _pylibmpsse.IFACE_B

_pylibmpsse.IFACE_C_swigconstant(_pylibmpsse)
IFACE_C = _pylibmpsse.IFACE_C

_pylibmpsse.IFACE_D_swigconstant(_pylibmpsse)
IFACE_D = _pylibmpsse.IFACE_D

_pylibmpsse.ONE_HUNDRED_KHZ_swigconstant(_pylibmpsse)
ONE_HUNDRED_KHZ = _pylibmpsse.ONE_HUNDRED_KHZ

_pylibmpsse.FOUR_HUNDRED_KHZ_swigconstant(_pylibmpsse)
FOUR_HUNDRED_KHZ = _pylibmpsse.FOUR_HUNDRED_KHZ

_pylibmpsse.ONE_MHZ_swigconstant(_pylibmpsse)
ONE_MHZ = _pylibmpsse.ONE_MHZ

_pylibmpsse.TWO_MHZ_swigconstant(_pylibmpsse)
TWO_MHZ = _pylibmpsse.TWO_MHZ

_pylibmpsse.FIVE_MHZ_swigconstant(_pylibmpsse)
FIVE_MHZ = _pylibmpsse.FIVE_MHZ

_pylibmpsse.SIX_MHZ_swigconstant(_pylibmpsse)
SIX_MHZ = _pylibmpsse.SIX_MHZ

_pylibmpsse.TEN_MHZ_swigconstant(_pylibmpsse)
TEN_MHZ = _pylibmpsse.TEN_MHZ

_pylibmpsse.TWELVE_MHZ_swigconstant(_pylibmpsse)
TWELVE_MHZ = _pylibmpsse.TWELVE_MHZ

_pylibmpsse.FIFTEEN_MHZ_swigconstant(_pylibmpsse)
FIFTEEN_MHZ = _pylibmpsse.FIFTEEN_MHZ

_pylibmpsse.THIRTY_MHZ_swigconstant(_pylibmpsse)
THIRTY_MHZ = _pylibmpsse.THIRTY_MHZ

_pylibmpsse.SIXTY_MHZ_swigconstant(_pylibmpsse)
SIXTY_MHZ = _pylibmpsse.SIXTY_MHZ

_pylibmpsse.SPI0_swigconstant(_pylibmpsse)
SPI0 = _pylibmpsse.SPI0

_pylibmpsse.SPI1_swigconstant(_pylibmpsse)
SPI1 = _pylibmpsse.SPI1

_pylibmpsse.SPI2_swigconstant(_pylibmpsse)
SPI2 = _pylibmpsse.SPI2

_pylibmpsse.SPI3_swigconstant(_pylibmpsse)
SPI3 = _pylibmpsse.SPI3

_pylibmpsse.I2C_swigconstant(_pylibmpsse)
I2C = _pylibmpsse.I2C

_pylibmpsse.GPIO_swigconstant(_pylibmpsse)
GPIO = _pylibmpsse.GPIO

_pylibmpsse.BITBANG_swigconstant(_pylibmpsse)
BITBANG = _pylibmpsse.BITBANG

_pylibmpsse.SK_swigconstant(_pylibmpsse)
SK = _pylibmpsse.SK

_pylibmpsse.DO_swigconstant(_pylibmpsse)
DO = _pylibmpsse.DO

_pylibmpsse.DI_swigconstant(_pylibmpsse)
DI = _pylibmpsse.DI

_pylibmpsse.CS_swigconstant(_pylibmpsse)
CS = _pylibmpsse.CS

_pylibmpsse.GPIO0_swigconstant(_pylibmpsse)
GPIO0 = _pylibmpsse.GPIO0

_pylibmpsse.GPIO1_swigconstant(_pylibmpsse)
GPIO1 = _pylibmpsse.GPIO1

_pylibmpsse.GPIO2_swigconstant(_pylibmpsse)
GPIO2 = _pylibmpsse.GPIO2

_pylibmpsse.GPIO3_swigconstant(_pylibmpsse)
GPIO3 = _pylibmpsse.GPIO3

_pylibmpsse.GPIOL0_swigconstant(_pylibmpsse)
GPIOL0 = _pylibmpsse.GPIOL0

_pylibmpsse.GPIOL1_swigconstant(_pylibmpsse)
GPIOL1 = _pylibmpsse.GPIOL1

_pylibmpsse.GPIOL2_swigconstant(_pylibmpsse)
GPIOL2 = _pylibmpsse.GPIOL2

_pylibmpsse.GPIOL3_swigconstant(_pylibmpsse)
GPIOL3 = _pylibmpsse.GPIOL3

_pylibmpsse.GPIOH0_swigconstant(_pylibmpsse)
GPIOH0 = _pylibmpsse.GPIOH0

_pylibmpsse.GPIOH1_swigconstant(_pylibmpsse)
GPIOH1 = _pylibmpsse.GPIOH1

_pylibmpsse.GPIOH2_swigconstant(_pylibmpsse)
GPIOH2 = _pylibmpsse.GPIOH2

_pylibmpsse.GPIOH3_swigconstant(_pylibmpsse)
GPIOH3 = _pylibmpsse.GPIOH3

_pylibmpsse.GPIOH4_swigconstant(_pylibmpsse)
GPIOH4 = _pylibmpsse.GPIOH4

_pylibmpsse.GPIOH5_swigconstant(_pylibmpsse)
GPIOH5 = _pylibmpsse.GPIOH5

_pylibmpsse.GPIOH6_swigconstant(_pylibmpsse)
GPIOH6 = _pylibmpsse.GPIOH6

_pylibmpsse.GPIOH7_swigconstant(_pylibmpsse)
GPIOH7 = _pylibmpsse.GPIOH7

_pylibmpsse.ACK_swigconstant(_pylibmpsse)
ACK = _pylibmpsse.ACK

_pylibmpsse.NACK_swigconstant(_pylibmpsse)
NACK = _pylibmpsse.NACK

_pylibmpsse.INVALID_COMMAND_swigconstant(_pylibmpsse)
INVALID_COMMAND = _pylibmpsse.INVALID_COMMAND

_pylibmpsse.ENABLE_ADAPTIVE_CLOCK_swigconstant(_pylibmpsse)
ENABLE_ADAPTIVE_CLOCK = _pylibmpsse.ENABLE_ADAPTIVE_CLOCK

_pylibmpsse.DISABLE_ADAPTIVE_CLOCK_swigconstant(_pylibmpsse)
DISABLE_ADAPTIVE_CLOCK = _pylibmpsse.DISABLE_ADAPTIVE_CLOCK

_pylibmpsse.ENABLE_3_PHASE_CLOCK_swigconstant(_pylibmpsse)
ENABLE_3_PHASE_CLOCK = _pylibmpsse.ENABLE_3_PHASE_CLOCK

_pylibmpsse.DISABLE_3_PHASE_CLOCK_swigconstant(_pylibmpsse)
DISABLE_3_PHASE_CLOCK = _pylibmpsse.DISABLE_3_PHASE_CLOCK

_pylibmpsse.TCK_X5_swigconstant(_pylibmpsse)
TCK_X5 = _pylibmpsse.TCK_X5

_pylibmpsse.TCK_D5_swigconstant(_pylibmpsse)
TCK_D5 = _pylibmpsse.TCK_D5

_pylibmpsse.CLOCK_N_CYCLES_swigconstant(_pylibmpsse)
CLOCK_N_CYCLES = _pylibmpsse.CLOCK_N_CYCLES

_pylibmpsse.CLOCK_N8_CYCLES_swigconstant(_pylibmpsse)
CLOCK_N8_CYCLES = _pylibmpsse.CLOCK_N8_CYCLES

_pylibmpsse.PULSE_CLOCK_IO_HIGH_swigconstant(_pylibmpsse)
PULSE_CLOCK_IO_HIGH = _pylibmpsse.PULSE_CLOCK_IO_HIGH

_pylibmpsse.PULSE_CLOCK_IO_LOW_swigconstant(_pylibmpsse)
PULSE_CLOCK_IO_LOW = _pylibmpsse.PULSE_CLOCK_IO_LOW

_pylibmpsse.CLOCK_N8_CYCLES_IO_HIGH_swigconstant(_pylibmpsse)
CLOCK_N8_CYCLES_IO_HIGH = _pylibmpsse.CLOCK_N8_CYCLES_IO_HIGH

_pylibmpsse.CLOCK_N8_CYCLES_IO_LOW_swigconstant(_pylibmpsse)
CLOCK_N8_CYCLES_IO_LOW = _pylibmpsse.CLOCK_N8_CYCLES_IO_LOW

_pylibmpsse.TRISTATE_IO_swigconstant(_pylibmpsse)
TRISTATE_IO = _pylibmpsse.TRISTATE_IO

_pylibmpsse.STARTED_swigconstant(_pylibmpsse)
STARTED = _pylibmpsse.STARTED

_pylibmpsse.STOPPED_swigconstant(_pylibmpsse)
STOPPED = _pylibmpsse.STOPPED
class vid_pid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vid_pid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vid_pid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vid"] = _pylibmpsse.vid_pid_vid_set
    __swig_getmethods__["vid"] = _pylibmpsse.vid_pid_vid_get
    if _newclass:
        vid = _swig_property(_pylibmpsse.vid_pid_vid_get, _pylibmpsse.vid_pid_vid_set)
    __swig_setmethods__["pid"] = _pylibmpsse.vid_pid_pid_set
    __swig_getmethods__["pid"] = _pylibmpsse.vid_pid_pid_get
    if _newclass:
        pid = _swig_property(_pylibmpsse.vid_pid_pid_get, _pylibmpsse.vid_pid_pid_set)
    __swig_setmethods__["description"] = _pylibmpsse.vid_pid_description_set
    __swig_getmethods__["description"] = _pylibmpsse.vid_pid_description_get
    if _newclass:
        description = _swig_property(_pylibmpsse.vid_pid_description_get, _pylibmpsse.vid_pid_description_set)

    def __init__(self):
        this = _pylibmpsse.new_vid_pid()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pylibmpsse.delete_vid_pid
    __del__ = lambda self: None
vid_pid_swigregister = _pylibmpsse.vid_pid_swigregister
vid_pid_swigregister(vid_pid)

class mpsse_context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mpsse_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mpsse_context, name)
    __repr__ = _swig_repr
    __swig_setmethods__["description"] = _pylibmpsse.mpsse_context_description_set
    __swig_getmethods__["description"] = _pylibmpsse.mpsse_context_description_get
    if _newclass:
        description = _swig_property(_pylibmpsse.mpsse_context_description_get, _pylibmpsse.mpsse_context_description_set)
    __swig_setmethods__["ftdi"] = _pylibmpsse.mpsse_context_ftdi_set
    __swig_getmethods__["ftdi"] = _pylibmpsse.mpsse_context_ftdi_get
    if _newclass:
        ftdi = _swig_property(_pylibmpsse.mpsse_context_ftdi_get, _pylibmpsse.mpsse_context_ftdi_set)
    __swig_setmethods__["mode"] = _pylibmpsse.mpsse_context_mode_set
    __swig_getmethods__["mode"] = _pylibmpsse.mpsse_context_mode_get
    if _newclass:
        mode = _swig_property(_pylibmpsse.mpsse_context_mode_get, _pylibmpsse.mpsse_context_mode_set)
    __swig_setmethods__["status"] = _pylibmpsse.mpsse_context_status_set
    __swig_getmethods__["status"] = _pylibmpsse.mpsse_context_status_get
    if _newclass:
        status = _swig_property(_pylibmpsse.mpsse_context_status_get, _pylibmpsse.mpsse_context_status_set)
    __swig_setmethods__["flush_after_read"] = _pylibmpsse.mpsse_context_flush_after_read_set
    __swig_getmethods__["flush_after_read"] = _pylibmpsse.mpsse_context_flush_after_read_get
    if _newclass:
        flush_after_read = _swig_property(_pylibmpsse.mpsse_context_flush_after_read_get, _pylibmpsse.mpsse_context_flush_after_read_set)
    __swig_setmethods__["vid"] = _pylibmpsse.mpsse_context_vid_set
    __swig_getmethods__["vid"] = _pylibmpsse.mpsse_context_vid_get
    if _newclass:
        vid = _swig_property(_pylibmpsse.mpsse_context_vid_get, _pylibmpsse.mpsse_context_vid_set)
    __swig_setmethods__["pid"] = _pylibmpsse.mpsse_context_pid_set
    __swig_getmethods__["pid"] = _pylibmpsse.mpsse_context_pid_get
    if _newclass:
        pid = _swig_property(_pylibmpsse.mpsse_context_pid_get, _pylibmpsse.mpsse_context_pid_set)
    __swig_setmethods__["clock"] = _pylibmpsse.mpsse_context_clock_set
    __swig_getmethods__["clock"] = _pylibmpsse.mpsse_context_clock_get
    if _newclass:
        clock = _swig_property(_pylibmpsse.mpsse_context_clock_get, _pylibmpsse.mpsse_context_clock_set)
    __swig_setmethods__["xsize"] = _pylibmpsse.mpsse_context_xsize_set
    __swig_getmethods__["xsize"] = _pylibmpsse.mpsse_context_xsize_get
    if _newclass:
        xsize = _swig_property(_pylibmpsse.mpsse_context_xsize_get, _pylibmpsse.mpsse_context_xsize_set)
    __swig_setmethods__["open"] = _pylibmpsse.mpsse_context_open_set
    __swig_getmethods__["open"] = _pylibmpsse.mpsse_context_open_get
    if _newclass:
        open = _swig_property(_pylibmpsse.mpsse_context_open_get, _pylibmpsse.mpsse_context_open_set)
    __swig_setmethods__["endianess"] = _pylibmpsse.mpsse_context_endianess_set
    __swig_getmethods__["endianess"] = _pylibmpsse.mpsse_context_endianess_get
    if _newclass:
        endianess = _swig_property(_pylibmpsse.mpsse_context_endianess_get, _pylibmpsse.mpsse_context_endianess_set)
    __swig_setmethods__["tris"] = _pylibmpsse.mpsse_context_tris_set
    __swig_getmethods__["tris"] = _pylibmpsse.mpsse_context_tris_get
    if _newclass:
        tris = _swig_property(_pylibmpsse.mpsse_context_tris_get, _pylibmpsse.mpsse_context_tris_set)
    __swig_setmethods__["pstart"] = _pylibmpsse.mpsse_context_pstart_set
    __swig_getmethods__["pstart"] = _pylibmpsse.mpsse_context_pstart_get
    if _newclass:
        pstart = _swig_property(_pylibmpsse.mpsse_context_pstart_get, _pylibmpsse.mpsse_context_pstart_set)
    __swig_setmethods__["pstop"] = _pylibmpsse.mpsse_context_pstop_set
    __swig_getmethods__["pstop"] = _pylibmpsse.mpsse_context_pstop_get
    if _newclass:
        pstop = _swig_property(_pylibmpsse.mpsse_context_pstop_get, _pylibmpsse.mpsse_context_pstop_set)
    __swig_setmethods__["pidle"] = _pylibmpsse.mpsse_context_pidle_set
    __swig_getmethods__["pidle"] = _pylibmpsse.mpsse_context_pidle_get
    if _newclass:
        pidle = _swig_property(_pylibmpsse.mpsse_context_pidle_get, _pylibmpsse.mpsse_context_pidle_set)
    __swig_setmethods__["gpioh"] = _pylibmpsse.mpsse_context_gpioh_set
    __swig_getmethods__["gpioh"] = _pylibmpsse.mpsse_context_gpioh_get
    if _newclass:
        gpioh = _swig_property(_pylibmpsse.mpsse_context_gpioh_get, _pylibmpsse.mpsse_context_gpioh_set)
    __swig_setmethods__["trish"] = _pylibmpsse.mpsse_context_trish_set
    __swig_getmethods__["trish"] = _pylibmpsse.mpsse_context_trish_get
    if _newclass:
        trish = _swig_property(_pylibmpsse.mpsse_context_trish_get, _pylibmpsse.mpsse_context_trish_set)
    __swig_setmethods__["bitbang"] = _pylibmpsse.mpsse_context_bitbang_set
    __swig_getmethods__["bitbang"] = _pylibmpsse.mpsse_context_bitbang_get
    if _newclass:
        bitbang = _swig_property(_pylibmpsse.mpsse_context_bitbang_get, _pylibmpsse.mpsse_context_bitbang_set)
    __swig_setmethods__["tx"] = _pylibmpsse.mpsse_context_tx_set
    __swig_getmethods__["tx"] = _pylibmpsse.mpsse_context_tx_get
    if _newclass:
        tx = _swig_property(_pylibmpsse.mpsse_context_tx_get, _pylibmpsse.mpsse_context_tx_set)
    __swig_setmethods__["rx"] = _pylibmpsse.mpsse_context_rx_set
    __swig_getmethods__["rx"] = _pylibmpsse.mpsse_context_rx_get
    if _newclass:
        rx = _swig_property(_pylibmpsse.mpsse_context_rx_get, _pylibmpsse.mpsse_context_rx_set)
    __swig_setmethods__["txrx"] = _pylibmpsse.mpsse_context_txrx_set
    __swig_getmethods__["txrx"] = _pylibmpsse.mpsse_context_txrx_get
    if _newclass:
        txrx = _swig_property(_pylibmpsse.mpsse_context_txrx_get, _pylibmpsse.mpsse_context_txrx_set)
    __swig_setmethods__["tack"] = _pylibmpsse.mpsse_context_tack_set
    __swig_getmethods__["tack"] = _pylibmpsse.mpsse_context_tack_get
    if _newclass:
        tack = _swig_property(_pylibmpsse.mpsse_context_tack_get, _pylibmpsse.mpsse_context_tack_set)
    __swig_setmethods__["rack"] = _pylibmpsse.mpsse_context_rack_set
    __swig_getmethods__["rack"] = _pylibmpsse.mpsse_context_rack_get
    if _newclass:
        rack = _swig_property(_pylibmpsse.mpsse_context_rack_get, _pylibmpsse.mpsse_context_rack_set)

    def __init__(self):
        this = _pylibmpsse.new_mpsse_context()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pylibmpsse.delete_mpsse_context
    __del__ = lambda self: None
mpsse_context_swigregister = _pylibmpsse.mpsse_context_swigregister
mpsse_context_swigregister(mpsse_context)


def MPSSE(mode, freq, endianess):
    return _pylibmpsse.MPSSE(mode, freq, endianess)
MPSSE = _pylibmpsse.MPSSE

def Open(vid, pid, mode, freq, endianess, interface, description, serial):
    return _pylibmpsse.Open(vid, pid, mode, freq, endianess, interface, description, serial)
Open = _pylibmpsse.Open

def OpenIndex(vid, pid, mode, freq, endianess, interface, description, serial, index):
    return _pylibmpsse.OpenIndex(vid, pid, mode, freq, endianess, interface, description, serial, index)
OpenIndex = _pylibmpsse.OpenIndex

def Close(mpsse):
    return _pylibmpsse.Close(mpsse)
Close = _pylibmpsse.Close

def ErrorString(mpsse):
    return _pylibmpsse.ErrorString(mpsse)
ErrorString = _pylibmpsse.ErrorString

def SetMode(mpsse, endianess):
    return _pylibmpsse.SetMode(mpsse, endianess)
SetMode = _pylibmpsse.SetMode

def EnableBitmode(mpsse, tf):
    return _pylibmpsse.EnableBitmode(mpsse, tf)
EnableBitmode = _pylibmpsse.EnableBitmode

def SetClock(mpsse, freq):
    return _pylibmpsse.SetClock(mpsse, freq)
SetClock = _pylibmpsse.SetClock

def GetClock(mpsse):
    return _pylibmpsse.GetClock(mpsse)
GetClock = _pylibmpsse.GetClock

def GetVid(mpsse):
    return _pylibmpsse.GetVid(mpsse)
GetVid = _pylibmpsse.GetVid

def GetPid(mpsse):
    return _pylibmpsse.GetPid(mpsse)
GetPid = _pylibmpsse.GetPid

def GetDescription(mpsse):
    return _pylibmpsse.GetDescription(mpsse)
GetDescription = _pylibmpsse.GetDescription

def SetLoopback(mpsse, enable):
    return _pylibmpsse.SetLoopback(mpsse, enable)
SetLoopback = _pylibmpsse.SetLoopback

def SetCSIdle(mpsse, idle):
    return _pylibmpsse.SetCSIdle(mpsse, idle)
SetCSIdle = _pylibmpsse.SetCSIdle

def Start(mpsse):
    return _pylibmpsse.Start(mpsse)
Start = _pylibmpsse.Start

def Write(mpsse, data):
    return _pylibmpsse.Write(mpsse, data)
Write = _pylibmpsse.Write

def Stop(mpsse):
    return _pylibmpsse.Stop(mpsse)
Stop = _pylibmpsse.Stop

def GetAck(mpsse):
    return _pylibmpsse.GetAck(mpsse)
GetAck = _pylibmpsse.GetAck

def SetAck(mpsse, ack):
    return _pylibmpsse.SetAck(mpsse, ack)
SetAck = _pylibmpsse.SetAck

def SendAcks(mpsse):
    return _pylibmpsse.SendAcks(mpsse)
SendAcks = _pylibmpsse.SendAcks

def SendNacks(mpsse):
    return _pylibmpsse.SendNacks(mpsse)
SendNacks = _pylibmpsse.SendNacks

def FlushAfterRead(mpsse, tf):
    return _pylibmpsse.FlushAfterRead(mpsse, tf)
FlushAfterRead = _pylibmpsse.FlushAfterRead

def PinHigh(mpsse, pin):
    return _pylibmpsse.PinHigh(mpsse, pin)
PinHigh = _pylibmpsse.PinHigh

def PinLow(mpsse, pin):
    return _pylibmpsse.PinLow(mpsse, pin)
PinLow = _pylibmpsse.PinLow

def SetDirection(mpsse, direction):
    return _pylibmpsse.SetDirection(mpsse, direction)
SetDirection = _pylibmpsse.SetDirection

def WriteBits(mpsse, bits, size):
    return _pylibmpsse.WriteBits(mpsse, bits, size)
WriteBits = _pylibmpsse.WriteBits

def ReadBits(mpsse, size):
    return _pylibmpsse.ReadBits(mpsse, size)
ReadBits = _pylibmpsse.ReadBits

def WritePins(mpsse, data):
    return _pylibmpsse.WritePins(mpsse, data)
WritePins = _pylibmpsse.WritePins

def ReadPins(mpsse):
    return _pylibmpsse.ReadPins(mpsse)
ReadPins = _pylibmpsse.ReadPins

def PinState(mpsse, pin, state):
    return _pylibmpsse.PinState(mpsse, pin, state)
PinState = _pylibmpsse.PinState

def Tristate(mpsse):
    return _pylibmpsse.Tristate(mpsse)
Tristate = _pylibmpsse.Tristate

def Version():
    return _pylibmpsse.Version()
Version = _pylibmpsse.Version
class swig_string_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_string_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_string_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _pylibmpsse.swig_string_data_size_set
    __swig_getmethods__["size"] = _pylibmpsse.swig_string_data_size_get
    if _newclass:
        size = _swig_property(_pylibmpsse.swig_string_data_size_get, _pylibmpsse.swig_string_data_size_set)
    __swig_setmethods__["data"] = _pylibmpsse.swig_string_data_data_set
    __swig_getmethods__["data"] = _pylibmpsse.swig_string_data_data_get
    if _newclass:
        data = _swig_property(_pylibmpsse.swig_string_data_data_get, _pylibmpsse.swig_string_data_data_set)

    def __init__(self):
        this = _pylibmpsse.new_swig_string_data()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pylibmpsse.delete_swig_string_data
    __del__ = lambda self: None
swig_string_data_swigregister = _pylibmpsse.swig_string_data_swigregister
swig_string_data_swigregister(swig_string_data)


def Read(mpsse, size):
    return _pylibmpsse.Read(mpsse, size)
Read = _pylibmpsse.Read

def Transfer(mpsse, data):
    return _pylibmpsse.Transfer(mpsse, data)
Transfer = _pylibmpsse.Transfer
# This file is compatible with both classic and new-style classes.


