--- original
+++ modified
@@ -11,6 +11,7 @@
 #  - Use of `hamiltonian_submatrix` in order to obtain a Hamiltonian
 #    matrix.
 
+import _defs
 from cmath import exp
 import numpy as np
 import kwant
@@ -68,24 +69,39 @@
 
         energies.append(ev)
 
-    pyplot.figure()
+    fig = pyplot.figure()
     pyplot.plot(Bfields, energies)
-    pyplot.xlabel("magnetic field [arbitrary units]")
-    pyplot.ylabel("energy [t]")
-    pyplot.show()
+    pyplot.xlabel("magnetic field [arbitrary units]",
+                  fontsize=_defs.mpl_label_size)
+    pyplot.ylabel("energy [t]", fontsize=_defs.mpl_label_size)
+    pyplot.setp(fig.get_axes()[0].get_xticklabels(),
+                fontsize=_defs.mpl_tick_size)
+    pyplot.setp(fig.get_axes()[0].get_yticklabels(),
+                fontsize=_defs.mpl_tick_size)
+    fig.set_size_inches(_defs.mpl_width_in, _defs.mpl_width_in * 3. / 4.)
+    fig.subplots_adjust(left=0.15, right=0.95, top=0.95, bottom=0.15)
+    for extension in ('pdf', 'png'):
+        fig.savefig("closed_system_result." + extension, dpi=_defs.dpi)
 
 
 def plot_wave_function(syst):
+    size = (_defs.figwidth_in, _defs.figwidth_in)
+
     # Calculate the wave functions in the system.
     ham_mat = syst.hamiltonian_submatrix(sparse=True)
     evecs = sla.eigsh(ham_mat, k=20, which='SM')[1]
 
     # Plot the probability density of the 10th eigenmode.
-    kwant.plotter.map(syst, np.abs(evecs[:, 9])**2,
-                      colorbar=False, oversampling=1)
+    for extension in ('pdf', 'png'):
+        kwant.plotter.map(
+            syst, np.abs(evecs[:, 9])**2, colorbar=False, oversampling=1,
+            file="closed_system_eigenvector." + extension,
+            fig_size=size, dpi=_defs.dpi)
 
 
 def plot_current(syst):
+    size = (_defs.figwidth_in, _defs.figwidth_in)
+
     # Calculate the wave functions in the system.
     ham_mat = syst.hamiltonian_submatrix(sparse=True)
     evecs = sla.eigsh(ham_mat, k=20, which='SM')[1]
@@ -93,15 +109,16 @@
     # Calculate and plot the local current of the 10th eigenmode.
     J = kwant.operator.Current(syst)
     current = J(evecs[:, 9])
-    kwant.plotter.current(syst, current, colorbar=False)
+    for extension in ('pdf', 'png'):
+        kwant.plotter.current(
+            syst, current, colorbar=False,
+            file="closed_system_current." + extension,
+            fig_size=size, dpi=_defs.dpi)
 
 
 def main():
     syst = make_system()
 
-    # Check that the system looks as intended.
-    kwant.plot(syst)
-
     # Finalize the system.
     syst = syst.finalized()
 
