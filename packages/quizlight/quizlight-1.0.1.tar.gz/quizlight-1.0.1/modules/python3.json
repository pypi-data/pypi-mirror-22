[
  [
    [
      "What is your name?\n\na. Lancelot\nb. Dave\nc. Ed\nd. Fluffy\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "What is your quest?\n\na. To get to Cleveland\nb. To buy some cheese\nc. To seek the grail\nd. To destroy a ring\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "What is the air speed velocity of an unladen swallow?\n\na. 178-200 mph\nb. 31-40 mph\nc. 7 mph\nd. I don't know that.\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ]
  ], 
  [
    [
      "The python interpreter's primary prompt typically looks like:\n\na. user@python:$\nb. $\nc. ...\nd. >>>\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "An end-of-file (EOF) character (ctrl-D in unix, ctrl-Z in\nwindows) at the interpreter's primary prompt causes the\ninterpreter to:\n\na. Beep\nb. Get ready for a new command\nc. Exit with a zero status\nd. Switch to autopilot mode\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "To run a python module called module_example as a script, you\nwould type:\n\na. python3 -run module_example\nb. module_example -python3\nc. python3 -m module_example\nd. python3 -script module_example\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "The first argument passed when starting the interpreter (e.g.\npython -c 'print(\"Hello\")') is stored in:\n\na. sys.argv[0] in the sys module\nb. The global arguments variable\nc. sys.argv[1] in the sys module\nd. The castle aaargh\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "In the python interpreter, the secondary prompt (usually \"...\")\nmeans:\n\na. Something is wrong\nb. The interpreter is in limited mode\nc. The interpreter expects a continuation of the previous line\nd. The interpreter is pausing to let you catch up\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "By default, python assumes source files are encoded in:\n\na. UTF-8\nb. UTF-16\nc. Esperanto\nd. The enigma cipher\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Opening the python interpreter in \"interactive mode\" means:\n\na. You can type in commands at a prompt\nb. Python will run your program, but stop at intervals to\n   give you input\nc. You want the interpreter to interact with your program\nd. You can only run scripts\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "When python is started with a filename as an argument, it will:\n\na. Start in interactive mode with that file loaded as a module\nb. Check to see if that file is a python file\nc. Output to that file\nd. Run that file as a script\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ]
  ], 
  [
    [
      "How do you group statements (e.g. when creating a loop) in Python?\n\na. Using brackets: [ ]\nb. Using curly brackets: { }\nc. Using parenthesis: ( )\nd. Using indentation\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "In the interpreter, how do you tell python you are finished\nentering a multi-line command?\n\na. Type EOF\nb. With a closing curley bracket - }\nc. By entering a blank line\nd. By typing ctrl-D (or ctrl-Z in Windows)\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Which of the following is a comment in python?\n\na. <!-- This is a comment -->\nb. # This is a comment\nc. // This is a comment\nd. /* This is a comment\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Suppose we enter the following into the interpreter:\n\n2 + (4 / 2)\n\nWhat type of value will result?\n\na. int\nb. float\nc. string\nd. literal\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Which equation will get the square of 2?\n\na. 2 ** 2\nb. 2 ^2\nc. 2 **\nd. sq(2)\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Which operator returns the remainder of a division?\n\na. r\nb. &\nc. /r\nd. %\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Which of these will output the number 23 with type int?\n\na. (23 // 5) * 5\nb. (23 / 5) * 5\nc. (23 // 5) * 5 + (23 % 5)\nd. 23 / (5 * 5)\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Which of these numbers would have type float?\n\na. 4.725\nb. 5,000,561\nc. 2\nd. '42'\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "How would you assign a value of 4 to the variable shrubbery?\n\na. shrubbery == 4\nb. set shrubbery == 4\nc. shrubbery = 4\nd. 4 = shrubbery\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "What happens when you divide an int by a float?\n\na. You get an error\nb. The resulting number is type float\nc. The resulting number is type int\nd. The resulting number is type string\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "The last printed expression is automatically assigned to which\nvariable?\n\na. last\nb. ^\nc. L\nd. _\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Suppose we type the following into the interpreter:\n\nparrot_state, parrot_activity = 'dead', 'pushing up the daisies'\nprint(parrot_state)\nprint(parrot_activity)\n\nWhat will the output look like?\n\na. dead pushing up the daisies\nb. dead\n   pushing up the daisies\nc. 'dead' 'pushing up the daisies'\nd. 'dead'\n   'pushing up the daisies'\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Which input would result in the following output?\n\n\"You're using coconuts!\"\n\na. print('\"You're using coconuts!\"')\nb. print(\"\"You're using coconuts!\"\")\nc. print('\"You\\'re using coconuts!\"')\nd. print(\"You\\'re using coconuts!\")\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Suppose you want to create a string literal, which can span multiple\nlines. Which of these will work?\n\na. \"What is your favorite color?\\n\n   Blue.\"\nb. \"\"\"What is your favorite color?\n   Blue.\"\"\"\nc. '''What is your favorite color?\n   Blue.'''\nd. ('What is your favorite color?\n   Blue.')\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If you have already assigned the variable occupation as follows:\n\noccupation = 'lumberjack'\n\nAnd you want the output: \"I'm a lumberjack and I'm ok\"\n\nWhich of these will work?\n\na. \"I'm a \" occupation \" and I'm ok\"\nb. \"I'm a\", occupation, \" and I'm ok\"\nc. \"I'm a \" + occupation + \" and I'm ok\"\nd. \"I'm a\" + occupation + \"and I'm ok\"\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If the variable cheese is set to 'Stilton', which of these will\noutput 'tilt'?\n\na. cheese[1:5]\nb. cheese[1:4]\nc. cheese[2:5]\nd. cheese[2-5]\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If the variable weapon is set to 'grapefruit', what will be the\noutput of weapon[-2]?\n\na. 't'\nb. 'u'\nc. 'it'\nd. 'i'\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Assuming the following input:\n\nnumbers = [1, 6, 3, 7, 6]\nnumbers[1] = 9\nnumbers.append(2)\n\nWhat will the list numbers look like?\n\na. [9, 6, 3, 7, 6, 2]\nb. [1, 9, 3, 7, 6, 2]\nc. [9, 1, 6, 3, 7, 6, 2]\nd. [9, 1, 6, 3, 7, 2]\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Assuming the variable y is set as follows:\n\ny = [['x', 'y', 'z'], ['1', '2', '3']]\n\nWhich would return '2'?\n\na. y[2][2]\nb. y[2][1]\nc. y[1][2]\nd. y[1][1]\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Which of these will successfully start a while loop?\n\na. while x = 2\nb. while x = 2:\nc. while x == 2\nd. while x == 2:\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Assuming the following input:\n\nx = 0\ntest_word = 'Caerbannog'\nwhile x < len(test_word):\n    print('Ni!')\n    x = x + 3\n\nHow many times will Ni! be printed?\n\na. 4\nb. 3\nc. 5\nd. 6\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ]
  ], 
  [
    [
      "In an if statement, what does an elif section mean?\n\na. It is not part of the if statement\nb. The elif conditions will be checked if the conditions for the if \n   statement aren't met\nc. The code in the elif section will be done whether or not the\n   conditions for the if statement are met\nd. Python will disregard the original if statement; it is just there\n   as a place holder.\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If we input the following:\n\nactors = ['Cleese', 'Chapman', 'Idle']\nif len(actors) >= 4:\n    print('Too many.')\nelif len(actors) <= 2:\n    print('Too few.')\nelse:\n    print('Just right.')\n\nWhat will be printed?\n\na. Too many.\nb. Too few.\nc. Just right.\nd. Nothing\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If we input the following:\n\narsenal = ['banana', 'grapefruit']\nfor weapon in arsenal:\n    print(len(weapon))\n\nWhat will be printed?\n\na. 6, 10\nb. banana\n   grapefruit\nc. '6'\n   '10'\nd. 6\n   10\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If we input the following:\n\nour_list = [[1, 2, 3], ['a', 'b', 'c']]\nfor element in our_list:\n    for part in element:\n        print(part)\n\nHow many lines will be printed?\n\na. 6\nb. 2\nc. 3\nd. 9\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If shopping is a list, and x = 3, what is shopping[x]?\n\na. Three copies of the list shopping\nb. All of the items in the list shopping\nc. The fourth item in the list shopping\nd. The third item in the list shopping\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "How many numbers are there in range(1, 10, 2)?\n\na. 4\nb. 5\nc. 6\nd. 10\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "A break statement does which of the following?\n\na. Breaks out of the smallest enclosing for or while loop\nb. Breaks out of all enclosing for and/or while loops\nc. Causes a program to end in an error\nd. Goes straight to any else: statements in the for or while\n   loop\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If we input the following:\n\nfor x in range(4):\n    if x < 3:\n        continue\n    print(x)\n\nHow many numbers will be printed?\n\na. 4\nb. 2\nc. 3\nd. 1\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "A pass statement does which of the following?\n\na. Passes by the next loop\nb. Breaks out of the current loop\nc. It doesn't do anything\nd. Clears a variable\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If a variable is created inside a function, where is it stored?\n\na. The global symbol table\nb. The function's local symbol table\nc. The table of built-in names\nd. The docstring\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If a variable is called inside of a function, where will python search\nfor the variable first?\n\na. The global symbol table\nb. Python's built-in names\nc. The docstring\nd. That function's local symbol table\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If a function has no return statement, what value will it return?\n\na. None\nb. 0\nc. 1\nd. Its own name\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "In the following:\n\nmy_list.append('Hello')\n\nappend is referred to as:\n\na. An argument\nb. A method\nc. An object\nd. A definition\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "In the following function:\n\ndef is_it_cheese(a, print_result=0):\n    if a in ('red leicester', 'tilsit', 'caerphilly', 'bel paese'):\n        if print_result:\n            print('It's cheese!')\n        return True\n    else:\n        if print_result:\n            print('It isn't cheese.')\n        return False\n\nWhat is print_result?\n\na. An optional argument\nb. A mandatory argument\nc. An object\nd. A type\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If we input the following:\n\nour_list = [1]\ndef our_function(input=our_list):\n    print(input)\n\nour_list.append(2)\nour_function()\n\nWhat will be printed?\n\na. [2]\nb. [1]\nc. [1, 2]\nd. 1, 2\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "In a function, keyword arguments must be:\n\na. Before all positional arguments\nb. Between positional arguments\nc. After all positional arguments\nd. Preceded by a number\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Which one of these function calls contains a keyword argument?\n\na. f = our_function('word')\nb. f = our_function(20)\nc. f = our_function('word', 20)\nd. f = our_function('word', number=20)\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "In a function that starts as follows:\n\ndef my_function(arg, **stuff):\n\nWhat will be assigned to the variable stuff?\n\na. All of the arguments\nb. All keyword arguments after arg\nc. All keyword arguments including arg, if arg is entered as arg=my_arg\nd. All arguments of any kind after arg\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ]
  ], 
  [
    [
      "Which list method will add the number 5 to the end of list ourlist?\n\na. ourlist.add(5)\nb. ourlist.extend(5)\nc. ourlist.end(5)\nd. ourlist.append(5)\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If we input the following:\n\na = [1]\na.extend(range(1, 7))\nprint(a)\n\nWhat will the output look like?\n\na. [1, 2, 3, 4, 5, 6, 7]\nb. [1, 1, 2, 3, 4, 5, 6]\nc. [1, 1, 2, 3, 4, 5, 6, 7]\nd. [1, 2, 3, 4, 5, 6]\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If our list ingredients looks like this:\n['spam', 'spam', 'spam', 'spam', 'spam', 'spam', 'spam']\n\nAnd we want to add 'spam' between 'spam' and 'spam', which of these\nwill work?\n\na. ingredients.pop(2, 'spam')\nb. ingredients.append(2, 'spam')\nc. ingredients.insert(2, 'spam')\nd. ingredients.new(2, 'spam')\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If we want to remove the first item with value 'lupin' from a list\ncalled supplies, which of these will work?\n\na. supplies.pop('lupin')\nb. supplies.clear('lupin')\nc. supplies.index('lupin')\nd. supplies.remove('lupin')\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If we want to assign the last item in a list called example to the\nvariable a, and remove it from the list, which of these would we use?\n\na. example.remove(a)\nb. a = example.pop()\nc. example.pop(a)\nd. a = example.remove()\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Which of these will reverse a list called ourlist in place?\n\na. ourlist = ourlist.reverse()\nb. ourlist.index(reverse)\nc. ourlist.reverse()\nd. ourlist.reverse(True)\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If we have a list called weapons, and we want to get the index number\nof the first item with value 'banana', which of these will work?\n\na. weapons.number('banana')\nb. weapons.locate('banana')\nc. weapons.count('banana')\nd. weapons.index('banana')\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Which method will return the number of items with value 'spam' in a\nlist called ingredients?\n\na. ingredients.count('spam')\nb. ingredients.list('spam')\nc. ingredients.number('spam')\nd. list.count(ingredients, 'spam')\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "A \"stack\" is a list that is used to return results. In what order\nare the results returned?\n\na. First in, first out\nb. Last in, first out\nc. Alphanumeric\nd. Random\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "A \"queue\" is another type of list that is used to return results. In\nwhat order does a queue return results?\n\na. First in, first out\nb. Last in, first out\nc. Alphanumeric\nd. Random\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If we create a queue as follows:\n\nfrom collections import deque\nourqueue = deque(['Lancelot', 'Gallahad', 'Robin', 'Bedevere'])\n\nWhich of the following will remove the first item and assign it\nto the variable guest?\n\na. ourqueue.pop(guest)\nb. guest = ourqueue.pop()\nc. guest = ourqueue.popleft()\nd. guest = ourqueue.first()\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If we have a list called ournumbers:\n[1, 54, -237, 12, -1, 5000]\n\nWhich of these will make a list of all positive numbers in ournumbers?\n\na. newnumbers = ournumbers.remove([x < 0])\nb. newnumbers = ournumbers.index(0:)\nc. newnumbers = [ x >=0 for x in ournumbers ]\nd. newnumbers = [ x for x in ournumbers if x >= 0 ]\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If we have the following lists:\n\nhorizontal = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\nvertical = ['1', '2', '3', '4', '5', '6', '7', '8']\n\nHow would we combine them to get a list of coordinate tuples for all \nsquares on a chess board?\n\na. squares = [ (x, y) for x in horizontal for y in vertical ]\nb. squares = [ x, y for x in horizontal for y in vertical ]\nc. squares = [ (x, y) for x in horizontal and y in vertical ]\nd. squares = [ x, y for x in horizontal with y in vertical ]\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "The del statement is useful for deleting variables, but also has\nwhich other use when it comes to lists?\n\na. Removing list items by value\nb. Removing list items by index\nc. Removing list items on a last-in, first-out basis\nd. Removing list items on a first-in, first-out basis\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If we have a variable called stuff:\n\nstuff = 'example'\n\nWhich of the following would create a tuple containing data on stuff?\n\na. ourdata = len(stuff), type(stuff)\nb. ourdata = [ len(stuff), type(stuff) ]\nc. ourdata = { len(stuff), type(stuff) }\nd. ourdata = tuple(len(stuff), type(stuff))\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Which of the following statements is true?\n\na. Tuples are mutable; lists are immutable\nb. Tuples and lists are mutable\nc. Tuples are immutable; lists are mutable\nd. Tuples and lists are immutable\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Which of the following will create an empty set?\n\na. newset = set()\nb. newset = {}\nc. newset = ()\nd. newset = set{}\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Sets differ from lists in which of these ways?\n\na. Sets cannot contain two of the same element\nb. Sets are immutable\nc. Sets are not iterable\nd. Sets are iterable, lists are not\n", 
      "a", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Which of the following describes a dictionary?\n\na. An unordered list containing words\nb. An ordered list containing words\nc. A list containing strings\nd. A list containing key: value pairs\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "Which of the following will return a list of keys from the\ndictionary called ourdict?\n\na. ourdict.keys()\nb. list(ourdict.keys())\nc. list.keys(ourdict)\nd. ourdict.list(keys())\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "The dict() constructor is NOT capable of which of the following?\n\na. Creating dictionaries from keyword arguments\nb. Creating dictionaries from lists of tuples\nc. Creating dictionaries from text files\nd. Creating dictionaries from key: value expressions\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "If we have a list called lattitudes, and a list called longitudes,\nwhich of these would combine them into a list of coordinate tuples?\n\na. coordinates = [ (x, y) for x in lattitudes for y in longitudes ]\nb. coordinates = [ (x, y) for x in lattitudes and y in longitudes ]\nc. coordinates = [ (x, y) for x, y in zip(lattitudes, longitudes) ]\nd. coordinates = [ (x, y) for x, y in lattitudes, longitudes ]\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "In the following expression:\n\nif parrot == 'alive' or parrot == 'dead' and not parrot == 'perched':\n\nIn what order will the conditions be evaluated?\n\na. if (parrot == 'alive' or parrot == 'dead') and (not parrot == 'perched'):\nb. if parrot == 'alive' or (parrot == 'dead' and (not parrot == 'perched')):\nc. if parrot == ('alive' or parrot == 'dead') and not (parrot == 'perched'):\nd. if (parrot == 'alive' or parrot == 'dead') (and not parrot == 'perched'):\n", 
      "b", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "In the following if conditional:\n\nif 0 <= 1 and 2 <= 1 or 3 <= 2:\n    return 1\nelse:\n    return 0\n\nWhat will happen?\na. A ValueError will be raised\nb. A TypeError will be raised\nc. A 1 will be returned\nd. A 0 will be returned\n", 
      "d", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ], 
    [
      "In the following conditional:\n\nif 5 == 5.0: return True\nelse: return False\n\nWhat will happen?\na. A ValueError will be raised\nb. A TypeError will be raised\nc. True will be returned\nd. False will be returned\n", 
      "c", 
      [
        "a", 
        "b", 
        "c", 
        "d"
      ], 
      null
    ]
  ]
]