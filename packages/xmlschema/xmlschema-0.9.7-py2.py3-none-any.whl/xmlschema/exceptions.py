# -*- coding: utf-8 -*-
#
# Copyright (c), 2016, SISSA (International School for Advanced Studies).
# All rights reserved.
# This file is distributed under the terms of the MIT License.
# See the file 'LICENSE' in the root directory of the present
# distribution, or http://opensource.org/licenses/MIT.
#
# @author Davide Brunato <brunato@sissa.it>
#
"""
This module contains the exception classes of the 'xmlschema' package.
"""
try:
    # Python 3 specific imports
    from urllib.error import URLError
except ImportError:
    # Python 2 fallback
    # noinspection PyCompatibility
    from urllib2 import URLError

from .core import PY3, etree_tostring, etree_iselement


class XMLSchemaException(Exception):
    """The base exception that let you catch all the errors generated by the library."""
    pass


class XMLSchemaOSError(XMLSchemaException, OSError):
    pass


class XMLSchemaLookupError(XMLSchemaException, LookupError):
    pass


class XMLSchemaAttributeError(XMLSchemaException, AttributeError):
    pass


class XMLSchemaTypeError(XMLSchemaException, TypeError):
    pass


class XMLSchemaValueError(XMLSchemaException, ValueError):
    pass


class XMLSchemaSyntaxError(XMLSchemaException, SyntaxError):
    pass


class XMLSchemaKeyError(XMLSchemaException, KeyError):
    pass


class XMLSchemaURLError(XMLSchemaException, URLError):
    pass


class XMLSchemaParseError(XMLSchemaException, ValueError):
    """Raised when an error is found when parsing an XML Schema."""

    def __init__(self, message, elem=None):
        self.message = message or u''
        self.elem = elem

    def __str__(self):
        # noinspection PyCompatibility
        return unicode(self).encode("utf-8")

    def __unicode__(self):
        return u''.join([
            self.message,
            u"\n\n  %s\n" % etree_tostring(
                self.elem, max_lines=20
            ) if self.elem is not None else '',
        ])

    if PY3:
        __str__ = __unicode__


class XMLSchemaRegexError(XMLSchemaParseError):
    """Raised when an error is found when parsing an XML Schema regular expression."""
    pass


class XMLSchemaXPathError(XMLSchemaParseError):
    """Raised when an error is found when parsing an XPath expression."""
    pass


class XMLSchemaComponentError(XMLSchemaException, ValueError):
    """
    Raised when an error is found in an XML Schema component. Indicates 
    an inconsistency in the schema representation structure.
    """
    def __init__(self, obj, name, ref=None, message=None):
        """
        :param obj: The object that generate the exception.
        :param name: The attribute/key name.
        :param ref: An object or type that refer to the name.
        :param message: Error text message.
        """
        self.message = message
        self.obj = obj
        if not isinstance(ref, (int, str, type)):
            self.description = 'attribute %r' % name
        elif isinstance(ref, int):
            self.description = 'item %d of %r' % (ref, name)
        elif isinstance(ref, str):
            self.description = '%r: %s' % (name, ref)
        elif issubclass(ref, dict):
                self.description = 'value of dictionary %r' % name
        elif issubclass(ref, list):
            self.description = 'item of list %r' % name
        else:
            self.description = 'instance %r of type %r' % (name, ref)

    def __str__(self):
        # noinspection PyCompatibility
        return unicode(self).encode("utf-8")

    def __unicode__(self):
        return u'%r: %s: %s' % (self.obj, self.description, self.message)

    if PY3:
        __str__ = __unicode__


class XMLSchemaValidationError(XMLSchemaException, ValueError):
    """Raised when the XML data is not validated with the XSD component or schema."""
    message = None

    def __init__(self, validator, obj, reason=None):
        self.validator = validator
        self.obj = obj
        self.reason = reason
        self.elem = obj if etree_iselement(obj) else None
        self.schema_elem = None
        if not self.message:
            self.message = u"failed validating %r with %r." % (obj, validator)

    def __str__(self):
        # noinspection PyCompatibility
        return unicode(self).encode("utf-8")

    def __unicode__(self):
        return u''.join([
            self.message, '\n',
            u'\nReason: %s\n' % self.reason if self.reason is not None else '',
            u"\nSchema:\n\n  %s\n" % etree_tostring(
                self.schema_elem, max_lines=20
            ) if self.schema_elem is not None else '',
            u"\nInstance:\n\n  %s\n" % etree_tostring(
                self.elem, max_lines=20
            ) if self.elem is not None else ''
        ])

    if PY3:
        __str__ = __unicode__

    def __setattr__(self, name, value):
        if name == 'validator' and hasattr(value, 'elem'):
            self.schema_elem = value.elem
        super(XMLSchemaValidationError, self).__setattr__(name, value)


class XMLSchemaDecodeError(XMLSchemaValidationError):
    """Raised when an XML data string is not decodable to a Python object."""

    def __init__(self, validator, obj, decoder, reason=None):
        self.decoder = decoder
        self.message = u"cannot decode %r using the decoder %r " \
                       u"of validator %r." % (obj, decoder, validator)
        super(XMLSchemaDecodeError, self).__init__(validator, obj, reason)


class XMLSchemaEncodeError(XMLSchemaValidationError):
    """Raised when an object is not encodable to an XML data string."""

    def __init__(self, validator, obj, encoder, reason=None):
        self.encoder = encoder
        self.message = u"cannot encode %r using the encoder %r " \
                       u"of validator %r." % (obj, encoder, validator)
        super(XMLSchemaEncodeError, self).__init__(validator, obj, reason)
