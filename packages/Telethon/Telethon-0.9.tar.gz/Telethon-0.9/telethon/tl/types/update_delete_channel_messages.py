from telethon.tl.mtproto_request import MTProtoRequest


class UpdateDeleteChannelMessages(MTProtoRequest):
    """Class generated by TLObjects' generator. All changes will be ERASED. Original .tl definition below.
    updateDeleteChannelMessages#c37521c9 channel_id:int messages:Vector<int> pts:int pts_count:int = Update"""

    # Telegram's constructor ID (and unique identifier) for this class
    constructor_id = 0xc37521c9

    def __init__(self, channel_id, messages, pts, pts_count):
        """
        :param channel_id: Telegram type: «int».
        :param messages: Telegram type: «int». Must be a list.
        :param pts: Telegram type: «int».
        :param pts_count: Telegram type: «int».
        """
        super().__init__()

        self.channel_id = channel_id
        self.messages = messages
        self.pts = pts
        self.pts_count = pts_count

    def on_send(self, writer):
        writer.write_int(UpdateDeleteChannelMessages.constructor_id, signed=False)
        writer.write_int(self.channel_id)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.messages))
        for messages_item in self.messages:
            writer.write_int(messages_item)

        writer.write_int(self.pts)
        writer.write_int(self.pts_count)

    @staticmethod
    def empty():
        """Returns an "empty" instance (all attributes are None)"""
        return UpdateDeleteChannelMessages(None, None, None, None)

    def on_response(self, reader):
        self.channel_id = reader.read_int()
        reader.read_int()  # Vector's constructor ID
        self.messages = []  # Initialize an empty list
        messages_len = reader.read_int()
        for _ in range(messages_len):
            messages_item = reader.read_int()
            self.messages.append(messages_item)

        self.pts = reader.read_int()
        self.pts_count = reader.read_int()

    def __repr__(self):
        return 'updateDeleteChannelMessages#c37521c9 channel_id:int messages:Vector<int> pts:int pts_count:int = Update'

    def __str__(self):
        return '(updateDeleteChannelMessages (ID: 0xc37521c9) = (channel_id={}, messages={}, pts={}, pts_count={}))'.format(str(self.channel_id), None if not self.messages else [str(_) for _ in self.messages], str(self.pts), str(self.pts_count))
