from telethon.tl.mtproto_request import MTProtoRequest


class PageBlockCollage(MTProtoRequest):
    """Class generated by TLObjects' generator. All changes will be ERASED. Original .tl definition below.
    pageBlockCollage#08b31c4f items:Vector<PageBlock> caption:RichText = PageBlock"""

    # Telegram's constructor ID (and unique identifier) for this class
    constructor_id = 0x8b31c4f

    def __init__(self, items, caption):
        """
        :param items: Telegram type: «PageBlock». Must be a list.
        :param caption: Telegram type: «RichText».
        """
        super().__init__()

        self.items = items
        self.caption = caption

    def on_send(self, writer):
        writer.write_int(PageBlockCollage.constructor_id, signed=False)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.items))
        for items_item in self.items:
            items_item.on_send(writer)

        self.caption.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (all attributes are None)"""
        return PageBlockCollage(None, None)

    def on_response(self, reader):
        reader.read_int()  # Vector's constructor ID
        self.items = []  # Initialize an empty list
        items_len = reader.read_int()
        for _ in range(items_len):
            items_item = reader.tgread_object()
            self.items.append(items_item)

        self.caption = reader.tgread_object()

    def __repr__(self):
        return 'pageBlockCollage#08b31c4f items:Vector<PageBlock> caption:RichText = PageBlock'

    def __str__(self):
        return '(pageBlockCollage (ID: 0x8b31c4f) = (items={}, caption={}))'.format(None if not self.items else [str(_) for _ in self.items], str(self.caption))
