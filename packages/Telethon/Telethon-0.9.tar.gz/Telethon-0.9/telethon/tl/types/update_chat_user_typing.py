from telethon.tl.mtproto_request import MTProtoRequest


class UpdateChatUserTyping(MTProtoRequest):
    """Class generated by TLObjects' generator. All changes will be ERASED. Original .tl definition below.
    updateChatUserTyping#9a65ea1f chat_id:int user_id:int action:SendMessageAction = Update"""

    # Telegram's constructor ID (and unique identifier) for this class
    constructor_id = 0x9a65ea1f

    def __init__(self, chat_id, user_id, action):
        """
        :param chat_id: Telegram type: «int».
        :param user_id: Telegram type: «int».
        :param action: Telegram type: «SendMessageAction».
        """
        super().__init__()

        self.chat_id = chat_id
        self.user_id = user_id
        self.action = action

    def on_send(self, writer):
        writer.write_int(UpdateChatUserTyping.constructor_id, signed=False)
        writer.write_int(self.chat_id)
        writer.write_int(self.user_id)
        self.action.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (all attributes are None)"""
        return UpdateChatUserTyping(None, None, None)

    def on_response(self, reader):
        self.chat_id = reader.read_int()
        self.user_id = reader.read_int()
        self.action = reader.tgread_object()

    def __repr__(self):
        return 'updateChatUserTyping#9a65ea1f chat_id:int user_id:int action:SendMessageAction = Update'

    def __str__(self):
        return '(updateChatUserTyping (ID: 0x9a65ea1f) = (chat_id={}, user_id={}, action={}))'.format(str(self.chat_id), str(self.user_id), str(self.action))
