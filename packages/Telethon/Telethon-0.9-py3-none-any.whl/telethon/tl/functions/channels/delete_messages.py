from telethon.tl.mtproto_request import MTProtoRequest


class DeleteMessagesRequest(MTProtoRequest):
    """Class generated by TLObjects' generator. All changes will be ERASED. Original .tl definition below.
    channels.deleteMessages#84c1fd4e channel:InputChannel id:Vector<int> = messages.AffectedMessages"""

    # Telegram's constructor ID (and unique identifier) for this class
    constructor_id = 0x84c1fd4e

    def __init__(self, channel, id):
        """
        :param channel: Telegram type: «InputChannel».
        :param id: Telegram type: «int». Must be a list.
        """
        super().__init__()
        self.result = None
        self.confirmed = True  # Confirmed by default

        self.channel = channel
        self.id = id

    def on_send(self, writer):
        writer.write_int(DeleteMessagesRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.id))
        for id_item in self.id:
            writer.write_int(id_item)

    @staticmethod
    def empty():
        """Returns an "empty" instance (all attributes are None)"""
        return DeleteMessagesRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __repr__(self):
        return 'channels.deleteMessages#84c1fd4e channel:InputChannel id:Vector<int> = messages.AffectedMessages'

    def __str__(self):
        return '(channels.deleteMessages (ID: 0x84c1fd4e) = (channel={}, id={}))'.format(str(self.channel), None if not self.id else [str(_) for _ in self.id])
