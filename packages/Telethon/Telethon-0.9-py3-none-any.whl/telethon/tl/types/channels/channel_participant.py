from telethon.tl.mtproto_request import MTProtoRequest


class ChannelParticipant(MTProtoRequest):
    """Class generated by TLObjects' generator. All changes will be ERASED. Original .tl definition below.
    channels.channelParticipant#d0d9b163 participant:ChannelParticipant users:Vector<User> = channels.ChannelParticipant"""

    # Telegram's constructor ID (and unique identifier) for this class
    constructor_id = 0xd0d9b163

    def __init__(self, participant, users):
        """
        :param participant: Telegram type: «ChannelParticipant».
        :param users: Telegram type: «User». Must be a list.
        """
        super().__init__()

        self.participant = participant
        self.users = users

    def on_send(self, writer):
        writer.write_int(ChannelParticipant.constructor_id, signed=False)
        self.participant.on_send(writer)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.users))
        for users_item in self.users:
            users_item.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (all attributes are None)"""
        return ChannelParticipant(None, None)

    def on_response(self, reader):
        self.participant = reader.tgread_object()
        reader.read_int()  # Vector's constructor ID
        self.users = []  # Initialize an empty list
        users_len = reader.read_int()
        for _ in range(users_len):
            users_item = reader.tgread_object()
            self.users.append(users_item)

    def __repr__(self):
        return 'channels.channelParticipant#d0d9b163 participant:ChannelParticipant users:Vector<User> = channels.ChannelParticipant'

    def __str__(self):
        return '(channels.channelParticipant (ID: 0xd0d9b163) = (participant={}, users={}))'.format(str(self.participant), None if not self.users else [str(_) for _ in self.users])
