from telethon.tl.mtproto_request import MTProtoRequest


class ReplyKeyboardForceReply(MTProtoRequest):
    """Class generated by TLObjects' generator. All changes will be ERASED. Original .tl definition below.
    replyKeyboardForceReply#f4108aa0 flags:# single_use:flags.1?true selective:flags.2?true = ReplyMarkup"""

    # Telegram's constructor ID (and unique identifier) for this class
    constructor_id = 0xf4108aa0

    def __init__(self, single_use=None, selective=None):
        """
        :param single_use: Telegram type: «true».
        :param selective: Telegram type: «true».
        """
        super().__init__()

        self.single_use = single_use
        self.selective = selective

    def on_send(self, writer):
        writer.write_int(ReplyKeyboardForceReply.constructor_id, signed=False)
        # Calculate the flags. This equals to those flag arguments which are NOT None
        flags = 0
        flags |= (1 << 1) if self.single_use else 0
        flags |= (1 << 2) if self.selective else 0
        writer.write_int(flags)


    @staticmethod
    def empty():
        """Returns an "empty" instance (all attributes are None)"""
        return ReplyKeyboardForceReply(None, None)

    def on_response(self, reader):
        flags = reader.read_int()

        if (flags & (1 << 1)) != 0:
            self.single_use = True  # Arbitrary not-None value, no need to read since it is a flag

        if (flags & (1 << 2)) != 0:
            self.selective = True  # Arbitrary not-None value, no need to read since it is a flag

    def __repr__(self):
        return 'replyKeyboardForceReply#f4108aa0 flags:# single_use:flags.1?true selective:flags.2?true = ReplyMarkup'

    def __str__(self):
        return '(replyKeyboardForceReply (ID: 0xf4108aa0) = (single_use={}, selective={}))'.format(str(self.single_use), str(self.selective))
