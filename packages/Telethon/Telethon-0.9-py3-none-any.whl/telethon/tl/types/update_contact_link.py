from telethon.tl.mtproto_request import MTProtoRequest


class UpdateContactLink(MTProtoRequest):
    """Class generated by TLObjects' generator. All changes will be ERASED. Original .tl definition below.
    updateContactLink#9d2e67c5 user_id:int my_link:ContactLink foreign_link:ContactLink = Update"""

    # Telegram's constructor ID (and unique identifier) for this class
    constructor_id = 0x9d2e67c5

    def __init__(self, user_id, my_link, foreign_link):
        """
        :param user_id: Telegram type: «int».
        :param my_link: Telegram type: «ContactLink».
        :param foreign_link: Telegram type: «ContactLink».
        """
        super().__init__()

        self.user_id = user_id
        self.my_link = my_link
        self.foreign_link = foreign_link

    def on_send(self, writer):
        writer.write_int(UpdateContactLink.constructor_id, signed=False)
        writer.write_int(self.user_id)
        self.my_link.on_send(writer)
        self.foreign_link.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (all attributes are None)"""
        return UpdateContactLink(None, None, None)

    def on_response(self, reader):
        self.user_id = reader.read_int()
        self.my_link = reader.tgread_object()
        self.foreign_link = reader.tgread_object()

    def __repr__(self):
        return 'updateContactLink#9d2e67c5 user_id:int my_link:ContactLink foreign_link:ContactLink = Update'

    def __str__(self):
        return '(updateContactLink (ID: 0x9d2e67c5) = (user_id={}, my_link={}, foreign_link={}))'.format(str(self.user_id), str(self.my_link), str(self.foreign_link))
