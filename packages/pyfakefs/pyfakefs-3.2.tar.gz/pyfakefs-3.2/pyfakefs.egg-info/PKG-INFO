Metadata-Version: 1.1
Name: pyfakefs
Version: 3.2
Summary: pyfakefs implements a fake file system that mocks the Python file system modules.
Home-page: http://pyfakefs.org
Author: John McGehee
Author-email: pyfakefs@johnnado.com
License: UNKNOWN
Description: pyfakefs
        ========
        
        pyfakefs implements a fake file system that mocks the Python file system
        modules. Using pyfakefs, your tests operate on a fake file system in
        memory without touching the real disk. The software under test requires
        no modification to work with pyfakefs.
        
        pyfakefs works with Linux, Windows and MacOS.
        
        Documentation
        -------------
        
        This file provides general usage instructions for pyfakefs. There is
        more:
        
        -  The `pyfakefs API
           Reference <http://jmcgeheeiv.github.io/pyfakefs/>`__ contains
           documentation for each pyfakefs class, method and function
        -  The `pyfakefs
           Wiki <https://github.com/jmcgeheeiv/pyfakefs/wiki/Home>`__ provides
           more detailed information on specific topics
        -  The `Release
           Notes <https://github.com/jmcgeheeiv/pyfakefs/blob/master/CHANGES.md>`__
           shows a list of changes in the latest versions
        
        Link to pyfakefs.org
        ~~~~~~~~~~~~~~~~~~~~
        
        In your own documentation, please link to pyfakefs using
        http://pyfakefs.org. This URL always points to the most relevant top
        page for pyfakefs.
        
        Usage
        -----
        
        There are several approaches to implementing tests using pyfakefs.
        
        Automatically find and patch
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        
        The first approach is to allow pyfakefs to automatically find all real
        file functions and modules, and stub these out with the fake file system
        functions and modules. This is explained in the pyfakefs wiki page
        `Automatically find and patch file functions and
        modules <https://github.com/jmcgeheeiv/pyfakefs/wiki/Automatically-find-and-patch-file-functions-and-modules>`__
        and demonstrated in files ``example.py`` and ``example_test.py``.
        
        Patch using the PyTest plugin
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        
        If you use `PyTest <https://doc.pytest.org>`__, you will be interested
        in the PyTest plugin in pyfakefs. This automatically patches all file
        system functions and modules in a manner similar to the `automatic find
        and patch
        approach <https://github.com/jmcgeheeiv/pyfakefs/wiki/Automatically-find-and-patch-file-functions-and-modules>`__
        described above.
        
        The PyTest plugin provides the ``fs`` fixture for use in your test. For
        example:
        
        .. code:: python
        
            def my_fakefs_test(fs):
                # "fs" is the reference to the fake file system
                fs.CreateFile('/var/data/xx1.txt')
                assert os.path.exists('/var/data/xx1.txt')
        
        Patch using unittest.mock
        ~~~~~~~~~~~~~~~~~~~~~~~~~
        
        The other approach is to do the patching yourself using
        ``mock.patch()``:
        
        .. code:: python
        
            import pyfakefs.fake_filesystem as fake_fs
        
            # Create a faked file system
            fs = fake_fs.FakeFilesystem()
        
            # Do some setup on the faked file system
            fs.CreateFile('/var/data/xx1.txt')
            fs.CreateFile('/var/data/xx2.txt')
        
            # Replace some built-in file system related modules you use with faked ones
        
            # Assuming you are using the mock library to ... mock things
            try:
                from unittest.mock import patch  # In Python 3, mock is built-in
            except ImportError:
                from mock import patch  # Python 2
        
            import pyfakefs.fake_filesystem_glob as fake_glob
        
            # Note that this fake module is based on the fake fs you just created
            glob = fake_glob.FakeGlobModule(fs)
            with patch('mymodule.glob', glob):
                print(glob.glob('/var/data/xx*'))
        
        Installation
        ------------
        
        Compatibility
        ~~~~~~~~~~~~~
        
        pyfakefs works with Python 2.6 and above, on Linux, Windows and OSX
        (MacOS).
        
        pyfakefs works with `PyTest <doc.pytest.org>`__ version 2.8.6 or above.
        
        pyfakefs will not work with Python libraries that use C libraries to
        access the file system. This is because pyfakefs cannot patch the
        underlying C libraries' file access functions--the C libraries will
        always access the real file system. For example, pyfakefs will not work
        with ```lxml`` <http://lxml.de/>`__. In this case ``lxml`` must be
        replaced with a pure Python alternative such as
        ```xml.etree.ElementTree`` <https://docs.python.org/3/library/xml.etree.elementtree.html>`__.
        
        PyPi
        ~~~~
        
        `pyfakefs is available on
        PyPi <https://pypi.python.org/pypi/pyfakefs/>`__.
        
        Development
        -----------
        
        Continuous integration
        ~~~~~~~~~~~~~~~~~~~~~~
        
        pyfakefs is automatically tested with Python 2.6 and above, and it is
        currently |Build Status|.
        
        See `Travis-CI <http://travis-ci.org>`__ for `test results for each
        Python version <https://travis-ci.org/jmcgeheeiv/pyfakefs>`__.
        
        Running pyfakefs unit tests
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        
        pyfakefs unit tests are available via two test scripts:
        
        .. code:: bash
        
            $ python all_tests.py
            $ py.test pytest_plugin_test.py
        
        These scripts are called by ``tox`` and Travis-CI. ``tox`` can be used
        to run tests locally against supported python versions:
        
        .. code:: bash
        
            $ tox
        
        History
        -------
        
        pyfakefs.py was initially developed at Google by Mike Bland as a modest
        fake implementation of core Python modules. It was introduced to all of
        Google in September 2006. Since then, it has been enhanced to extend its
        functionality and usefulness. At last count, pyfakefs is used in over
        2,000 Python tests at Google.
        
        Google released pyfakefs to the public in 2011 as Google Code project
        `pyfakefs <http://code.google.com/p/pyfakefs/>`__: \* Fork
        `jmcgeheeiv-pyfakefs <http://code.google.com/p/jmcgeheeiv-pyfakefs/>`__
        added `direct support for unittest and
        doctest <../../wiki/Automatically-find-and-patch-file-functions-and-modules>`__
        \* Fork
        `shiffdane-jmcgeheeiv-pyfakefs <http://code.google.com/p/shiffdane-jmcgeheeiv-pyfakefs/>`__
        added further corrections
        
        After the `shutdown of Google
        Code <http://google-opensource.blogspot.com/2015/03/farewell-to-google-code.html>`__
        was announced, `John McGehee <https://github.com/jmcgeheeiv>`__ merged
        all three Google Code projects together `here on
        GitHub <https://github.com/jmcgeheeiv/pyfakefs>`__ where an enthusiastic
        community actively supports, maintains and extends pyfakefs.
        
        .. |Build Status| image:: https://travis-ci.org/jmcgeheeiv/pyfakefs.svg
           :target: https://travis-ci.org/jmcgeheeiv/pyfakefs
        
Keywords: testing,test,file,os,shutil,glob,mocking,unittest,fakes,filesystem,unit
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Operating System :: POSIX
Classifier: Operating System :: MacOS
Classifier: Operating System :: Microsoft :: Windows
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Testing
Classifier: Topic :: System :: Filesystems
